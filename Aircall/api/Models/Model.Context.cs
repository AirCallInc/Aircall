//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace api.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Aircall_DBEntities1 : DbContext
    {
        public Aircall_DBEntities1()
            : base("name=Aircall_DBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppAccessToken> AppAccessTokens { get; set; }
        public virtual DbSet<AreaMaster> AreaMasters { get; set; }
        public virtual DbSet<BillingHistory> BillingHistories { get; set; }
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientAddress> ClientAddresses { get; set; }
        public virtual DbSet<ClientCheckNumber> ClientCheckNumbers { get; set; }
        public virtual DbSet<ClientPaymentMethod> ClientPaymentMethods { get; set; }
        public virtual DbSet<ClientUnit> ClientUnits { get; set; }
        public virtual DbSet<ClientUnitInvoice> ClientUnitInvoices { get; set; }
        public virtual DbSet<ClientUnitManual> ClientUnitManuals { get; set; }
        public virtual DbSet<ClientUnitPart> ClientUnitParts { get; set; }
        public virtual DbSet<ClientUnitPicture> ClientUnitPictures { get; set; }
        public virtual DbSet<ClientUnitServiceCount> ClientUnitServiceCounts { get; set; }
        public virtual DbSet<ClientUnitSubscription> ClientUnitSubscriptions { get; set; }
        public virtual DbSet<CMSPage> CMSPages { get; set; }
        public virtual DbSet<ContactRequest> ContactRequests { get; set; }
        public virtual DbSet<DailyPartListMaster> DailyPartListMasters { get; set; }
        public virtual DbSet<EmailsSent> EmailsSents { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmpAppAccessToken> EmpAppAccessTokens { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeLeave> EmployeeLeaves { get; set; }
        public virtual DbSet<EmployeeLocation> EmployeeLocations { get; set; }
        public virtual DbSet<EmployeePartRequest> EmployeePartRequests { get; set; }
        public virtual DbSet<EmployeePartRequestMaster> EmployeePartRequestMasters { get; set; }
        public virtual DbSet<EmployeePlanType> EmployeePlanTypes { get; set; }
        public virtual DbSet<EmployeeSchedule> EmployeeSchedules { get; set; }
        public virtual DbSet<EmployeeWorkarea> EmployeeWorkareas { get; set; }
        public virtual DbSet<FailedBillingHistory> FailedBillingHistories { get; set; }
        public virtual DbSet<MobileScreen> MobileScreens { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NotificationMaster> NotificationMasters { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PageBlock> PageBlocks { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PartnerTicketConversation> PartnerTicketConversations { get; set; }
        public virtual DbSet<PartnerTicketRequest> PartnerTicketRequests { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<PlanSlave> PlanSlaves { get; set; }
        public virtual DbSet<PlanType> PlanTypes { get; set; }
        public virtual DbSet<PreRegistration> PreRegistrations { get; set; }
        public virtual DbSet<RequestedServiceBridge> RequestedServiceBridges { get; set; }
        public virtual DbSet<RequestedService> RequestedServices { get; set; }
        public virtual DbSet<RequestedServiceUnit> RequestedServiceUnits { get; set; }
        public virtual DbSet<RescheduleService> RescheduleServices { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SalesVisitRequest> SalesVisitRequests { get; set; }
        public virtual DbSet<ServiceAttemptCount> ServiceAttemptCounts { get; set; }
        public virtual DbSet<ServiceNoShow> ServiceNoShows { get; set; }
        public virtual DbSet<ServicePartList> ServicePartLists { get; set; }
        public virtual DbSet<ServiceRatingReview> ServiceRatingReviews { get; set; }
        public virtual DbSet<ServiceReport> ServiceReports { get; set; }
        public virtual DbSet<ServiceReportImage> ServiceReportImages { get; set; }
        public virtual DbSet<ServiceReportUnit> ServiceReportUnits { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceUnit> ServiceUnits { get; set; }
        public virtual DbSet<SiteSetting> SiteSettings { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<StripeErrorLog> StripeErrorLogs { get; set; }
        public virtual DbSet<stripelog> stripelogs { get; set; }
        public virtual DbSet<SystemMessage> SystemMessages { get; set; }
        public virtual DbSet<UnitExtraInfo> UnitExtraInfoes { get; set; }
        public virtual DbSet<UnitManual> UnitManuals { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitType> UnitTypes { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkArea> WorkAreas { get; set; }
        public virtual DbSet<ZipCode> ZipCodes { get; set; }
        public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }
    
        public virtual ObjectResult<uspa_CheckInStockAndScheduleService_Result> uspa_CheckInStockAndScheduleService(Nullable<int> employeePartRequestId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CheckInStockAndScheduleService_Result>("uspa_CheckInStockAndScheduleService", employeePartRequestIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetNotificationForDashBoardByUserType_Result> uspa_ClientPortal_GetNotificationForDashBoardByUserType(Nullable<int> clientId, Nullable<int> userTypeId, string status, Nullable<int> callFrom)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var callFromParameter = callFrom.HasValue ?
                new ObjectParameter("callFrom", callFrom) :
                new ObjectParameter("callFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetNotificationForDashBoardByUserType_Result>("uspa_ClientPortal_GetNotificationForDashBoardByUserType", clientIdParameter, userTypeIdParameter, statusParameter, callFromParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetNotificationForDashBoardForClient_Result> uspa_ClientPortal_GetNotificationForDashBoardForClient(Nullable<int> clientId, Nullable<int> addressId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetNotificationForDashBoardForClient_Result>("uspa_ClientPortal_GetNotificationForDashBoardForClient", clientIdParameter, addressIdParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_Insert(Nullable<int> clientId, Nullable<int> unitId, string clientUnitIds, string paymentMethod, Nullable<bool> isSpecial, Nullable<int> orderId, Nullable<int> cardId, string pONumber, string checkNumbers, string checkAmounts, string frontImage, string backImage, string accountingNotes, Nullable<decimal> pricePerMonth, Nullable<decimal> amount, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, Nullable<int> totalUnits)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var clientUnitIdsParameter = clientUnitIds != null ?
                new ObjectParameter("ClientUnitIds", clientUnitIds) :
                new ObjectParameter("ClientUnitIds", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var isSpecialParameter = isSpecial.HasValue ?
                new ObjectParameter("IsSpecial", isSpecial) :
                new ObjectParameter("IsSpecial", typeof(bool));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var checkNumbersParameter = checkNumbers != null ?
                new ObjectParameter("CheckNumbers", checkNumbers) :
                new ObjectParameter("CheckNumbers", typeof(string));
    
            var checkAmountsParameter = checkAmounts != null ?
                new ObjectParameter("CheckAmounts", checkAmounts) :
                new ObjectParameter("CheckAmounts", typeof(string));
    
            var frontImageParameter = frontImage != null ?
                new ObjectParameter("FrontImage", frontImage) :
                new ObjectParameter("FrontImage", typeof(string));
    
            var backImageParameter = backImage != null ?
                new ObjectParameter("BackImage", backImage) :
                new ObjectParameter("BackImage", typeof(string));
    
            var accountingNotesParameter = accountingNotes != null ?
                new ObjectParameter("AccountingNotes", accountingNotes) :
                new ObjectParameter("AccountingNotes", typeof(string));
    
            var pricePerMonthParameter = pricePerMonth.HasValue ?
                new ObjectParameter("PricePerMonth", pricePerMonth) :
                new ObjectParameter("PricePerMonth", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var totalUnitsParameter = totalUnits.HasValue ?
                new ObjectParameter("TotalUnits", totalUnits) :
                new ObjectParameter("TotalUnits", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_Insert", clientIdParameter, unitIdParameter, clientUnitIdsParameter, paymentMethodParameter, isSpecialParameter, orderIdParameter, cardIdParameter, pONumberParameter, checkNumbersParameter, checkAmountsParameter, frontImageParameter, backImageParameter, accountingNotesParameter, pricePerMonthParameter, amountParameter, addedByParameter, addedByTypeParameter, addedDateParameter, totalUnitsParameter);
        }
    
        public virtual int uspa_ClientUnit_RenewPlanForApp(Nullable<int> unitId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_RenewPlanForApp", unitIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnitServiceCount_Update(Nullable<int> clientId, Nullable<int> unitId, Nullable<int> totalPlanService, Nullable<int> totalDonePlanService, Nullable<int> totalRequestService, Nullable<int> totalDoneRequestService, Nullable<int> totalBillsGenerated, Nullable<int> stripeUnitSubscriptionCount, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var totalPlanServiceParameter = totalPlanService.HasValue ?
                new ObjectParameter("TotalPlanService", totalPlanService) :
                new ObjectParameter("TotalPlanService", typeof(int));
    
            var totalDonePlanServiceParameter = totalDonePlanService.HasValue ?
                new ObjectParameter("TotalDonePlanService", totalDonePlanService) :
                new ObjectParameter("TotalDonePlanService", typeof(int));
    
            var totalRequestServiceParameter = totalRequestService.HasValue ?
                new ObjectParameter("TotalRequestService", totalRequestService) :
                new ObjectParameter("TotalRequestService", typeof(int));
    
            var totalDoneRequestServiceParameter = totalDoneRequestService.HasValue ?
                new ObjectParameter("TotalDoneRequestService", totalDoneRequestService) :
                new ObjectParameter("TotalDoneRequestService", typeof(int));
    
            var totalBillsGeneratedParameter = totalBillsGenerated.HasValue ?
                new ObjectParameter("TotalBillsGenerated", totalBillsGenerated) :
                new ObjectParameter("TotalBillsGenerated", typeof(int));
    
            var stripeUnitSubscriptionCountParameter = stripeUnitSubscriptionCount.HasValue ?
                new ObjectParameter("StripeUnitSubscriptionCount", stripeUnitSubscriptionCount) :
                new ObjectParameter("StripeUnitSubscriptionCount", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitServiceCount_Update", clientIdParameter, unitIdParameter, totalPlanServiceParameter, totalDonePlanServiceParameter, totalRequestServiceParameter, totalDoneRequestServiceParameter, totalBillsGeneratedParameter, stripeUnitSubscriptionCountParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientUnitServiceCount_UpdateByRequestedServiceId(Nullable<long> requestedServiceId)
        {
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitServiceCount_UpdateByRequestedServiceId", requestedServiceIdParameter);
        }
    
        public virtual int uspa_Services_UpdateNoShowService(Nullable<long> id, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_UpdateNoShowService", idParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ScheduleServiceForUnDoneUnit_Result> uspa_ScheduleServiceForUnDoneUnit(Nullable<int> serviceId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ScheduleServiceForUnDoneUnit_Result>("uspa_ScheduleServiceForUnDoneUnit", serviceIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Units_GetUnitsByModelNumber_Result1> uspa_Units_GetUnitsByModelNumber(string modelNumber)
        {
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Units_GetUnitsByModelNumber_Result1>("uspa_Units_GetUnitsByModelNumber", modelNumberParameter);
        }
    
        public virtual ObjectResult<uspa_EmergencyRequestedServiceSchedule_Result> uspa_EmergencyRequestedServiceSchedule(Nullable<long> requestedServiceId)
        {
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmergencyRequestedServiceSchedule_Result>("uspa_EmergencyRequestedServiceSchedule", requestedServiceIdParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServiceToServiceScheduler_Result> uspa_RequestedServiceToServiceScheduler(Nullable<long> serviceId, Nullable<long> requestedServiceId, Nullable<int> clientId, Nullable<int> addressId, string purposeOfVisit, Nullable<System.DateTime> requestedServiceDate, string requestedServiceTime)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var requestedServiceDateParameter = requestedServiceDate.HasValue ?
                new ObjectParameter("RequestedServiceDate", requestedServiceDate) :
                new ObjectParameter("RequestedServiceDate", typeof(System.DateTime));
    
            var requestedServiceTimeParameter = requestedServiceTime != null ?
                new ObjectParameter("RequestedServiceTime", requestedServiceTime) :
                new ObjectParameter("RequestedServiceTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServiceToServiceScheduler_Result>("uspa_RequestedServiceToServiceScheduler", serviceIdParameter, requestedServiceIdParameter, clientIdParameter, addressIdParameter, purposeOfVisitParameter, requestedServiceDateParameter, requestedServiceTimeParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "CheckEmployeeForAssignService")]
        public virtual IQueryable<CheckEmployeeForAssignService_Result> CheckEmployeeForAssignService(Nullable<long> serviceId, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CheckEmployeeForAssignService_Result>("[Aircall_DBEntities1].[CheckEmployeeForAssignService](@ServiceId, @WorkAreaId, @EmployeeId, @ScheduleDate, @ScheduleStartTime, @ScheduleEndTime)", serviceIdParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter);
        }
    
        public virtual ObjectResult<ColumnNameSelect_Result> ColumnNameSelect(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ColumnNameSelect_Result>("ColumnNameSelect", tableNameParameter);
        }
    
        public virtual int crateclass(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crateclass", tableNameParameter);
        }
    
        public virtual int CreateServiceWithServiceUnits(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> firstServiceWithinDays, Nullable<int> durationInMonth, Nullable<int> numberOfService, Nullable<int> planTypeId, Nullable<int> scheduledServiceCount, Nullable<int> scheduledSubServiceCount, Nullable<System.DateTime> expectedScheduleStartDate, Nullable<System.DateTime> expectedScheduleEndDate, Nullable<int> numberOfUnits, ObjectParameter serviceId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(int));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(int));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var scheduledServiceCountParameter = scheduledServiceCount.HasValue ?
                new ObjectParameter("ScheduledServiceCount", scheduledServiceCount) :
                new ObjectParameter("ScheduledServiceCount", typeof(int));
    
            var scheduledSubServiceCountParameter = scheduledSubServiceCount.HasValue ?
                new ObjectParameter("ScheduledSubServiceCount", scheduledSubServiceCount) :
                new ObjectParameter("ScheduledSubServiceCount", typeof(int));
    
            var expectedScheduleStartDateParameter = expectedScheduleStartDate.HasValue ?
                new ObjectParameter("ExpectedScheduleStartDate", expectedScheduleStartDate) :
                new ObjectParameter("ExpectedScheduleStartDate", typeof(System.DateTime));
    
            var expectedScheduleEndDateParameter = expectedScheduleEndDate.HasValue ?
                new ObjectParameter("ExpectedScheduleEndDate", expectedScheduleEndDate) :
                new ObjectParameter("ExpectedScheduleEndDate", typeof(System.DateTime));
    
            var numberOfUnitsParameter = numberOfUnits.HasValue ?
                new ObjectParameter("NumberOfUnits", numberOfUnits) :
                new ObjectParameter("NumberOfUnits", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateServiceWithServiceUnits", clientIdParameter, addressIdParameter, firstServiceWithinDaysParameter, durationInMonthParameter, numberOfServiceParameter, planTypeIdParameter, scheduledServiceCountParameter, scheduledSubServiceCountParameter, expectedScheduleStartDateParameter, expectedScheduleEndDateParameter, numberOfUnitsParameter, serviceId);
        }
    
        [DbFunction("Aircall_DBEntities1", "GetEmployeeForReschedulledService")]
        public virtual IQueryable<GetEmployeeForReschedulledService_Result> GetEmployeeForReschedulledService(string zipCode, Nullable<long> serviceId, Nullable<int> planTypeId, Nullable<System.DateTime> rescheduledServiceDate, string rescheduleStartTime, string rescheduleEndTime)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var rescheduledServiceDateParameter = rescheduledServiceDate.HasValue ?
                new ObjectParameter("RescheduledServiceDate", rescheduledServiceDate) :
                new ObjectParameter("RescheduledServiceDate", typeof(System.DateTime));
    
            var rescheduleStartTimeParameter = rescheduleStartTime != null ?
                new ObjectParameter("RescheduleStartTime", rescheduleStartTime) :
                new ObjectParameter("RescheduleStartTime", typeof(string));
    
            var rescheduleEndTimeParameter = rescheduleEndTime != null ?
                new ObjectParameter("RescheduleEndTime", rescheduleEndTime) :
                new ObjectParameter("RescheduleEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeForReschedulledService_Result>("[Aircall_DBEntities1].[GetEmployeeForReschedulledService](@ZipCode, @ServiceId, @PlanTypeId, @RescheduledServiceDate, @RescheduleStartTime, @RescheduleEndTime)", zipCodeParameter, serviceIdParameter, planTypeIdParameter, rescheduledServiceDateParameter, rescheduleStartTimeParameter, rescheduleEndTimeParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "GetEmployeeForReschedulledService_Old")]
        public virtual IQueryable<GetEmployeeForReschedulledService_Old_Result> GetEmployeeForReschedulledService_Old(string zipCode, Nullable<long> serviceId, Nullable<int> planTypeId, Nullable<System.DateTime> rescheduledServiceDate, string rescheduleStartTime, string rescheduleEndTime)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var rescheduledServiceDateParameter = rescheduledServiceDate.HasValue ?
                new ObjectParameter("RescheduledServiceDate", rescheduledServiceDate) :
                new ObjectParameter("RescheduledServiceDate", typeof(System.DateTime));
    
            var rescheduleStartTimeParameter = rescheduleStartTime != null ?
                new ObjectParameter("RescheduleStartTime", rescheduleStartTime) :
                new ObjectParameter("RescheduleStartTime", typeof(string));
    
            var rescheduleEndTimeParameter = rescheduleEndTime != null ?
                new ObjectParameter("RescheduleEndTime", rescheduleEndTime) :
                new ObjectParameter("RescheduleEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeForReschedulledService_Old_Result>("[Aircall_DBEntities1].[GetEmployeeForReschedulledService_Old](@ZipCode, @ServiceId, @PlanTypeId, @RescheduledServiceDate, @RescheduleStartTime, @RescheduleEndTime)", zipCodeParameter, serviceIdParameter, planTypeIdParameter, rescheduledServiceDateParameter, rescheduleStartTimeParameter, rescheduleEndTimeParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "GetEmployeeForService")]
        public virtual IQueryable<GetEmployeeForService_Result> GetEmployeeForService(string zipCode, Nullable<long> serviceId, Nullable<int> planTypeId, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, string expectedStartTime, string expectedEndTime)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var expectedStartTimeParameter = expectedStartTime != null ?
                new ObjectParameter("ExpectedStartTime", expectedStartTime) :
                new ObjectParameter("ExpectedStartTime", typeof(string));
    
            var expectedEndTimeParameter = expectedEndTime != null ?
                new ObjectParameter("ExpectedEndTime", expectedEndTime) :
                new ObjectParameter("ExpectedEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeForService_Result>("[Aircall_DBEntities1].[GetEmployeeForService](@ZipCode, @ServiceId, @PlanTypeId, @ExpectedStartDate, @ExpectedEndDate, @ExpectedStartTime, @ExpectedEndTime)", zipCodeParameter, serviceIdParameter, planTypeIdParameter, expectedStartDateParameter, expectedEndDateParameter, expectedStartTimeParameter, expectedEndTimeParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "GetEmployeeForService_Old")]
        public virtual IQueryable<GetEmployeeForService_Old_Result> GetEmployeeForService_Old(string zipCode, Nullable<long> serviceId, Nullable<int> planTypeId, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate, string expectedStartTime, string expectedEndTime)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            var expectedStartTimeParameter = expectedStartTime != null ?
                new ObjectParameter("ExpectedStartTime", expectedStartTime) :
                new ObjectParameter("ExpectedStartTime", typeof(string));
    
            var expectedEndTimeParameter = expectedEndTime != null ?
                new ObjectParameter("ExpectedEndTime", expectedEndTime) :
                new ObjectParameter("ExpectedEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeForService_Old_Result>("[Aircall_DBEntities1].[GetEmployeeForService_Old](@ZipCode, @ServiceId, @PlanTypeId, @ExpectedStartDate, @ExpectedEndDate, @ExpectedStartTime, @ExpectedEndTime)", zipCodeParameter, serviceIdParameter, planTypeIdParameter, expectedStartDateParameter, expectedEndDateParameter, expectedStartTimeParameter, expectedEndTimeParameter);
        }
    
        public virtual int insertstriptlog(string stripestring)
        {
            var stripestringParameter = stripestring != null ?
                new ObjectParameter("stripestring", stripestring) :
                new ObjectParameter("stripestring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertstriptlog", stripestringParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "Split")]
        public virtual IQueryable<string> Split(string rowData, string splitOn)
        {
            var rowDataParameter = rowData != null ?
                new ObjectParameter("RowData", rowData) :
                new ObjectParameter("RowData", typeof(string));
    
            var splitOnParameter = splitOn != null ?
                new ObjectParameter("SplitOn", splitOn) :
                new ObjectParameter("SplitOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Aircall_DBEntities1].[Split](@RowData, @SplitOn)", rowDataParameter, splitOnParameter);
        }
    
        public virtual ObjectResult<string> TableNameSelect(string tableCatalog)
        {
            var tableCatalogParameter = tableCatalog != null ?
                new ObjectParameter("TableCatalog", tableCatalog) :
                new ObjectParameter("TableCatalog", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TableNameSelect", tableCatalogParameter);
        }
    
        public virtual int uspa_AddBlocks_CMSPage(Nullable<int> cMSPageId, Nullable<int> blockId)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            var blockIdParameter = blockId.HasValue ?
                new ObjectParameter("BlockId", blockId) :
                new ObjectParameter("BlockId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_AddBlocks_CMSPage", cMSPageIdParameter, blockIdParameter);
        }
    
        public virtual int uspa_Admin_BillingHistoryReportChart(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_BillingHistoryReportChart", fromDateParameter, toDateParameter, clientNameParameter);
        }
    
        public virtual int uspa_Admin_BillingHistoryReportTable(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_BillingHistoryReportTable", fromDateParameter, toDateParameter, clientNameParameter);
        }
    
        public virtual ObjectResult<uspa_Admin_GetAllUnitCountAgeWise_Result> uspa_Admin_GetAllUnitCountAgeWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Admin_GetAllUnitCountAgeWise_Result>("uspa_Admin_GetAllUnitCountAgeWise");
        }
    
        public virtual int uspa_Admin_GetClientListByParner(string partner, Nullable<int> month, Nullable<int> year)
        {
            var partnerParameter = partner != null ?
                new ObjectParameter("Partner", partner) :
                new ObjectParameter("Partner", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_GetClientListByParner", partnerParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<uspa_Admin_GetDashboardCount_Result> uspa_Admin_GetDashboardCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Admin_GetDashboardCount_Result>("uspa_Admin_GetDashboardCount");
        }
    
        public virtual int uspa_Admin_GetMonthlySaleReport(string client, Nullable<int> month, Nullable<int> year, Nullable<int> planTypeId)
        {
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_GetMonthlySaleReport", clientParameter, monthParameter, yearParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_Admin_GetPartnerSaleReportChart(string partner, Nullable<int> month, Nullable<int> year)
        {
            var partnerParameter = partner != null ?
                new ObjectParameter("Partner", partner) :
                new ObjectParameter("Partner", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_GetPartnerSaleReportChart", partnerParameter, monthParameter, yearParameter);
        }
    
        public virtual int uspa_Admin_GetPartnerSaleReportChartById(Nullable<int> partnerId, Nullable<int> month, Nullable<int> year)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Admin_GetPartnerSaleReportChartById", partnerIdParameter, monthParameter, yearParameter);
        }
    
        public virtual int uspa_AreaMaster_DeleteByID(Nullable<int> areaId, Nullable<int> deletedBy, Nullable<int> deletedByType)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_AreaMaster_DeleteByID", areaIdParameter, deletedByParameter, deletedByTypeParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_GetAllAreasByClientAddressId_Result> uspa_AreaMaster_GetAllAreasByClientAddressId(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_GetAllAreasByClientAddressId_Result>("uspa_AreaMaster_GetAllAreasByClientAddressId", addressIdParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_GetByAreaName_Result> uspa_AreaMaster_GetByAreaName(string areaName)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_GetByAreaName_Result>("uspa_AreaMaster_GetByAreaName", areaNameParameter);
        }
    
        public virtual int uspa_AreaMaster_Insert(string name, Nullable<int> stateId, Nullable<int> citiesId, Nullable<bool> status, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_AreaMaster_Insert", nameParameter, stateIdParameter, citiesIdParameter, statusParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_SearchByAreaName_Result> uspa_AreaMaster_SearchByAreaName(string areaName)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_SearchByAreaName_Result>("uspa_AreaMaster_SearchByAreaName", areaNameParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_SelectAll_Result> uspa_AreaMaster_SelectAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_SelectAll_Result>("uspa_AreaMaster_SelectAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_SelectAllByStateCityZipName_Result> uspa_AreaMaster_SelectAllByStateCityZipName(string areaName, Nullable<int> stateId, Nullable<int> cityId, string zipCode, string sortField, string sortDirection)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_SelectAllByStateCityZipName_Result>("uspa_AreaMaster_SelectAllByStateCityZipName", areaNameParameter, stateIdParameter, cityIdParameter, zipCodeParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_AreaMaster_SelectByID_Result> uspa_AreaMaster_SelectByID(Nullable<int> areaId, Nullable<bool> isActive)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AreaMaster_SelectByID_Result>("uspa_AreaMaster_SelectByID", areaIdParameter, isActiveParameter);
        }
    
        public virtual int uspa_AreaMaster_SetStatus(Nullable<bool> isActive, Nullable<int> areaId, Nullable<int> updatedBy, Nullable<int> updatedByType)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_AreaMaster_SetStatus", isActiveParameter, areaIdParameter, updatedByParameter, updatedByTypeParameter);
        }
    
        public virtual int uspa_AreaMaster_Update(Nullable<int> id, string name, Nullable<int> stateId, Nullable<int> citiesId, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_AreaMaster_Update", idParameter, nameParameter, stateIdParameter, citiesIdParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ArrangePartAndScheduleService_Result> uspa_ArrangePartAndScheduleService(Nullable<int> employeePartRequestId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ArrangePartAndScheduleService_Result>("uspa_ArrangePartAndScheduleService", employeePartRequestIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_AssignEmployeeFromAdmin_Result> uspa_AssignEmployeeFromAdmin(Nullable<long> serviceId, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string startTime, string endTime)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_AssignEmployeeFromAdmin_Result>("uspa_AssignEmployeeFromAdmin", serviceIdParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int uspa_BillingHistory_AddClientUnitBilling(Nullable<int> clientId, string clientUnitIds, Nullable<int> clientUnitSubscriptionId, Nullable<int> paidMonths, Nullable<int> orderId, string packageName, string billingType, Nullable<decimal> originalAmount, Nullable<decimal> purchasedAmount, Nullable<bool> isSpecialOffer, Nullable<bool> isPaid, string transactionId, Nullable<System.DateTime> transactionDate, Nullable<int> addedBy, Nullable<System.DateTime> addedDate, Nullable<int> cardId, string checkNumbers, string checkAmounts, string failDesc, string pO, string transactionStatus, string responseReasonDescription, Nullable<int> responseCode)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var clientUnitIdsParameter = clientUnitIds != null ?
                new ObjectParameter("ClientUnitIds", clientUnitIds) :
                new ObjectParameter("ClientUnitIds", typeof(string));
    
            var clientUnitSubscriptionIdParameter = clientUnitSubscriptionId.HasValue ?
                new ObjectParameter("ClientUnitSubscriptionId", clientUnitSubscriptionId) :
                new ObjectParameter("ClientUnitSubscriptionId", typeof(int));
    
            var paidMonthsParameter = paidMonths.HasValue ?
                new ObjectParameter("PaidMonths", paidMonths) :
                new ObjectParameter("PaidMonths", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var purchasedAmountParameter = purchasedAmount.HasValue ?
                new ObjectParameter("PurchasedAmount", purchasedAmount) :
                new ObjectParameter("PurchasedAmount", typeof(decimal));
    
            var isSpecialOfferParameter = isSpecialOffer.HasValue ?
                new ObjectParameter("IsSpecialOffer", isSpecialOffer) :
                new ObjectParameter("IsSpecialOffer", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var checkNumbersParameter = checkNumbers != null ?
                new ObjectParameter("CheckNumbers", checkNumbers) :
                new ObjectParameter("CheckNumbers", typeof(string));
    
            var checkAmountsParameter = checkAmounts != null ?
                new ObjectParameter("CheckAmounts", checkAmounts) :
                new ObjectParameter("CheckAmounts", typeof(string));
    
            var failDescParameter = failDesc != null ?
                new ObjectParameter("FailDesc", failDesc) :
                new ObjectParameter("FailDesc", typeof(string));
    
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var transactionStatusParameter = transactionStatus != null ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(string));
    
            var responseReasonDescriptionParameter = responseReasonDescription != null ?
                new ObjectParameter("ResponseReasonDescription", responseReasonDescription) :
                new ObjectParameter("ResponseReasonDescription", typeof(string));
    
            var responseCodeParameter = responseCode.HasValue ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_AddClientUnitBilling", clientIdParameter, clientUnitIdsParameter, clientUnitSubscriptionIdParameter, paidMonthsParameter, orderIdParameter, packageNameParameter, billingTypeParameter, originalAmountParameter, purchasedAmountParameter, isSpecialOfferParameter, isPaidParameter, transactionIdParameter, transactionDateParameter, addedByParameter, addedDateParameter, cardIdParameter, checkNumbersParameter, checkAmountsParameter, failDescParameter, pOParameter, transactionStatusParameter, responseReasonDescriptionParameter, responseCodeParameter);
        }
    
        public virtual int uspa_BillingHistory_DeleteByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_DeleteByID", idParameter);
        }
    
        public virtual ObjectResult<uspa_BillingHistory_GetAll_Result> uspa_BillingHistory_GetAll(string clientName, string startDate, string endDate, string status)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_BillingHistory_GetAll_Result>("uspa_BillingHistory_GetAll", clientNameParameter, startDateParameter, endDateParameter, statusParameter);
        }
    
        public virtual int uspa_BillingHistory_Insert(Nullable<int> clientId, Nullable<int> unitId, Nullable<int> orderId, string serviceCaseNumber, string packageName, string billingType, Nullable<decimal> originalAmount, Nullable<decimal> purchasedAmount, Nullable<decimal> partnerSalesCommisionAmount, string billingFirstName, string billingLastName, string company, string billingAddress, Nullable<int> billingCity, Nullable<int> billingState, string billingZipcode, string billingPhoneNumber, string billingMobileNumber, Nullable<bool> isSpecialOffer, string transactionId, Nullable<System.DateTime> transactionDate, Nullable<int> addedBy, Nullable<System.DateTime> addedDate, Nullable<bool> isPaid, string failcode, string faildesc, Nullable<System.DateTime> stripeNextPaymentDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var serviceCaseNumberParameter = serviceCaseNumber != null ?
                new ObjectParameter("ServiceCaseNumber", serviceCaseNumber) :
                new ObjectParameter("ServiceCaseNumber", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var purchasedAmountParameter = purchasedAmount.HasValue ?
                new ObjectParameter("PurchasedAmount", purchasedAmount) :
                new ObjectParameter("PurchasedAmount", typeof(decimal));
    
            var partnerSalesCommisionAmountParameter = partnerSalesCommisionAmount.HasValue ?
                new ObjectParameter("PartnerSalesCommisionAmount", partnerSalesCommisionAmount) :
                new ObjectParameter("PartnerSalesCommisionAmount", typeof(decimal));
    
            var billingFirstNameParameter = billingFirstName != null ?
                new ObjectParameter("BillingFirstName", billingFirstName) :
                new ObjectParameter("BillingFirstName", typeof(string));
    
            var billingLastNameParameter = billingLastName != null ?
                new ObjectParameter("BillingLastName", billingLastName) :
                new ObjectParameter("BillingLastName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var billingCityParameter = billingCity.HasValue ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(int));
    
            var billingStateParameter = billingState.HasValue ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(int));
    
            var billingZipcodeParameter = billingZipcode != null ?
                new ObjectParameter("BillingZipcode", billingZipcode) :
                new ObjectParameter("BillingZipcode", typeof(string));
    
            var billingPhoneNumberParameter = billingPhoneNumber != null ?
                new ObjectParameter("BillingPhoneNumber", billingPhoneNumber) :
                new ObjectParameter("BillingPhoneNumber", typeof(string));
    
            var billingMobileNumberParameter = billingMobileNumber != null ?
                new ObjectParameter("BillingMobileNumber", billingMobileNumber) :
                new ObjectParameter("BillingMobileNumber", typeof(string));
    
            var isSpecialOfferParameter = isSpecialOffer.HasValue ?
                new ObjectParameter("IsSpecialOffer", isSpecialOffer) :
                new ObjectParameter("IsSpecialOffer", typeof(bool));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var failcodeParameter = failcode != null ?
                new ObjectParameter("failcode", failcode) :
                new ObjectParameter("failcode", typeof(string));
    
            var faildescParameter = faildesc != null ?
                new ObjectParameter("faildesc", faildesc) :
                new ObjectParameter("faildesc", typeof(string));
    
            var stripeNextPaymentDateParameter = stripeNextPaymentDate.HasValue ?
                new ObjectParameter("StripeNextPaymentDate", stripeNextPaymentDate) :
                new ObjectParameter("StripeNextPaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_Insert", clientIdParameter, unitIdParameter, orderIdParameter, serviceCaseNumberParameter, packageNameParameter, billingTypeParameter, originalAmountParameter, purchasedAmountParameter, partnerSalesCommisionAmountParameter, billingFirstNameParameter, billingLastNameParameter, companyParameter, billingAddressParameter, billingCityParameter, billingStateParameter, billingZipcodeParameter, billingPhoneNumberParameter, billingMobileNumberParameter, isSpecialOfferParameter, transactionIdParameter, transactionDateParameter, addedByParameter, addedDateParameter, isPaidParameter, failcodeParameter, faildescParameter, stripeNextPaymentDateParameter);
        }
    
        public virtual int uspa_BillingHistory_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_SelectAll");
        }
    
        public virtual int uspa_BillingHistory_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_SelectByID", idParameter);
        }
    
        public virtual int uspa_BillingHistory_Update(Nullable<int> id, Nullable<int> clientId, Nullable<int> unitId, Nullable<int> orderId, string serviceCaseNumber, string packageName, string billingType, Nullable<decimal> originalAmount, Nullable<decimal> purchasedAmount, Nullable<decimal> partnerSalesCommisionAmount, string billingAddress, Nullable<int> billingCity, Nullable<int> billingState, string billingZipcode, string billingPhoneNumber, string billingMobileNumber, Nullable<bool> isSpecialOffer, string transactionId, Nullable<System.DateTime> transactionDate, Nullable<bool> isDeleted, Nullable<int> addedBy, Nullable<System.DateTime> addedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var serviceCaseNumberParameter = serviceCaseNumber != null ?
                new ObjectParameter("ServiceCaseNumber", serviceCaseNumber) :
                new ObjectParameter("ServiceCaseNumber", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var purchasedAmountParameter = purchasedAmount.HasValue ?
                new ObjectParameter("PurchasedAmount", purchasedAmount) :
                new ObjectParameter("PurchasedAmount", typeof(decimal));
    
            var partnerSalesCommisionAmountParameter = partnerSalesCommisionAmount.HasValue ?
                new ObjectParameter("PartnerSalesCommisionAmount", partnerSalesCommisionAmount) :
                new ObjectParameter("PartnerSalesCommisionAmount", typeof(decimal));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var billingCityParameter = billingCity.HasValue ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(int));
    
            var billingStateParameter = billingState.HasValue ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(int));
    
            var billingZipcodeParameter = billingZipcode != null ?
                new ObjectParameter("BillingZipcode", billingZipcode) :
                new ObjectParameter("BillingZipcode", typeof(string));
    
            var billingPhoneNumberParameter = billingPhoneNumber != null ?
                new ObjectParameter("BillingPhoneNumber", billingPhoneNumber) :
                new ObjectParameter("BillingPhoneNumber", typeof(string));
    
            var billingMobileNumberParameter = billingMobileNumber != null ?
                new ObjectParameter("BillingMobileNumber", billingMobileNumber) :
                new ObjectParameter("BillingMobileNumber", typeof(string));
    
            var isSpecialOfferParameter = isSpecialOffer.HasValue ?
                new ObjectParameter("IsSpecialOffer", isSpecialOffer) :
                new ObjectParameter("IsSpecialOffer", typeof(bool));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_BillingHistory_Update", idParameter, clientIdParameter, unitIdParameter, orderIdParameter, serviceCaseNumberParameter, packageNameParameter, billingTypeParameter, originalAmountParameter, purchasedAmountParameter, partnerSalesCommisionAmountParameter, billingAddressParameter, billingCityParameter, billingStateParameter, billingZipcodeParameter, billingPhoneNumberParameter, billingMobileNumberParameter, isSpecialOfferParameter, transactionIdParameter, transactionDateParameter, isDeletedParameter, addedByParameter, addedDateParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int uspa_Block_Delete(Nullable<int> blockId)
        {
            var blockIdParameter = blockId.HasValue ?
                new ObjectParameter("BlockId", blockId) :
                new ObjectParameter("BlockId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Block_Delete", blockIdParameter);
        }
    
        public virtual ObjectResult<uspa_Block_GetById_Result> uspa_Block_GetById(Nullable<int> blockId)
        {
            var blockIdParameter = blockId.HasValue ?
                new ObjectParameter("BlockId", blockId) :
                new ObjectParameter("BlockId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Block_GetById_Result>("uspa_Block_GetById", blockIdParameter);
        }
    
        public virtual int uspa_Block_Insert(string blockTitle, string description, string position, Nullable<int> order, Nullable<bool> status, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var blockTitleParameter = blockTitle != null ?
                new ObjectParameter("BlockTitle", blockTitle) :
                new ObjectParameter("BlockTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Block_Insert", blockTitleParameter, descriptionParameter, positionParameter, orderParameter, statusParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_Block_SetStatus(Nullable<int> blockId, Nullable<bool> isActive)
        {
            var blockIdParameter = blockId.HasValue ?
                new ObjectParameter("BlockId", blockId) :
                new ObjectParameter("BlockId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Block_SetStatus", blockIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Blocks_GetByBlockName_Result> uspa_Blocks_GetByBlockName(string blockName)
        {
            var blockNameParameter = blockName != null ?
                new ObjectParameter("BlockName", blockName) :
                new ObjectParameter("BlockName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Blocks_GetByBlockName_Result>("uspa_Blocks_GetByBlockName", blockNameParameter);
        }
    
        public virtual ObjectResult<uspa_Blocks_SelectAll_Result> uspa_Blocks_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Blocks_SelectAll_Result>("uspa_Blocks_SelectAll");
        }
    
        public virtual int uspa_Blocks_UpdateById(Nullable<int> id, string blockTitle, string description, string position, Nullable<int> order, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var blockTitleParameter = blockTitle != null ?
                new ObjectParameter("BlockTitle", blockTitle) :
                new ObjectParameter("BlockTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Blocks_UpdateById", idParameter, blockTitleParameter, descriptionParameter, positionParameter, orderParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_AssignEmployeeToService_Result> uspa_Calendar_AssignEmployeeToService(Nullable<long> serviceId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string startTime, string endTime, Nullable<int> updatedBy, Nullable<int> updatedByType)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_AssignEmployeeToService_Result>("uspa_Calendar_AssignEmployeeToService", serviceIdParameter, employeeIdParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, updatedByParameter, updatedByTypeParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_AssignEmployeeToService_Old_Result> uspa_Calendar_AssignEmployeeToService_Old(Nullable<long> serviceId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string startTime, string endTime, Nullable<int> updatedBy, Nullable<int> updatedByType)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_AssignEmployeeToService_Old_Result>("uspa_Calendar_AssignEmployeeToService_Old", serviceIdParameter, employeeIdParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, updatedByParameter, updatedByTypeParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_GetCityWorkAreaEmployee_Result> uspa_Calendar_GetCityWorkAreaEmployee(Nullable<int> citiesId, Nullable<int> employeeId)
        {
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_GetCityWorkAreaEmployee_Result>("uspa_Calendar_GetCityWorkAreaEmployee", citiesIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_GetEmployeeSchedule_Result> uspa_Calendar_GetEmployeeSchedule(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_GetEmployeeSchedule_Result>("uspa_Calendar_GetEmployeeSchedule", employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_GetEmployeeSchedule_New_Result> uspa_Calendar_GetEmployeeSchedule_New(Nullable<int> employeeId, Nullable<int> cityId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_GetEmployeeSchedule_New_Result>("uspa_Calendar_GetEmployeeSchedule_New", employeeIdParameter, cityIdParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_GetMapMarker_Result> uspa_Calendar_GetMapMarker(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_GetMapMarker_Result>("uspa_Calendar_GetMapMarker", employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_Calendar_GetWorkAreaEmployee_Result> uspa_Calendar_GetWorkAreaEmployee(Nullable<int> areaId, Nullable<int> employeeId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Calendar_GetWorkAreaEmployee_Result>("uspa_Calendar_GetWorkAreaEmployee", areaIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_CardExpirationScheduler_Result> uspa_CardExpirationScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CardExpirationScheduler_Result>("uspa_CardExpirationScheduler");
        }
    
        public virtual int uspa_CheckForRenewUnitPlan(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CheckForRenewUnitPlan", unitIdParameter);
        }
    
        public virtual ObjectResult<uspa_CheckInStockAndScheduleService_old_Result> uspa_CheckInStockAndScheduleService_old(Nullable<int> employeePartRequestId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CheckInStockAndScheduleService_old_Result>("uspa_CheckInStockAndScheduleService_old", employeePartRequestIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_CheckInStockAndScheduleServiceForApp(Nullable<int> employeePartRequestId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CheckInStockAndScheduleServiceForApp", employeePartRequestIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspa_CheckServiceAlreadyAddedForClientAddress(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspa_CheckServiceAlreadyAddedForClientAddress", clientIdParameter, addressIdParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_Cities_DeleteByID(Nullable<int> cityId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Cities_DeleteByID", cityIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Cities_GetByName_Result> uspa_Cities_GetByName(Nullable<int> stateId, Nullable<int> cityId, string cityName)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Cities_GetByName_Result>("uspa_Cities_GetByName", stateIdParameter, cityIdParameter, cityNameParameter);
        }
    
        public virtual ObjectResult<uspa_Cities_GetByStateId_Result> uspa_Cities_GetByStateId(Nullable<int> stateId, Nullable<bool> includeInActive)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var includeInActiveParameter = includeInActive.HasValue ?
                new ObjectParameter("IncludeInActive", includeInActive) :
                new ObjectParameter("IncludeInActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Cities_GetByStateId_Result>("uspa_Cities_GetByStateId", stateIdParameter, includeInActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Cities_GetByStateIdStatus_Result> uspa_Cities_GetByStateIdStatus(Nullable<int> stateId, Nullable<bool> isActive, string city, string sortField, string sortDirection)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Cities_GetByStateIdStatus_Result>("uspa_Cities_GetByStateIdStatus", stateIdParameter, isActiveParameter, cityParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual int uspa_Cities_Insert(Nullable<int> stateId, string name, Nullable<bool> status, Nullable<bool> pendingInactive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var pendingInactiveParameter = pendingInactive.HasValue ?
                new ObjectParameter("PendingInactive", pendingInactive) :
                new ObjectParameter("PendingInactive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Cities_Insert", stateIdParameter, nameParameter, statusParameter, pendingInactiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Cities_SelectAll_Result> uspa_Cities_SelectAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Cities_SelectAll_Result>("uspa_Cities_SelectAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Cities_SelectByID_Result> uspa_Cities_SelectByID(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Cities_SelectByID_Result>("uspa_Cities_SelectByID", cityIdParameter);
        }
    
        public virtual int uspa_Cities_SetStatus(Nullable<bool> isActive, Nullable<int> cityId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Cities_SetStatus", isActiveParameter, cityIdParameter);
        }
    
        public virtual int uspa_Cities_Update(Nullable<int> id, Nullable<int> stateId, string name, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Cities_Update", idParameter, stateIdParameter, nameParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Client_AssignAffiliate(Nullable<int> clientId, Nullable<int> affiliateId, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_AssignAffiliate", clientIdParameter, affiliateIdParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_client_basedOnPartner_Result> uspa_client_basedOnPartner(Nullable<int> partnerId)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_client_basedOnPartner_Result>("uspa_client_basedOnPartner", partnerIdParameter);
        }
    
        public virtual ObjectResult<uspa_Client_CheckAllowToDelete_Result> uspa_Client_CheckAllowToDelete(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_CheckAllowToDelete_Result>("uspa_Client_CheckAllowToDelete", clientIdParameter);
        }
    
        public virtual int uspa_Client_DeleteByID(Nullable<int> clientId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_DeleteByID", clientIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Client_GetByClientName_Result> uspa_Client_GetByClientName(string clientName)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_GetByClientName_Result>("uspa_Client_GetByClientName", clientNameParameter);
        }
    
        public virtual ObjectResult<uspa_Client_GetByEmail_Result> uspa_Client_GetByEmail(Nullable<int> clientId, string email)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_GetByEmail_Result>("uspa_Client_GetByEmail", clientIdParameter, emailParameter);
        }
    
        public virtual ObjectResult<uspa_Client_GetByPartnerId_Result> uspa_Client_GetByPartnerId(Nullable<int> partnerId)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_GetByPartnerId_Result>("uspa_Client_GetByPartnerId", partnerIdParameter);
        }
    
        public virtual int uspa_Client_Insert(Nullable<int> roleId, string firstName, string lastName, string email, string password, string image, string phoneNumber, string mobileNumber, string officeNumber, string homeNumber, string company, Nullable<int> affiliateId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, Nullable<bool> isActive, string customerProfileId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var officeNumberParameter = officeNumber != null ?
                new ObjectParameter("OfficeNumber", officeNumber) :
                new ObjectParameter("OfficeNumber", typeof(string));
    
            var homeNumberParameter = homeNumber != null ?
                new ObjectParameter("HomeNumber", homeNumber) :
                new ObjectParameter("HomeNumber", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var customerProfileIdParameter = customerProfileId != null ?
                new ObjectParameter("CustomerProfileId", customerProfileId) :
                new ObjectParameter("CustomerProfileId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_Insert", roleIdParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, imageParameter, phoneNumberParameter, mobileNumberParameter, officeNumberParameter, homeNumberParameter, companyParameter, affiliateIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter, isActiveParameter, customerProfileIdParameter);
        }
    
        public virtual int uspa_Client_RemoveAffiliate(Nullable<int> clientId, Nullable<int> affilateDeletedBy, Nullable<System.DateTime> affilateDeletedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var affilateDeletedByParameter = affilateDeletedBy.HasValue ?
                new ObjectParameter("AffilateDeletedBy", affilateDeletedBy) :
                new ObjectParameter("AffilateDeletedBy", typeof(int));
    
            var affilateDeletedDateParameter = affilateDeletedDate.HasValue ?
                new ObjectParameter("AffilateDeletedDate", affilateDeletedDate) :
                new ObjectParameter("AffilateDeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_RemoveAffiliate", clientIdParameter, affilateDeletedByParameter, affilateDeletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Client_SelectAll_Result> uspa_Client_SelectAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_SelectAll_Result>("uspa_Client_SelectAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Client_SelectAllByName_Result> uspa_Client_SelectAllByName(string clientName, string sortField, string sortDirection)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_SelectAllByName_Result>("uspa_Client_SelectAllByName", clientNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Client_SelectByID_Result> uspa_Client_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Client_SelectByID_Result>("uspa_Client_SelectByID", idParameter);
        }
    
        public virtual int uspa_Client_SetStatus(Nullable<bool> isActive, Nullable<int> clientId, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_SetStatus", isActiveParameter, clientIdParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Client_Update(Nullable<int> id, string firstName, string lastName, string email, string password, string image, string phoneNumber, string mobileNumber, string officeNumber, string homeNumber, string company, Nullable<int> affiliateId, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var officeNumberParameter = officeNumber != null ?
                new ObjectParameter("OfficeNumber", officeNumber) :
                new ObjectParameter("OfficeNumber", typeof(string));
    
            var homeNumberParameter = homeNumber != null ?
                new ObjectParameter("HomeNumber", homeNumber) :
                new ObjectParameter("HomeNumber", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Client_Update", idParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, imageParameter, phoneNumberParameter, mobileNumberParameter, officeNumberParameter, homeNumberParameter, companyParameter, affiliateIdParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientAddress_GetByClientId_Result> uspa_ClientAddress_GetByClientId(Nullable<int> clientId, Nullable<bool> includeInactive)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("IncludeInactive", includeInactive) :
                new ObjectParameter("IncludeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientAddress_GetByClientId_Result>("uspa_ClientAddress_GetByClientId", clientIdParameter, includeInactiveParameter);
        }
    
        public virtual ObjectResult<uspa_ClientAddress_GetById_Result> uspa_ClientAddress_GetById(Nullable<int> addressId, Nullable<int> clientId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientAddress_GetById_Result>("uspa_ClientAddress_GetById", addressIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientAddress_GetDefaultAddressByClientId_Result> uspa_ClientAddress_GetDefaultAddressByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientAddress_GetDefaultAddressByClientId_Result>("uspa_ClientAddress_GetDefaultAddressByClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientAddress_Insert(Nullable<int> clientId, string address, Nullable<int> state, Nullable<int> city, string zipCode, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<bool> isDefaultAddress, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, string customerAddressId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var isDefaultAddressParameter = isDefaultAddress.HasValue ?
                new ObjectParameter("IsDefaultAddress", isDefaultAddress) :
                new ObjectParameter("IsDefaultAddress", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var customerAddressIdParameter = customerAddressId != null ?
                new ObjectParameter("CustomerAddressId", customerAddressId) :
                new ObjectParameter("CustomerAddressId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientAddress_Insert", clientIdParameter, addressParameter, stateParameter, cityParameter, zipCodeParameter, latitudeParameter, longitudeParameter, isDefaultAddressParameter, addedByParameter, addedByTypeParameter, addedDateParameter, customerAddressIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPaymentMethod_GetByClientId_Result> uspa_ClientPaymentMethod_GetByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPaymentMethod_GetByClientId_Result>("uspa_ClientPaymentMethod_GetByClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientPaymentMethod_GetByStripeCardId(string stripeCardId)
        {
            var stripeCardIdParameter = stripeCardId != null ?
                new ObjectParameter("StripeCardId", stripeCardId) :
                new ObjectParameter("StripeCardId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPaymentMethod_GetByStripeCardId", stripeCardIdParameter);
        }
    
        public virtual int uspa_ClientPaymentMethod_Insert(Nullable<int> clientId, string cardType, string nameOnCard, string cardNumber, Nullable<short> expiryMonth, Nullable<int> expiryYear, Nullable<bool> isDefaultPayment, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, string customerPaymentProfileId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryMonthParameter = expiryMonth.HasValue ?
                new ObjectParameter("ExpiryMonth", expiryMonth) :
                new ObjectParameter("ExpiryMonth", typeof(short));
    
            var expiryYearParameter = expiryYear.HasValue ?
                new ObjectParameter("ExpiryYear", expiryYear) :
                new ObjectParameter("ExpiryYear", typeof(int));
    
            var isDefaultPaymentParameter = isDefaultPayment.HasValue ?
                new ObjectParameter("IsDefaultPayment", isDefaultPayment) :
                new ObjectParameter("IsDefaultPayment", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var customerPaymentProfileIdParameter = customerPaymentProfileId != null ?
                new ObjectParameter("CustomerPaymentProfileId", customerPaymentProfileId) :
                new ObjectParameter("CustomerPaymentProfileId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPaymentMethod_Insert", clientIdParameter, cardTypeParameter, nameOnCardParameter, cardNumberParameter, expiryMonthParameter, expiryYearParameter, isDefaultPaymentParameter, addedByParameter, addedByTypeParameter, addedDateParameter, customerPaymentProfileIdParameter);
        }
    
        public virtual int uspa_ClientPaymentMethod_UpdateIsExpireationFlag(Nullable<int> cardId)
        {
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPaymentMethod_UpdateIsExpireationFlag", cardIdParameter);
        }
    
        public virtual int uspa_ClientPorta_Services_GetCompletedServiceDetails(Nullable<int> serviceId, Nullable<int> clientId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPorta_Services_GetCompletedServiceDetails", serviceIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ClientPortal_Client_ChangePassword(Nullable<int> clientId, string oldPassword, string newPassword)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ClientPortal_Client_ChangePassword", clientIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Client_CheckForForgotPassword_Result> uspa_ClientPortal_Client_CheckForForgotPassword(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Client_CheckForForgotPassword_Result>("uspa_ClientPortal_Client_CheckForForgotPassword", emailParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Client_CheckResetPasswordLinkExpiration_Result> uspa_ClientPortal_Client_CheckResetPasswordLinkExpiration(string passwordUrl)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Client_CheckResetPasswordLinkExpiration_Result>("uspa_ClientPortal_Client_CheckResetPasswordLinkExpiration", passwordUrlParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Client_Login_Result> uspa_ClientPortal_Client_Login(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Client_Login_Result>("uspa_ClientPortal_Client_Login", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ClientPortal_Client_ResetPassword(string email, string newPassword)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ClientPortal_Client_ResetPassword", emailParameter, newPasswordParameter);
        }
    
        public virtual int uspa_ClientPortal_Client_UpdateContactInfo(Nullable<int> clientId, string mobileNumber, string officeNumber, string homeNumber, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var officeNumberParameter = officeNumber != null ?
                new ObjectParameter("OfficeNumber", officeNumber) :
                new ObjectParameter("OfficeNumber", typeof(string));
    
            var homeNumberParameter = homeNumber != null ?
                new ObjectParameter("HomeNumber", homeNumber) :
                new ObjectParameter("HomeNumber", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_Client_UpdateContactInfo", clientIdParameter, mobileNumberParameter, officeNumberParameter, homeNumberParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_Client_UpdateProfile(Nullable<int> clientId, string fName, string lName, string image, string company, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_Client_UpdateProfile", clientIdParameter, fNameParameter, lNameParameter, imageParameter, companyParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientAddress_Delete(Nullable<int> id, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientAddress_Delete", idParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientAddress_Update(Nullable<int> id, Nullable<int> clientId, string address, Nullable<int> state, Nullable<int> city, string zipCode, Nullable<bool> isDefaultAddress, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var isDefaultAddressParameter = isDefaultAddress.HasValue ?
                new ObjectParameter("IsDefaultAddress", isDefaultAddress) :
                new ObjectParameter("IsDefaultAddress", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientAddress_Update", idParameter, clientIdParameter, addressParameter, stateParameter, cityParameter, zipCodeParameter, isDefaultAddressParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_ClientPaymentMethod_GetById_Result> uspa_ClientPortal_ClientPaymentMethod_GetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_ClientPaymentMethod_GetById_Result>("uspa_ClientPortal_ClientPaymentMethod_GetById", idParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientPaymentMethod_Update(Nullable<int> id, Nullable<int> clientId, string cardType, string nameOnCard, Nullable<short> expiryMonth, Nullable<int> expiryYear, Nullable<bool> isDefaultPayment, string stripeCardId, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var expiryMonthParameter = expiryMonth.HasValue ?
                new ObjectParameter("ExpiryMonth", expiryMonth) :
                new ObjectParameter("ExpiryMonth", typeof(short));
    
            var expiryYearParameter = expiryYear.HasValue ?
                new ObjectParameter("ExpiryYear", expiryYear) :
                new ObjectParameter("ExpiryYear", typeof(int));
    
            var isDefaultPaymentParameter = isDefaultPayment.HasValue ?
                new ObjectParameter("IsDefaultPayment", isDefaultPayment) :
                new ObjectParameter("IsDefaultPayment", typeof(bool));
    
            var stripeCardIdParameter = stripeCardId != null ?
                new ObjectParameter("StripeCardId", stripeCardId) :
                new ObjectParameter("StripeCardId", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientPaymentMethod_Update", idParameter, clientIdParameter, cardTypeParameter, nameOnCardParameter, expiryMonthParameter, expiryYearParameter, isDefaultPaymentParameter, stripeCardIdParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_ClientUnit_Dashboard_Result> uspa_ClientPortal_ClientUnit_Dashboard(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_ClientUnit_Dashboard_Result>("uspa_ClientPortal_ClientUnit_Dashboard", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_ClientUnit_GetById_Result> uspa_ClientPortal_ClientUnit_GetById(Nullable<int> clientUnitId, Nullable<int> clientId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_ClientUnit_GetById_Result>("uspa_ClientPortal_ClientUnit_GetById", clientUnitIdParameter, clientIdParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientUnit_UpdatePaymentStatus(Nullable<int> id, string paymentStatus, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate, string stripeSubscriptionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var stripeSubscriptionIdParameter = stripeSubscriptionId != null ?
                new ObjectParameter("StripeSubscriptionId", stripeSubscriptionId) :
                new ObjectParameter("StripeSubscriptionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientUnit_UpdatePaymentStatus", idParameter, paymentStatusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter, stripeSubscriptionIdParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientUnit_UpdateUnitName(Nullable<int> id, string unitName, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientUnit_UpdateUnitName", idParameter, unitNameParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_ClientUnitParts_Insert(Nullable<int> unitId, string splitType, string modelNumber, string serialNumber, string manufactureBrand, Nullable<System.DateTime> manufactureDate, string unitTon, Nullable<int> thermostat, Nullable<int> refrigerantType, string electricalService, string maxBreaker, Nullable<int> breaker, Nullable<int> compressor, Nullable<int> capacitor, Nullable<int> contactor, Nullable<int> filterdryer, Nullable<int> defrostboard, Nullable<int> relay, Nullable<int> tXVValve, Nullable<int> reversingValve, Nullable<int> blowerMotor, Nullable<int> condensingfanmotor, Nullable<int> inducerdraftmotor, Nullable<int> transformer, Nullable<int> controlboard, Nullable<int> limitswitch, Nullable<int> ignitor, Nullable<int> gasvalve, Nullable<int> pressureswitch, Nullable<int> flamesensor, Nullable<int> rolloutsensor, Nullable<int> doorswitch, Nullable<int> ignitioncontrolboard, Nullable<int> coil, Nullable<int> misc)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manufactureBrandParameter = manufactureBrand != null ?
                new ObjectParameter("ManufactureBrand", manufactureBrand) :
                new ObjectParameter("ManufactureBrand", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var unitTonParameter = unitTon != null ?
                new ObjectParameter("UnitTon", unitTon) :
                new ObjectParameter("UnitTon", typeof(string));
    
            var thermostatParameter = thermostat.HasValue ?
                new ObjectParameter("Thermostat", thermostat) :
                new ObjectParameter("Thermostat", typeof(int));
    
            var refrigerantTypeParameter = refrigerantType.HasValue ?
                new ObjectParameter("RefrigerantType", refrigerantType) :
                new ObjectParameter("RefrigerantType", typeof(int));
    
            var electricalServiceParameter = electricalService != null ?
                new ObjectParameter("ElectricalService", electricalService) :
                new ObjectParameter("ElectricalService", typeof(string));
    
            var maxBreakerParameter = maxBreaker != null ?
                new ObjectParameter("MaxBreaker", maxBreaker) :
                new ObjectParameter("MaxBreaker", typeof(string));
    
            var breakerParameter = breaker.HasValue ?
                new ObjectParameter("Breaker", breaker) :
                new ObjectParameter("Breaker", typeof(int));
    
            var compressorParameter = compressor.HasValue ?
                new ObjectParameter("Compressor", compressor) :
                new ObjectParameter("Compressor", typeof(int));
    
            var capacitorParameter = capacitor.HasValue ?
                new ObjectParameter("Capacitor", capacitor) :
                new ObjectParameter("Capacitor", typeof(int));
    
            var contactorParameter = contactor.HasValue ?
                new ObjectParameter("Contactor", contactor) :
                new ObjectParameter("Contactor", typeof(int));
    
            var filterdryerParameter = filterdryer.HasValue ?
                new ObjectParameter("Filterdryer", filterdryer) :
                new ObjectParameter("Filterdryer", typeof(int));
    
            var defrostboardParameter = defrostboard.HasValue ?
                new ObjectParameter("Defrostboard", defrostboard) :
                new ObjectParameter("Defrostboard", typeof(int));
    
            var relayParameter = relay.HasValue ?
                new ObjectParameter("Relay", relay) :
                new ObjectParameter("Relay", typeof(int));
    
            var tXVValveParameter = tXVValve.HasValue ?
                new ObjectParameter("TXVValve", tXVValve) :
                new ObjectParameter("TXVValve", typeof(int));
    
            var reversingValveParameter = reversingValve.HasValue ?
                new ObjectParameter("ReversingValve", reversingValve) :
                new ObjectParameter("ReversingValve", typeof(int));
    
            var blowerMotorParameter = blowerMotor.HasValue ?
                new ObjectParameter("BlowerMotor", blowerMotor) :
                new ObjectParameter("BlowerMotor", typeof(int));
    
            var condensingfanmotorParameter = condensingfanmotor.HasValue ?
                new ObjectParameter("Condensingfanmotor", condensingfanmotor) :
                new ObjectParameter("Condensingfanmotor", typeof(int));
    
            var inducerdraftmotorParameter = inducerdraftmotor.HasValue ?
                new ObjectParameter("Inducerdraftmotor", inducerdraftmotor) :
                new ObjectParameter("Inducerdraftmotor", typeof(int));
    
            var transformerParameter = transformer.HasValue ?
                new ObjectParameter("Transformer", transformer) :
                new ObjectParameter("Transformer", typeof(int));
    
            var controlboardParameter = controlboard.HasValue ?
                new ObjectParameter("Controlboard", controlboard) :
                new ObjectParameter("Controlboard", typeof(int));
    
            var limitswitchParameter = limitswitch.HasValue ?
                new ObjectParameter("Limitswitch", limitswitch) :
                new ObjectParameter("Limitswitch", typeof(int));
    
            var ignitorParameter = ignitor.HasValue ?
                new ObjectParameter("Ignitor", ignitor) :
                new ObjectParameter("Ignitor", typeof(int));
    
            var gasvalveParameter = gasvalve.HasValue ?
                new ObjectParameter("Gasvalve", gasvalve) :
                new ObjectParameter("Gasvalve", typeof(int));
    
            var pressureswitchParameter = pressureswitch.HasValue ?
                new ObjectParameter("Pressureswitch", pressureswitch) :
                new ObjectParameter("Pressureswitch", typeof(int));
    
            var flamesensorParameter = flamesensor.HasValue ?
                new ObjectParameter("Flamesensor", flamesensor) :
                new ObjectParameter("Flamesensor", typeof(int));
    
            var rolloutsensorParameter = rolloutsensor.HasValue ?
                new ObjectParameter("Rolloutsensor", rolloutsensor) :
                new ObjectParameter("Rolloutsensor", typeof(int));
    
            var doorswitchParameter = doorswitch.HasValue ?
                new ObjectParameter("Doorswitch", doorswitch) :
                new ObjectParameter("Doorswitch", typeof(int));
    
            var ignitioncontrolboardParameter = ignitioncontrolboard.HasValue ?
                new ObjectParameter("Ignitioncontrolboard", ignitioncontrolboard) :
                new ObjectParameter("Ignitioncontrolboard", typeof(int));
    
            var coilParameter = coil.HasValue ?
                new ObjectParameter("Coil", coil) :
                new ObjectParameter("Coil", typeof(int));
    
            var miscParameter = misc.HasValue ?
                new ObjectParameter("Misc", misc) :
                new ObjectParameter("Misc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ClientUnitParts_Insert", unitIdParameter, splitTypeParameter, modelNumberParameter, serialNumberParameter, manufactureBrandParameter, manufactureDateParameter, unitTonParameter, thermostatParameter, refrigerantTypeParameter, electricalServiceParameter, maxBreakerParameter, breakerParameter, compressorParameter, capacitorParameter, contactorParameter, filterdryerParameter, defrostboardParameter, relayParameter, tXVValveParameter, reversingValveParameter, blowerMotorParameter, condensingfanmotorParameter, inducerdraftmotorParameter, transformerParameter, controlboardParameter, limitswitchParameter, ignitorParameter, gasvalveParameter, pressureswitchParameter, flamesensorParameter, rolloutsensorParameter, doorswitchParameter, ignitioncontrolboardParameter, coilParameter, miscParameter);
        }
    
        public virtual int uspa_ClientPortal_DeleteNotificationByCommonIDType(Nullable<long> commonId, string messageType)
        {
            var commonIdParameter = commonId.HasValue ?
                new ObjectParameter("CommonId", commonId) :
                new ObjectParameter("CommonId", typeof(long));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_DeleteNotificationByCommonIDType", commonIdParameter, messageTypeParameter);
        }
    
        public virtual int uspa_ClientPortal_DeleteNotificationByUserIDType(Nullable<long> userId, Nullable<int> userTypeId, string messageType, Nullable<long> commonId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var commonIdParameter = commonId.HasValue ?
                new ObjectParameter("CommonId", commonId) :
                new ObjectParameter("CommonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_DeleteNotificationByUserIDType", userIdParameter, userTypeIdParameter, messageTypeParameter, commonIdParameter);
        }
    
        public virtual int uspa_ClientPortal_DeleteNotificationByUserIDTypeForScheduler(Nullable<long> userId, Nullable<int> userTypeId, string messageType, Nullable<long> commonId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var commonIdParameter = commonId.HasValue ?
                new ObjectParameter("CommonId", commonId) :
                new ObjectParameter("CommonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_DeleteNotificationByUserIDTypeForScheduler", userIdParameter, userTypeIdParameter, messageTypeParameter, commonIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Employee_CheckResetPasswordLinkExpiration_Result> uspa_ClientPortal_Employee_CheckResetPasswordLinkExpiration(string passwordUrl)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Employee_CheckResetPasswordLinkExpiration_Result>("uspa_ClientPortal_Employee_CheckResetPasswordLinkExpiration", passwordUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ClientPortal_Employee_ResetPassword(string email, string newPassword)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ClientPortal_Employee_ResetPassword", emailParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<string> uspa_ClientPortal_GETAllScheduledDate(Nullable<long> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_ClientPortal_GETAllScheduledDate", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GETAllScheduledServiceByDATE_Result> uspa_ClientPortal_GETAllScheduledServiceByDATE(string sDate, Nullable<int> clientId)
        {
            var sDateParameter = sDate != null ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GETAllScheduledServiceByDATE_Result>("uspa_ClientPortal_GETAllScheduledServiceByDATE", sDateParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GETAllUnReadNOTIFICATION_Result> uspa_ClientPortal_GETAllUnReadNOTIFICATION(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GETAllUnReadNOTIFICATION_Result>("uspa_ClientPortal_GETAllUnReadNOTIFICATION", userIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetBillingHistoryByClientId_Result> uspa_ClientPortal_GetBillingHistoryByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetBillingHistoryByClientId_Result>("uspa_ClientPortal_GetBillingHistoryByClientId", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetBillingHistoryById_Result> uspa_ClientPortal_GetBillingHistoryById(Nullable<int> billingId)
        {
            var billingIdParameter = billingId.HasValue ?
                new ObjectParameter("BillingId", billingId) :
                new ObjectParameter("BillingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetBillingHistoryById_Result>("uspa_ClientPortal_GetBillingHistoryById", billingIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetNoShowDetail_Result> uspa_ClientPortal_GetNoShowDetail(Nullable<int> notificationId, Nullable<int> clientId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetNoShowDetail_Result>("uspa_ClientPortal_GetNoShowDetail", notificationIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetOrderItem_ByOrderId_Result> uspa_ClientPortal_GetOrderItem_ByOrderId(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetOrderItem_ByOrderId_Result>("uspa_ClientPortal_GetOrderItem_ByOrderId", orderIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_GetPlanCoverage_Result> uspa_ClientPortal_GetPlanCoverage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_GetPlanCoverage_Result>("uspa_ClientPortal_GetPlanCoverage");
        }
    
        public virtual int uspa_ClientPortal_GetRequestedServiceDetails(Nullable<long> serviceId, Nullable<int> clientId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_GetRequestedServiceDetails", serviceIdParameter, clientIdParameter);
        }
    
        public virtual int uspa_ClientPortal_PlanType_GetByAddressId(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_PlanType_GetByAddressId", addressIdParameter);
        }
    
        public virtual int uspa_ClientPortal_PlanType_GetByAddressIdForRechedule(Nullable<int> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_PlanType_GetByAddressIdForRechedule", addressIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_PlanType_GetTimeSlot_Result> uspa_ClientPortal_PlanType_GetTimeSlot(Nullable<int> planTypeId)
        {
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_PlanType_GetTimeSlot_Result>("uspa_ClientPortal_PlanType_GetTimeSlot", planTypeIdParameter);
        }
    
        public virtual int uspa_ClientPortal_RequestedServices_Delete(Nullable<long> requestedServiceId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_RequestedServices_Delete", requestedServiceIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_RequestedServices_GetAddressByClientId_Result> uspa_ClientPortal_RequestedServices_GetAddressByClientId(Nullable<long> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_RequestedServices_GetAddressByClientId_Result>("uspa_ClientPortal_RequestedServices_GetAddressByClientId", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_RequestedServices_GetByClientId_Result> uspa_ClientPortal_RequestedServices_GetByClientId(Nullable<long> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_RequestedServices_GetByClientId_Result>("uspa_ClientPortal_RequestedServices_GetByClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientPortal_RequestedServices_Insert(Nullable<int> clientId, Nullable<int> addressId, string purposeOfVisit, string serviceRequestedTime, Nullable<System.DateTime> serviceRequestedOn, string notes, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var serviceRequestedTimeParameter = serviceRequestedTime != null ?
                new ObjectParameter("ServiceRequestedTime", serviceRequestedTime) :
                new ObjectParameter("ServiceRequestedTime", typeof(string));
    
            var serviceRequestedOnParameter = serviceRequestedOn.HasValue ?
                new ObjectParameter("ServiceRequestedOn", serviceRequestedOn) :
                new ObjectParameter("ServiceRequestedOn", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_RequestedServices_Insert", clientIdParameter, addressIdParameter, purposeOfVisitParameter, serviceRequestedTimeParameter, serviceRequestedOnParameter, notesParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_RequestedServiceUnits_Insert(Nullable<long> serviceId, Nullable<int> unitId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_RequestedServiceUnits_Insert", serviceIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Services_GetByClientId_Result> uspa_ClientPortal_Services_GetByClientId(Nullable<int> clientId, string status)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Services_GetByClientId_Result>("uspa_ClientPortal_Services_GetByClientId", clientIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Services_GetService_Result> uspa_ClientPortal_Services_GetService(Nullable<int> clientId, string status, Nullable<int> selectRow)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var selectRowParameter = selectRow.HasValue ?
                new ObjectParameter("SelectRow", selectRow) :
                new ObjectParameter("SelectRow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Services_GetService_Result>("uspa_ClientPortal_Services_GetService", clientIdParameter, statusParameter, selectRowParameter);
        }
    
        public virtual ObjectResult<uspa_ClientPortal_Services_SelectByID_Result> uspa_ClientPortal_Services_SelectByID(Nullable<long> serviceId, Nullable<int> clientId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientPortal_Services_SelectByID_Result>("uspa_ClientPortal_Services_SelectByID", serviceIdParameter, clientIdParameter);
        }
    
        public virtual int uspa_ClientPortal_Services_SubmitRating(Nullable<long> serviceId, string review, Nullable<double> rate, Nullable<System.DateTime> reviewDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var reviewParameter = review != null ?
                new ObjectParameter("Review", review) :
                new ObjectParameter("Review", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var reviewDateParameter = reviewDate.HasValue ?
                new ObjectParameter("ReviewDate", reviewDate) :
                new ObjectParameter("ReviewDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_Services_SubmitRating", serviceIdParameter, reviewParameter, rateParameter, reviewDateParameter);
        }
    
        public virtual int uspa_ClientPortal_Services_UpdateStatus(Nullable<long> serviceId, string status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_Services_UpdateStatus", serviceIdParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientPortal_ServiceUnits_GetServiceUnits(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ServiceUnits_GetServiceUnits", serviceIdParameter);
        }
    
        public virtual int uspa_ClientPortal_UserNotification_DeleteById(Nullable<long> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_UserNotification_DeleteById", notificationIdParameter);
        }
    
        public virtual int uspa_ClientPortal_UserNotification_UpdateStatusByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_UserNotification_UpdateStatusByClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientPortal_UserNotification_UpdateStatusByClientIdNotificationIdMessageType(Nullable<int> clientId, Nullable<long> commonId, string messageType)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var commonIdParameter = commonId.HasValue ?
                new ObjectParameter("CommonId", commonId) :
                new ObjectParameter("CommonId", typeof(long));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_UserNotification_UpdateStatusByClientIdNotificationIdMessageType", clientIdParameter, commonIdParameter, messageTypeParameter);
        }
    
        public virtual int uspa_ClientPortal_UserNotificationById(Nullable<long> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_UserNotificationById", notificationIdParameter);
        }
    
        public virtual int uspa_ClientPortal_ValidateZipcode(Nullable<int> state, Nullable<int> city, string zipCode)
        {
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientPortal_ValidateZipcode", stateParameter, cityParameter, zipCodeParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_AddressChangeProcess_Result> uspa_ClientUnit_AddressChangeProcess(Nullable<int> unitId, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_AddressChangeProcess_Result>("uspa_ClientUnit_AddressChangeProcess", unitIdParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientUnit_CancelPlan(Nullable<int> unitId, Nullable<int> userId, Nullable<int> roleId, Nullable<System.DateTime> date)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_CancelPlan", unitIdParameter, userIdParameter, roleIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_CheckForAddressChange_Result> uspa_ClientUnit_CheckForAddressChange(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_CheckForAddressChange_Result>("uspa_ClientUnit_CheckForAddressChange", unitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ClientUnit_CheckPlanTypeByUnitIds(string clientUnitIds)
        {
            var clientUnitIdsParameter = clientUnitIds != null ?
                new ObjectParameter("ClientUnitIds", clientUnitIds) :
                new ObjectParameter("ClientUnitIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ClientUnit_CheckPlanTypeByUnitIds", clientUnitIdsParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_CheckUnitName_Result> uspa_ClientUnit_CheckUnitName(Nullable<int> clientId, Nullable<int> unitId, string unitName)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_CheckUnitName_Result>("uspa_ClientUnit_CheckUnitName", clientIdParameter, unitIdParameter, unitNameParameter);
        }
    
        public virtual int uspa_ClientUnit_ClientPortal_DeleteUnit(Nullable<int> clientUnitId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_ClientPortal_DeleteUnit", clientUnitIdParameter);
        }
    
        public virtual int uspa_ClientUnit_GetAll(string clientName, Nullable<int> status)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_GetAll", clientNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetAllAdmin_Result> uspa_ClientUnit_GetAllAdmin(string clientName, Nullable<int> status, string sortField, string sortDirection)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetAllAdmin_Result>("uspa_ClientUnit_GetAllAdmin", clientNameParameter, statusParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetByClientAndAddressId_Result> uspa_ClientUnit_GetByClientAndAddressId(Nullable<int> clientId, Nullable<int> addressId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetByClientAndAddressId_Result>("uspa_ClientUnit_GetByClientAndAddressId", clientIdParameter, addressIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetByClientAndAddressIdForPortal_Result> uspa_ClientUnit_GetByClientAndAddressIdForPortal(Nullable<int> clientId, Nullable<int> addressId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetByClientAndAddressIdForPortal_Result>("uspa_ClientUnit_GetByClientAndAddressIdForPortal", clientIdParameter, addressIdParameter);
        }
    
        public virtual int uspa_ClientUnit_GetByClientAndAddressIdPlanIdForPortal(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_GetByClientAndAddressIdPlanIdForPortal", clientIdParameter, addressIdParameter, planTypeIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetByClientId_Result> uspa_ClientUnit_GetByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetByClientId_Result>("uspa_ClientUnit_GetByClientId", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetByClientIdAdmin_Result> uspa_ClientUnit_GetByClientIdAdmin(Nullable<int> clientId, Nullable<int> status, string sortField, string sortDirection)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetByClientIdAdmin_Result>("uspa_ClientUnit_GetByClientIdAdmin", clientIdParameter, statusParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ClientUnit_GetByClientIdUnitName(Nullable<int> clientId, string unitName)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ClientUnit_GetByClientIdUnitName", clientIdParameter, unitNameParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetById_Result> uspa_ClientUnit_GetById(Nullable<int> clientUnitId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetById_Result>("uspa_ClientUnit_GetById", clientUnitIdParameter);
        }
    
        public virtual int uspa_ClientUnit_GetRenewCancelPlanUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_GetRenewCancelPlanUnit");
        }
    
        public virtual int uspa_ClientUnit_GetRenewCancelPlanUnitByName(string clientName)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_GetRenewCancelPlanUnitByName", clientNameParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_GetUnitsByClientAddressAndPlanId_Result> uspa_ClientUnit_GetUnitsByClientAddressAndPlanId(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_GetUnitsByClientAddressAndPlanId_Result>("uspa_ClientUnit_GetUnitsByClientAddressAndPlanId", clientIdParameter, addressIdParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_ClientUnit_HardDeleteClientUnit(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_HardDeleteClientUnit", idParameter);
        }
    
        public virtual int uspa_ClientUnit_Insert(Nullable<int> clientId, Nullable<int> planTypeId, string unitName, Nullable<System.DateTime> manufactureDate, Nullable<int> addressId, Nullable<int> unitTypeId, Nullable<bool> autoRenewal, Nullable<bool> isSpecialApplied, Nullable<int> status, string notes, string currentPaymentMethod, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var unitTypeIdParameter = unitTypeId.HasValue ?
                new ObjectParameter("UnitTypeId", unitTypeId) :
                new ObjectParameter("UnitTypeId", typeof(int));
    
            var autoRenewalParameter = autoRenewal.HasValue ?
                new ObjectParameter("AutoRenewal", autoRenewal) :
                new ObjectParameter("AutoRenewal", typeof(bool));
    
            var isSpecialAppliedParameter = isSpecialApplied.HasValue ?
                new ObjectParameter("IsSpecialApplied", isSpecialApplied) :
                new ObjectParameter("IsSpecialApplied", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var currentPaymentMethodParameter = currentPaymentMethod != null ?
                new ObjectParameter("CurrentPaymentMethod", currentPaymentMethod) :
                new ObjectParameter("CurrentPaymentMethod", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_Insert", clientIdParameter, planTypeIdParameter, unitNameParameter, manufactureDateParameter, addressIdParameter, unitTypeIdParameter, autoRenewalParameter, isSpecialAppliedParameter, statusParameter, notesParameter, currentPaymentMethodParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnit_RenewPlan(Nullable<int> unitId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_RenewPlan", unitIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnit_SetStatusByServiceId(Nullable<long> serviceId, Nullable<int> status)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_SetStatusByServiceId", serviceIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnit_UnPaid_GetByClientId_Result> uspa_ClientUnit_UnPaid_GetByClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnit_UnPaid_GetByClientId_Result>("uspa_ClientUnit_UnPaid_GetByClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientUnit_UnsubscribePlanAfterSpecifiedDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_UnsubscribePlanAfterSpecifiedDays");
        }
    
        public virtual int uspa_ClientUnit_Update(Nullable<int> id, Nullable<int> clientId, Nullable<int> planTypeId, string unitName, Nullable<System.DateTime> manufactureDate, Nullable<int> addressId, Nullable<int> unitTypeId, Nullable<int> status, string notes, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var unitTypeIdParameter = unitTypeId.HasValue ?
                new ObjectParameter("UnitTypeId", unitTypeId) :
                new ObjectParameter("UnitTypeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_Update", idParameter, clientIdParameter, planTypeIdParameter, unitNameParameter, manufactureDateParameter, addressIdParameter, unitTypeIdParameter, statusParameter, notesParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientUnit_UpdatePaymentStatus(Nullable<int> unitId, string paymentStatus, string subscriptionId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var subscriptionIdParameter = subscriptionId != null ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnit_UpdatePaymentStatus", unitIdParameter, paymentStatusParameter, subscriptionIdParameter);
        }
    
        public virtual int uspa_ClientUnitInvoice_Insert(Nullable<int> clientId, Nullable<int> unitId, string renewCancelReason, Nullable<decimal> amount, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var renewCancelReasonParameter = renewCancelReason != null ?
                new ObjectParameter("RenewCancelReason", renewCancelReason) :
                new ObjectParameter("RenewCancelReason", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitInvoice_Insert", clientIdParameter, unitIdParameter, renewCancelReasonParameter, amountParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<string> uspa_ClientUnitManuals_DeleteById(Nullable<int> manualId)
        {
            var manualIdParameter = manualId.HasValue ?
                new ObjectParameter("ManualId", manualId) :
                new ObjectParameter("ManualId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_ClientUnitManuals_DeleteById", manualIdParameter);
        }
    
        public virtual int uspa_ClientUnitManuals_DeleteByUnitId(Nullable<int> clientUnitId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitManuals_DeleteByUnitId", clientUnitIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitManuals_GetByUnitId_Result> uspa_ClientUnitManuals_GetByUnitId(Nullable<int> clientUnitId, string splitType)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitManuals_GetByUnitId_Result>("uspa_ClientUnitManuals_GetByUnitId", clientUnitIdParameter, splitTypeParameter);
        }
    
        public virtual int uspa_ClientUnitManuals_Insert(Nullable<int> clientUnitId, string manualName, string splitType, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var manualNameParameter = manualName != null ?
                new ObjectParameter("ManualName", manualName) :
                new ObjectParameter("ManualName", typeof(string));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitManuals_Insert", clientUnitIdParameter, manualNameParameter, splitTypeParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitManuals_InsertFromUnitManuals_Result> uspa_ClientUnitManuals_InsertFromUnitManuals(Nullable<int> unitId, Nullable<int> clientUnitId, string unitType, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitManuals_InsertFromUnitManuals_Result>("uspa_ClientUnitManuals_InsertFromUnitManuals", unitIdParameter, clientUnitIdParameter, unitTypeParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnitParts_DeleteByUnitId(Nullable<int> clientUnitId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitParts_DeleteByUnitId", clientUnitIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitParts_GetByUnitId_Result> uspa_ClientUnitParts_GetByUnitId(Nullable<int> clientUnitId)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitParts_GetByUnitId_Result>("uspa_ClientUnitParts_GetByUnitId", clientUnitIdParameter);
        }
    
        public virtual int uspa_ClientUnitParts_Insert(Nullable<int> unitId, string splitType, string modelNumber, string serialNumber, string manufactureBrand, Nullable<System.DateTime> manufactureDate, string unitTon, Nullable<int> thermostat, Nullable<int> refrigerantType, string electricalService, string maxBreaker, Nullable<int> breaker, Nullable<int> compressor, Nullable<int> capacitor, Nullable<int> contactor, Nullable<int> filterdryer, Nullable<int> defrostboard, Nullable<int> relay, Nullable<int> tXVValve, Nullable<int> reversingValve, Nullable<int> blowerMotor, Nullable<int> condensingfanmotor, Nullable<int> inducerdraftmotor, Nullable<int> transformer, Nullable<int> controlboard, Nullable<int> limitswitch, Nullable<int> ignitor, Nullable<int> gasvalve, Nullable<int> pressureswitch, Nullable<int> flamesensor, Nullable<int> rolloutsensor, Nullable<int> doorswitch, Nullable<int> ignitioncontrolboard, Nullable<int> coil, Nullable<int> misc)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manufactureBrandParameter = manufactureBrand != null ?
                new ObjectParameter("ManufactureBrand", manufactureBrand) :
                new ObjectParameter("ManufactureBrand", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var unitTonParameter = unitTon != null ?
                new ObjectParameter("UnitTon", unitTon) :
                new ObjectParameter("UnitTon", typeof(string));
    
            var thermostatParameter = thermostat.HasValue ?
                new ObjectParameter("Thermostat", thermostat) :
                new ObjectParameter("Thermostat", typeof(int));
    
            var refrigerantTypeParameter = refrigerantType.HasValue ?
                new ObjectParameter("RefrigerantType", refrigerantType) :
                new ObjectParameter("RefrigerantType", typeof(int));
    
            var electricalServiceParameter = electricalService != null ?
                new ObjectParameter("ElectricalService", electricalService) :
                new ObjectParameter("ElectricalService", typeof(string));
    
            var maxBreakerParameter = maxBreaker != null ?
                new ObjectParameter("MaxBreaker", maxBreaker) :
                new ObjectParameter("MaxBreaker", typeof(string));
    
            var breakerParameter = breaker.HasValue ?
                new ObjectParameter("Breaker", breaker) :
                new ObjectParameter("Breaker", typeof(int));
    
            var compressorParameter = compressor.HasValue ?
                new ObjectParameter("Compressor", compressor) :
                new ObjectParameter("Compressor", typeof(int));
    
            var capacitorParameter = capacitor.HasValue ?
                new ObjectParameter("Capacitor", capacitor) :
                new ObjectParameter("Capacitor", typeof(int));
    
            var contactorParameter = contactor.HasValue ?
                new ObjectParameter("Contactor", contactor) :
                new ObjectParameter("Contactor", typeof(int));
    
            var filterdryerParameter = filterdryer.HasValue ?
                new ObjectParameter("Filterdryer", filterdryer) :
                new ObjectParameter("Filterdryer", typeof(int));
    
            var defrostboardParameter = defrostboard.HasValue ?
                new ObjectParameter("Defrostboard", defrostboard) :
                new ObjectParameter("Defrostboard", typeof(int));
    
            var relayParameter = relay.HasValue ?
                new ObjectParameter("Relay", relay) :
                new ObjectParameter("Relay", typeof(int));
    
            var tXVValveParameter = tXVValve.HasValue ?
                new ObjectParameter("TXVValve", tXVValve) :
                new ObjectParameter("TXVValve", typeof(int));
    
            var reversingValveParameter = reversingValve.HasValue ?
                new ObjectParameter("ReversingValve", reversingValve) :
                new ObjectParameter("ReversingValve", typeof(int));
    
            var blowerMotorParameter = blowerMotor.HasValue ?
                new ObjectParameter("BlowerMotor", blowerMotor) :
                new ObjectParameter("BlowerMotor", typeof(int));
    
            var condensingfanmotorParameter = condensingfanmotor.HasValue ?
                new ObjectParameter("Condensingfanmotor", condensingfanmotor) :
                new ObjectParameter("Condensingfanmotor", typeof(int));
    
            var inducerdraftmotorParameter = inducerdraftmotor.HasValue ?
                new ObjectParameter("Inducerdraftmotor", inducerdraftmotor) :
                new ObjectParameter("Inducerdraftmotor", typeof(int));
    
            var transformerParameter = transformer.HasValue ?
                new ObjectParameter("Transformer", transformer) :
                new ObjectParameter("Transformer", typeof(int));
    
            var controlboardParameter = controlboard.HasValue ?
                new ObjectParameter("Controlboard", controlboard) :
                new ObjectParameter("Controlboard", typeof(int));
    
            var limitswitchParameter = limitswitch.HasValue ?
                new ObjectParameter("Limitswitch", limitswitch) :
                new ObjectParameter("Limitswitch", typeof(int));
    
            var ignitorParameter = ignitor.HasValue ?
                new ObjectParameter("Ignitor", ignitor) :
                new ObjectParameter("Ignitor", typeof(int));
    
            var gasvalveParameter = gasvalve.HasValue ?
                new ObjectParameter("Gasvalve", gasvalve) :
                new ObjectParameter("Gasvalve", typeof(int));
    
            var pressureswitchParameter = pressureswitch.HasValue ?
                new ObjectParameter("Pressureswitch", pressureswitch) :
                new ObjectParameter("Pressureswitch", typeof(int));
    
            var flamesensorParameter = flamesensor.HasValue ?
                new ObjectParameter("Flamesensor", flamesensor) :
                new ObjectParameter("Flamesensor", typeof(int));
    
            var rolloutsensorParameter = rolloutsensor.HasValue ?
                new ObjectParameter("Rolloutsensor", rolloutsensor) :
                new ObjectParameter("Rolloutsensor", typeof(int));
    
            var doorswitchParameter = doorswitch.HasValue ?
                new ObjectParameter("Doorswitch", doorswitch) :
                new ObjectParameter("Doorswitch", typeof(int));
    
            var ignitioncontrolboardParameter = ignitioncontrolboard.HasValue ?
                new ObjectParameter("Ignitioncontrolboard", ignitioncontrolboard) :
                new ObjectParameter("Ignitioncontrolboard", typeof(int));
    
            var coilParameter = coil.HasValue ?
                new ObjectParameter("Coil", coil) :
                new ObjectParameter("Coil", typeof(int));
    
            var miscParameter = misc.HasValue ?
                new ObjectParameter("Misc", misc) :
                new ObjectParameter("Misc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitParts_Insert", unitIdParameter, splitTypeParameter, modelNumberParameter, serialNumberParameter, manufactureBrandParameter, manufactureDateParameter, unitTonParameter, thermostatParameter, refrigerantTypeParameter, electricalServiceParameter, maxBreakerParameter, breakerParameter, compressorParameter, capacitorParameter, contactorParameter, filterdryerParameter, defrostboardParameter, relayParameter, tXVValveParameter, reversingValveParameter, blowerMotorParameter, condensingfanmotorParameter, inducerdraftmotorParameter, transformerParameter, controlboardParameter, limitswitchParameter, ignitorParameter, gasvalveParameter, pressureswitchParameter, flamesensorParameter, rolloutsensorParameter, doorswitchParameter, ignitioncontrolboardParameter, coilParameter, miscParameter);
        }
    
        public virtual ObjectResult<string> uspa_ClientUnitPictures_DeleteById(Nullable<int> pictureId)
        {
            var pictureIdParameter = pictureId.HasValue ?
                new ObjectParameter("PictureId", pictureId) :
                new ObjectParameter("PictureId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_ClientUnitPictures_DeleteById", pictureIdParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitPictures_GetByUnitId_Result> uspa_ClientUnitPictures_GetByUnitId(Nullable<int> clientUnitId, string splitType)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitPictures_GetByUnitId_Result>("uspa_ClientUnitPictures_GetByUnitId", clientUnitIdParameter, splitTypeParameter);
        }
    
        public virtual int uspa_ClientUnitPictures_Insert(Nullable<int> clientUnitId, string unitImage, string splitType, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var unitImageParameter = unitImage != null ?
                new ObjectParameter("UnitImage", unitImage) :
                new ObjectParameter("UnitImage", typeof(string));
    
            var splitTypeParameter = splitType != null ?
                new ObjectParameter("SplitType", splitType) :
                new ObjectParameter("SplitType", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitPictures_Insert", clientUnitIdParameter, unitImageParameter, splitTypeParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnitServiceCount_GetUnitSubscriptionCountWithStripeScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitServiceCount_GetUnitSubscriptionCountWithStripeScheduler");
        }
    
        public virtual int uspa_ClientUnitServiceCount_Insert(Nullable<int> clientId, Nullable<int> unitId, Nullable<int> planType, Nullable<int> totalDonePlanService, Nullable<int> totalRequestService, Nullable<int> totalDoneRequestService, Nullable<int> totalBillsGenerated, Nullable<int> stripeUnitSubscriptionCount, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, Nullable<int> visitPerYear)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var planTypeParameter = planType.HasValue ?
                new ObjectParameter("PlanType", planType) :
                new ObjectParameter("PlanType", typeof(int));
    
            var totalDonePlanServiceParameter = totalDonePlanService.HasValue ?
                new ObjectParameter("TotalDonePlanService", totalDonePlanService) :
                new ObjectParameter("TotalDonePlanService", typeof(int));
    
            var totalRequestServiceParameter = totalRequestService.HasValue ?
                new ObjectParameter("TotalRequestService", totalRequestService) :
                new ObjectParameter("TotalRequestService", typeof(int));
    
            var totalDoneRequestServiceParameter = totalDoneRequestService.HasValue ?
                new ObjectParameter("TotalDoneRequestService", totalDoneRequestService) :
                new ObjectParameter("TotalDoneRequestService", typeof(int));
    
            var totalBillsGeneratedParameter = totalBillsGenerated.HasValue ?
                new ObjectParameter("TotalBillsGenerated", totalBillsGenerated) :
                new ObjectParameter("TotalBillsGenerated", typeof(int));
    
            var stripeUnitSubscriptionCountParameter = stripeUnitSubscriptionCount.HasValue ?
                new ObjectParameter("StripeUnitSubscriptionCount", stripeUnitSubscriptionCount) :
                new ObjectParameter("StripeUnitSubscriptionCount", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var visitPerYearParameter = visitPerYear.HasValue ?
                new ObjectParameter("VisitPerYear", visitPerYear) :
                new ObjectParameter("VisitPerYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitServiceCount_Insert", clientIdParameter, unitIdParameter, planTypeParameter, totalDonePlanServiceParameter, totalRequestServiceParameter, totalDoneRequestServiceParameter, totalBillsGeneratedParameter, stripeUnitSubscriptionCountParameter, addedByParameter, addedByTypeParameter, addedDateParameter, visitPerYearParameter);
        }
    
        public virtual int uspa_ClientUnitServiceCount_UpdateStripeSubscriptionCount(Nullable<int> unitId, Nullable<int> count, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitServiceCount_UpdateStripeSubscriptionCount", unitIdParameter, countParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_ChangePaymentMethod(Nullable<int> unitId, string paymentMethod, Nullable<System.DateTime> changedDate, Nullable<int> cardId, Nullable<int> updatedBy, Nullable<int> updatedByType)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var changedDateParameter = changedDate.HasValue ?
                new ObjectParameter("ChangedDate", changedDate) :
                new ObjectParameter("ChangedDate", typeof(System.DateTime));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_ChangePaymentMethod", unitIdParameter, paymentMethodParameter, changedDateParameter, cardIdParameter, updatedByParameter, updatedByTypeParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_GetById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_GetById", idParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_GetPastDueSubscriptionsForScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_GetPastDueSubscriptionsForScheduler");
        }
    
        public virtual ObjectResult<uspa_ClientUnitSubscription_GetPaymentDueForScheduler_Result> uspa_ClientUnitSubscription_GetPaymentDueForScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitSubscription_GetPaymentDueForScheduler_Result>("uspa_ClientUnitSubscription_GetPaymentDueForScheduler");
        }
    
        public virtual int uspa_ClientUnitSubscription_GetSubscription(string clientName, string startDate, string endDate, string paymentMethod, string status)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_GetSubscription", clientNameParameter, startDateParameter, endDateParameter, paymentMethodParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitSubscription_GetUnPaidSubscription_Result> uspa_ClientUnitSubscription_GetUnPaidSubscription(string clientName)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitSubscription_GetUnPaidSubscription_Result>("uspa_ClientUnitSubscription_GetUnPaidSubscription", clientNameParameter);
        }
    
        public virtual ObjectResult<uspa_ClientUnitSubscription_GetUnPaidSubscription_By_ClientId_Result> uspa_ClientUnitSubscription_GetUnPaidSubscription_By_ClientId(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ClientUnitSubscription_GetUnPaidSubscription_By_ClientId_Result>("uspa_ClientUnitSubscription_GetUnPaidSubscription_By_ClientId", clientIdParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_Update(Nullable<long> id, Nullable<int> cardId, string pONumber, string checkNumber, string frontImage, string backImage, string accountingNotes, Nullable<decimal> amount, string status, string failedDesc, string failedCode, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var frontImageParameter = frontImage != null ?
                new ObjectParameter("FrontImage", frontImage) :
                new ObjectParameter("FrontImage", typeof(string));
    
            var backImageParameter = backImage != null ?
                new ObjectParameter("BackImage", backImage) :
                new ObjectParameter("BackImage", typeof(string));
    
            var accountingNotesParameter = accountingNotes != null ?
                new ObjectParameter("AccountingNotes", accountingNotes) :
                new ObjectParameter("AccountingNotes", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var failedDescParameter = failedDesc != null ?
                new ObjectParameter("FailedDesc", failedDesc) :
                new ObjectParameter("FailedDesc", typeof(string));
    
            var failedCodeParameter = failedCode != null ?
                new ObjectParameter("FailedCode", failedCode) :
                new ObjectParameter("FailedCode", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_Update", idParameter, cardIdParameter, pONumberParameter, checkNumberParameter, frontImageParameter, backImageParameter, accountingNotesParameter, amountParameter, statusParameter, failedDescParameter, failedCodeParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_ClientUnitSubscription_UpdateById(Nullable<long> id, Nullable<int> cardId, string pONumber, string checkNumber, string frontImage, string backImage, string accountingNotes, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var frontImageParameter = frontImage != null ?
                new ObjectParameter("FrontImage", frontImage) :
                new ObjectParameter("FrontImage", typeof(string));
    
            var backImageParameter = backImage != null ?
                new ObjectParameter("BackImage", backImage) :
                new ObjectParameter("BackImage", typeof(string));
    
            var accountingNotesParameter = accountingNotes != null ?
                new ObjectParameter("AccountingNotes", accountingNotes) :
                new ObjectParameter("AccountingNotes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ClientUnitSubscription_UpdateById", idParameter, cardIdParameter, pONumberParameter, checkNumberParameter, frontImageParameter, backImageParameter, accountingNotesParameter, statusParameter);
        }
    
        public virtual int uspa_CMPPage_Insert(string pageTitle, string menuTitle, string uRL, string description, string bannerImage, string metaTitle, string metaKeywords, string metaDescription, string additionalMeta, Nullable<bool> status, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var menuTitleParameter = menuTitle != null ?
                new ObjectParameter("MenuTitle", menuTitle) :
                new ObjectParameter("MenuTitle", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bannerImageParameter = bannerImage != null ?
                new ObjectParameter("BannerImage", bannerImage) :
                new ObjectParameter("BannerImage", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaKeywordsParameter = metaKeywords != null ?
                new ObjectParameter("MetaKeywords", metaKeywords) :
                new ObjectParameter("MetaKeywords", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var additionalMetaParameter = additionalMeta != null ?
                new ObjectParameter("AdditionalMeta", additionalMeta) :
                new ObjectParameter("AdditionalMeta", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CMPPage_Insert", pageTitleParameter, menuTitleParameter, uRLParameter, descriptionParameter, bannerImageParameter, metaTitleParameter, metaKeywordsParameter, metaDescriptionParameter, additionalMetaParameter, statusParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_CMSPage_BlockList_Result> uspa_CMSPage_BlockList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CMSPage_BlockList_Result>("uspa_CMSPage_BlockList");
        }
    
        public virtual ObjectResult<uspa_CMSPage_BlockListByCMSID_Result> uspa_CMSPage_BlockListByCMSID(Nullable<int> cMSPageID)
        {
            var cMSPageIDParameter = cMSPageID.HasValue ?
                new ObjectParameter("CMSPageID", cMSPageID) :
                new ObjectParameter("CMSPageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CMSPage_BlockListByCMSID_Result>("uspa_CMSPage_BlockListByCMSID", cMSPageIDParameter);
        }
    
        public virtual int uspa_CMSPage_Delete(Nullable<int> cMSPageId)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CMSPage_Delete", cMSPageIdParameter);
        }
    
        public virtual ObjectResult<uspa_CMSPage_GetById_Result> uspa_CMSPage_GetById(Nullable<int> cMSPageId)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CMSPage_GetById_Result>("uspa_CMSPage_GetById", cMSPageIdParameter);
        }
    
        public virtual ObjectResult<uspa_CMSPage_ParentList_Result> uspa_CMSPage_ParentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CMSPage_ParentList_Result>("uspa_CMSPage_ParentList");
        }
    
        public virtual int uspa_CMSPage_SetStatus(Nullable<int> cMSPageId, Nullable<bool> isActive)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CMSPage_SetStatus", cMSPageIdParameter, isActiveParameter);
        }
    
        public virtual int uspa_CMSPage_UpdateById(Nullable<int> id, string pageTitle, string menuTitle, string uRL, string description, string bannerImage, string metaTitle, string metaKeywords, string metaDescription, string additionalMeta, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var menuTitleParameter = menuTitle != null ?
                new ObjectParameter("MenuTitle", menuTitle) :
                new ObjectParameter("MenuTitle", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bannerImageParameter = bannerImage != null ?
                new ObjectParameter("BannerImage", bannerImage) :
                new ObjectParameter("BannerImage", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaKeywordsParameter = metaKeywords != null ?
                new ObjectParameter("MetaKeywords", metaKeywords) :
                new ObjectParameter("MetaKeywords", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var additionalMetaParameter = additionalMeta != null ?
                new ObjectParameter("AdditionalMeta", additionalMeta) :
                new ObjectParameter("AdditionalMeta", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_CMSPage_UpdateById", idParameter, pageTitleParameter, menuTitleParameter, uRLParameter, descriptionParameter, bannerImageParameter, metaTitleParameter, metaKeywordsParameter, metaDescriptionParameter, additionalMetaParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_CMSPages_SelectAll_Result> uspa_CMSPages_SelectAll(string pageTitle, string menuTitle, string sortExpression, string sortDirection)
        {
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var menuTitleParameter = menuTitle != null ?
                new ObjectParameter("MenuTitle", menuTitle) :
                new ObjectParameter("MenuTitle", typeof(string));
    
            var sortExpressionParameter = sortExpression != null ?
                new ObjectParameter("SortExpression", sortExpression) :
                new ObjectParameter("SortExpression", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_CMSPages_SelectAll_Result>("uspa_CMSPages_SelectAll", pageTitleParameter, menuTitleParameter, sortExpressionParameter, sortDirectionParameter);
        }
    
        public virtual int uspa_ContactRequest_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ContactRequest_Delete", idParameter);
        }
    
        public virtual ObjectResult<uspa_ContactRequest_GetAll_Result> uspa_ContactRequest_GetAll(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ContactRequest_GetAll_Result>("uspa_ContactRequest_GetAll", nameParameter);
        }
    
        public virtual ObjectResult<uspa_ContactRequest_GetById_Result> uspa_ContactRequest_GetById(Nullable<int> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ContactRequest_GetById_Result>("uspa_ContactRequest_GetById", requestIdParameter);
        }
    
        public virtual ObjectResult<string> uspa_ContactRequest_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_ContactRequest_GetByName", nameParameter);
        }
    
        public virtual int uspa_ContactRequest_Insert(string name, string email, string phoneNumber, string message, Nullable<System.DateTime> requestDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ContactRequest_Insert", nameParameter, emailParameter, phoneNumberParameter, messageParameter, requestDateParameter);
        }
    
        public virtual int uspa_ContactRequest_Update(Nullable<int> id, string responseEmailSub, string body, Nullable<int> responseBy, Nullable<System.DateTime> responseDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var responseEmailSubParameter = responseEmailSub != null ?
                new ObjectParameter("ResponseEmailSub", responseEmailSub) :
                new ObjectParameter("ResponseEmailSub", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var responseByParameter = responseBy.HasValue ?
                new ObjectParameter("ResponseBy", responseBy) :
                new ObjectParameter("ResponseBy", typeof(int));
    
            var responseDateParameter = responseDate.HasValue ?
                new ObjectParameter("ResponseDate", responseDate) :
                new ObjectParameter("ResponseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ContactRequest_Update", idParameter, responseEmailSubParameter, bodyParameter, responseByParameter, responseDateParameter);
        }
    
        public virtual ObjectResult<uspa_DailyPartListMaster_SelectAll_Result> uspa_DailyPartListMaster_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_DailyPartListMaster_SelectAll_Result>("uspa_DailyPartListMaster_SelectAll");
        }
    
        public virtual int uspa_DailyPartListMaster_Update(Nullable<int> id, Nullable<bool> isIncludeInService, Nullable<bool> isIncludeInRepair, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isIncludeInServiceParameter = isIncludeInService.HasValue ?
                new ObjectParameter("IsIncludeInService", isIncludeInService) :
                new ObjectParameter("IsIncludeInService", typeof(bool));
    
            var isIncludeInRepairParameter = isIncludeInRepair.HasValue ?
                new ObjectParameter("IsIncludeInRepair", isIncludeInRepair) :
                new ObjectParameter("IsIncludeInRepair", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_DailyPartListMaster_Update", idParameter, isIncludeInServiceParameter, isIncludeInRepairParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_EmailTemplate_GetAll_Result> uspa_EmailTemplate_GetAll(string name, string subject)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmailTemplate_GetAll_Result>("uspa_EmailTemplate_GetAll", nameParameter, subjectParameter);
        }
    
        public virtual ObjectResult<uspa_EmailTemplate_GetById_Result> uspa_EmailTemplate_GetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmailTemplate_GetById_Result>("uspa_EmailTemplate_GetById", idParameter);
        }
    
        public virtual ObjectResult<uspa_EmailTemplate_GetByName_Result> uspa_EmailTemplate_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmailTemplate_GetByName_Result>("uspa_EmailTemplate_GetByName", nameParameter);
        }
    
        public virtual int uspa_EmailTemplate_Update(Nullable<int> id, string emailTemlateSubject, string fromEmail, string cCEmails, string emailBody, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var emailTemlateSubjectParameter = emailTemlateSubject != null ?
                new ObjectParameter("EmailTemlateSubject", emailTemlateSubject) :
                new ObjectParameter("EmailTemlateSubject", typeof(string));
    
            var fromEmailParameter = fromEmail != null ?
                new ObjectParameter("FromEmail", fromEmail) :
                new ObjectParameter("FromEmail", typeof(string));
    
            var cCEmailsParameter = cCEmails != null ?
                new ObjectParameter("CCEmails", cCEmails) :
                new ObjectParameter("CCEmails", typeof(string));
    
            var emailBodyParameter = emailBody != null ?
                new ObjectParameter("EmailBody", emailBody) :
                new ObjectParameter("EmailBody", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmailTemplate_Update", idParameter, emailTemlateSubjectParameter, fromEmailParameter, cCEmailsParameter, emailBodyParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Employee_Delete(Nullable<int> employeeId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Employee_Delete", employeeIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_GetByClientAddress_Result> uspa_Employee_GetByClientAddress(string empName, Nullable<int> addressId)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_GetByClientAddress_Result>("uspa_Employee_GetByClientAddress", empNameParameter, addressIdParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_GetByEmail_Result> uspa_Employee_GetByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_GetByEmail_Result>("uspa_Employee_GetByEmail", emailParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_GetByEmpName_Result> uspa_Employee_GetByEmpName(string empName, Nullable<bool> includeSalesPerson)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var includeSalesPersonParameter = includeSalesPerson.HasValue ?
                new ObjectParameter("IncludeSalesPerson", includeSalesPerson) :
                new ObjectParameter("IncludeSalesPerson", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_GetByEmpName_Result>("uspa_Employee_GetByEmpName", empNameParameter, includeSalesPersonParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_GetSalesEmployeeByName_Result> uspa_Employee_GetSalesEmployeeByName(string empName)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_GetSalesEmployeeByName_Result>("uspa_Employee_GetSalesEmployeeByName", empNameParameter);
        }
    
        public virtual int uspa_Employee_Insert(Nullable<int> roleId, string firstName, string lastName, string userName, string email, string password, string image, string address, string city, Nullable<int> stateId, string zipCode, string phoneNumber, string mobileNumber, string workStartTime, string workEndTime, Nullable<bool> isSalesPerson, Nullable<bool> isActive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var workStartTimeParameter = workStartTime != null ?
                new ObjectParameter("WorkStartTime", workStartTime) :
                new ObjectParameter("WorkStartTime", typeof(string));
    
            var workEndTimeParameter = workEndTime != null ?
                new ObjectParameter("WorkEndTime", workEndTime) :
                new ObjectParameter("WorkEndTime", typeof(string));
    
            var isSalesPersonParameter = isSalesPerson.HasValue ?
                new ObjectParameter("IsSalesPerson", isSalesPerson) :
                new ObjectParameter("IsSalesPerson", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Employee_Insert", roleIdParameter, firstNameParameter, lastNameParameter, userNameParameter, emailParameter, passwordParameter, imageParameter, addressParameter, cityParameter, stateIdParameter, zipCodeParameter, phoneNumberParameter, mobileNumberParameter, workStartTimeParameter, workEndTimeParameter, isSalesPersonParameter, isActiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_SelectAll_Result> uspa_Employee_SelectAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_SelectAll_Result>("uspa_Employee_SelectAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_SelectAllByName_Result> uspa_Employee_SelectAllByName(string empName, string sortField, string sortDirection)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_SelectAllByName_Result>("uspa_Employee_SelectAllByName", empNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Employee_SelectByID_Result> uspa_Employee_SelectByID(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Employee_SelectByID_Result>("uspa_Employee_SelectByID", employeeIdParameter);
        }
    
        public virtual int uspa_Employee_SetStatus(Nullable<bool> isActive, Nullable<int> employeeId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Employee_SetStatus", isActiveParameter, employeeIdParameter);
        }
    
        public virtual int uspa_Employee_Update(Nullable<int> id, string firstName, string lastName, string email, string password, string image, string address, string city, Nullable<int> stateId, string zipCode, string phoneNumber, string mobileNumber, string workStartTime, string workEndTime, Nullable<bool> isSalesPerson, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var workStartTimeParameter = workStartTime != null ?
                new ObjectParameter("WorkStartTime", workStartTime) :
                new ObjectParameter("WorkStartTime", typeof(string));
    
            var workEndTimeParameter = workEndTime != null ?
                new ObjectParameter("WorkEndTime", workEndTime) :
                new ObjectParameter("WorkEndTime", typeof(string));
    
            var isSalesPersonParameter = isSalesPerson.HasValue ?
                new ObjectParameter("IsSalesPerson", isSalesPerson) :
                new ObjectParameter("IsSalesPerson", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Employee_Update", idParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, imageParameter, addressParameter, cityParameter, stateIdParameter, zipCodeParameter, phoneNumberParameter, mobileNumberParameter, workStartTimeParameter, workEndTimeParameter, isSalesPersonParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_EmployeeLeave_Delete(Nullable<int> leaveId, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeLeave_Delete", leaveIdParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int uspa_EmployeeLeave_Insert(Nullable<int> employeeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> availableOnHoliday, string reason, Nullable<int> addedBy, Nullable<System.DateTime> addedDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var availableOnHolidayParameter = availableOnHoliday.HasValue ?
                new ObjectParameter("AvailableOnHoliday", availableOnHoliday) :
                new ObjectParameter("AvailableOnHoliday", typeof(bool));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeLeave_Insert", employeeIdParameter, startDateParameter, endDateParameter, availableOnHolidayParameter, reasonParameter, addedByParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeLeave_SelectAll_Result> uspa_EmployeeLeave_SelectAll(string empName, string startDate, string endDate)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeLeave_SelectAll_Result>("uspa_EmployeeLeave_SelectAll", empNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeLeave_SelectByID_Result> uspa_EmployeeLeave_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeLeave_SelectByID_Result>("uspa_EmployeeLeave_SelectByID", idParameter);
        }
    
        public virtual int uspa_EmployeeLeave_Update(Nullable<int> id, Nullable<int> employeeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> availableOnHoliday, string reason, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var availableOnHolidayParameter = availableOnHoliday.HasValue ?
                new ObjectParameter("AvailableOnHoliday", availableOnHoliday) :
                new ObjectParameter("AvailableOnHoliday", typeof(bool));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeLeave_Update", idParameter, employeeIdParameter, startDateParameter, endDateParameter, availableOnHolidayParameter, reasonParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual int uspa_EmployeePartRequest_DeleteByRequestId(Nullable<int> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeePartRequest_DeleteByRequestId", requestIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequest_GetByEmployeePartRequestId_Result> uspa_EmployeePartRequest_GetByEmployeePartRequestId(Nullable<int> employeePartRequestId)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequest_GetByEmployeePartRequestId_Result>("uspa_EmployeePartRequest_GetByEmployeePartRequestId", employeePartRequestIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequest_GetPartRequetedUnitsByReportId_Result> uspa_EmployeePartRequest_GetPartRequetedUnitsByReportId(Nullable<long> serviceReportId)
        {
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequest_GetPartRequetedUnitsByReportId_Result>("uspa_EmployeePartRequest_GetPartRequetedUnitsByReportId", serviceReportIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequest_GetPartsByReportIdAndUnitId_Result> uspa_EmployeePartRequest_GetPartsByReportIdAndUnitId(Nullable<long> serviceReportId, Nullable<int> unitId)
        {
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequest_GetPartsByReportIdAndUnitId_Result>("uspa_EmployeePartRequest_GetPartsByReportIdAndUnitId", serviceReportIdParameter, unitIdParameter);
        }
    
        public virtual int uspa_EmployeePartRequest_Insert(Nullable<int> employeePartRequestId, Nullable<int> unitId, Nullable<int> partId, Nullable<int> requestedQuantity, Nullable<int> arrangedQuantity, string partName, string partSize, string description)
        {
            var employeePartRequestIdParameter = employeePartRequestId.HasValue ?
                new ObjectParameter("EmployeePartRequestId", employeePartRequestId) :
                new ObjectParameter("EmployeePartRequestId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var requestedQuantityParameter = requestedQuantity.HasValue ?
                new ObjectParameter("RequestedQuantity", requestedQuantity) :
                new ObjectParameter("RequestedQuantity", typeof(int));
    
            var arrangedQuantityParameter = arrangedQuantity.HasValue ?
                new ObjectParameter("ArrangedQuantity", arrangedQuantity) :
                new ObjectParameter("ArrangedQuantity", typeof(int));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var partSizeParameter = partSize != null ?
                new ObjectParameter("PartSize", partSize) :
                new ObjectParameter("PartSize", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeePartRequest_Insert", employeePartRequestIdParameter, unitIdParameter, partIdParameter, requestedQuantityParameter, arrangedQuantityParameter, partNameParameter, partSizeParameter, descriptionParameter);
        }
    
        public virtual int uspa_EmployeePartRequestMaster_Insert(string status, Nullable<System.DateTime> addedDate, Nullable<int> employeeId, Nullable<int> clientId, Nullable<int> clientAddressId, Nullable<int> addedBy, Nullable<int> addedByType, string notes, string empNotes)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var clientAddressIdParameter = clientAddressId.HasValue ?
                new ObjectParameter("ClientAddressId", clientAddressId) :
                new ObjectParameter("ClientAddressId", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var empNotesParameter = empNotes != null ?
                new ObjectParameter("EmpNotes", empNotes) :
                new ObjectParameter("EmpNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeePartRequestMaster_Insert", statusParameter, addedDateParameter, employeeIdParameter, clientIdParameter, clientAddressIdParameter, addedByParameter, addedByTypeParameter, notesParameter, empNotesParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequestMaster_SelectAll_Result> uspa_EmployeePartRequestMaster_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequestMaster_SelectAll_Result>("uspa_EmployeePartRequestMaster_SelectAll");
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequestMaster_SelectAllByPartTypeId_Result> uspa_EmployeePartRequestMaster_SelectAllByPartTypeId(string empName, string partName, Nullable<int> partTypeId, Nullable<int> status)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var partTypeIdParameter = partTypeId.HasValue ?
                new ObjectParameter("PartTypeId", partTypeId) :
                new ObjectParameter("PartTypeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequestMaster_SelectAllByPartTypeId_Result>("uspa_EmployeePartRequestMaster_SelectAllByPartTypeId", empNameParameter, partNameParameter, partTypeIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePartRequestMaster_SelectByID_Result> uspa_EmployeePartRequestMaster_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePartRequestMaster_SelectByID_Result>("uspa_EmployeePartRequestMaster_SelectByID", idParameter);
        }
    
        public virtual int uspa_EmployeePartRequestMaster_Update(Nullable<int> id, string status, Nullable<int> employeeId, Nullable<int> clientId, Nullable<int> clientAddressId, string notes, string empNotes, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var clientAddressIdParameter = clientAddressId.HasValue ?
                new ObjectParameter("ClientAddressId", clientAddressId) :
                new ObjectParameter("ClientAddressId", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var empNotesParameter = empNotes != null ?
                new ObjectParameter("EmpNotes", empNotes) :
                new ObjectParameter("EmpNotes", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeePartRequestMaster_Update", idParameter, statusParameter, employeeIdParameter, clientIdParameter, clientAddressIdParameter, notesParameter, empNotesParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeePlanType_GetByEmployeeId_Result> uspa_EmployeePlanType_GetByEmployeeId(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeePlanType_GetByEmployeeId_Result>("uspa_EmployeePlanType_GetByEmployeeId", employeeIdParameter);
        }
    
        public virtual int uspa_EmployeePlanType_Insert(Nullable<int> employeeId, Nullable<int> planTypeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeePlanType_Insert", employeeIdParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_EmployeeSchedule_DeleteByLeaveId(Nullable<int> leaveId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeSchedule_DeleteByLeaveId", leaveIdParameter);
        }
    
        public virtual int uspa_EmployeeSchedule_InsertLeave(Nullable<int> employeeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> leaveId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeSchedule_InsertLeave", employeeIdParameter, startDateParameter, endDateParameter, leaveIdParameter);
        }
    
        public virtual int uspa_Employeeworkarea_Delete(Nullable<long> employeeWorkareaId, Nullable<int> updatedBy, Nullable<int> updatedByType)
        {
            var employeeWorkareaIdParameter = employeeWorkareaId.HasValue ?
                new ObjectParameter("EmployeeWorkareaId", employeeWorkareaId) :
                new ObjectParameter("EmployeeWorkareaId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Employeeworkarea_Delete", employeeWorkareaIdParameter, updatedByParameter, updatedByTypeParameter);
        }
    
        public virtual int uspa_EmployeeWorkarea_DeleteByEmployeeId(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeWorkarea_DeleteByEmployeeId", employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeWorkarea_GetByEmployeeId_Result> uspa_EmployeeWorkarea_GetByEmployeeId(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeWorkarea_GetByEmployeeId_Result>("uspa_EmployeeWorkarea_GetByEmployeeId", employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeWorkarea_GetByPriority_Result> uspa_EmployeeWorkarea_GetByPriority(Nullable<short> priority, Nullable<int> employeeId)
        {
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(short));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeWorkarea_GetByPriority_Result>("uspa_EmployeeWorkarea_GetByPriority", priorityParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeWorkarea_GetEmployeeByAreaId_Result> uspa_EmployeeWorkarea_GetEmployeeByAreaId(Nullable<int> areaId, string empName, Nullable<bool> includeSalesPerson)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var includeSalesPersonParameter = includeSalesPerson.HasValue ?
                new ObjectParameter("IncludeSalesPerson", includeSalesPerson) :
                new ObjectParameter("IncludeSalesPerson", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeWorkarea_GetEmployeeByAreaId_Result>("uspa_EmployeeWorkarea_GetEmployeeByAreaId", areaIdParameter, empNameParameter, includeSalesPersonParameter);
        }
    
        public virtual int uspa_EmployeeWorkarea_Insert(Nullable<int> employeeId, Nullable<short> priorityArea, Nullable<int> areaId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var priorityAreaParameter = priorityArea.HasValue ?
                new ObjectParameter("PriorityArea", priorityArea) :
                new ObjectParameter("PriorityArea", typeof(short));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_EmployeeWorkarea_Insert", employeeIdParameter, priorityAreaParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<uspa_EmployeeWorkarea_SelectAll_Result> uspa_EmployeeWorkarea_SelectAll(string empName, string areaName)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_EmployeeWorkarea_SelectAll_Result>("uspa_EmployeeWorkarea_SelectAll", empNameParameter, areaNameParameter);
        }
    
        public virtual int uspa_FailedBillingHistory_Insert(Nullable<int> clientId, Nullable<int> unitId, string serviceCaseNumber, string packageName, string billingType, Nullable<decimal> originalAmount, Nullable<decimal> purchasedAmount, Nullable<decimal> partnerSalesCommisionAmount, string billingAddress, Nullable<int> billingCity, Nullable<int> billingState, string billingZipcode, string billingPhoneNumber, string billingMobileNumber, string transactionId, Nullable<System.DateTime> transactionDate, Nullable<int> addedBy, Nullable<System.DateTime> addedDate, Nullable<bool> isPaid, string failcode, string faildesc)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var serviceCaseNumberParameter = serviceCaseNumber != null ?
                new ObjectParameter("ServiceCaseNumber", serviceCaseNumber) :
                new ObjectParameter("ServiceCaseNumber", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var purchasedAmountParameter = purchasedAmount.HasValue ?
                new ObjectParameter("PurchasedAmount", purchasedAmount) :
                new ObjectParameter("PurchasedAmount", typeof(decimal));
    
            var partnerSalesCommisionAmountParameter = partnerSalesCommisionAmount.HasValue ?
                new ObjectParameter("PartnerSalesCommisionAmount", partnerSalesCommisionAmount) :
                new ObjectParameter("PartnerSalesCommisionAmount", typeof(decimal));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var billingCityParameter = billingCity.HasValue ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(int));
    
            var billingStateParameter = billingState.HasValue ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(int));
    
            var billingZipcodeParameter = billingZipcode != null ?
                new ObjectParameter("BillingZipcode", billingZipcode) :
                new ObjectParameter("BillingZipcode", typeof(string));
    
            var billingPhoneNumberParameter = billingPhoneNumber != null ?
                new ObjectParameter("BillingPhoneNumber", billingPhoneNumber) :
                new ObjectParameter("BillingPhoneNumber", typeof(string));
    
            var billingMobileNumberParameter = billingMobileNumber != null ?
                new ObjectParameter("BillingMobileNumber", billingMobileNumber) :
                new ObjectParameter("BillingMobileNumber", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var failcodeParameter = failcode != null ?
                new ObjectParameter("failcode", failcode) :
                new ObjectParameter("failcode", typeof(string));
    
            var faildescParameter = faildesc != null ?
                new ObjectParameter("faildesc", faildesc) :
                new ObjectParameter("faildesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_FailedBillingHistory_Insert", clientIdParameter, unitIdParameter, serviceCaseNumberParameter, packageNameParameter, billingTypeParameter, originalAmountParameter, purchasedAmountParameter, partnerSalesCommisionAmountParameter, billingAddressParameter, billingCityParameter, billingStateParameter, billingZipcodeParameter, billingPhoneNumberParameter, billingMobileNumberParameter, transactionIdParameter, transactionDateParameter, addedByParameter, addedDateParameter, isPaidParameter, failcodeParameter, faildescParameter);
        }
    
        public virtual ObjectResult<uspa_GetAllRequestedServiceForSchedule_Result> uspa_GetAllRequestedServiceForSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetAllRequestedServiceForSchedule_Result>("uspa_GetAllRequestedServiceForSchedule");
        }
    
        public virtual ObjectResult<uspa_GetAllUserForMail_Result> uspa_GetAllUserForMail(Nullable<bool> clientAdded, Nullable<bool> empAdded, Nullable<bool> adminAdded, Nullable<bool> warehouseAdded, Nullable<bool> partnerAdded)
        {
            var clientAddedParameter = clientAdded.HasValue ?
                new ObjectParameter("ClientAdded", clientAdded) :
                new ObjectParameter("ClientAdded", typeof(bool));
    
            var empAddedParameter = empAdded.HasValue ?
                new ObjectParameter("EmpAdded", empAdded) :
                new ObjectParameter("EmpAdded", typeof(bool));
    
            var adminAddedParameter = adminAdded.HasValue ?
                new ObjectParameter("AdminAdded", adminAdded) :
                new ObjectParameter("AdminAdded", typeof(bool));
    
            var warehouseAddedParameter = warehouseAdded.HasValue ?
                new ObjectParameter("WarehouseAdded", warehouseAdded) :
                new ObjectParameter("WarehouseAdded", typeof(bool));
    
            var partnerAddedParameter = partnerAdded.HasValue ?
                new ObjectParameter("PartnerAdded", partnerAdded) :
                new ObjectParameter("PartnerAdded", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetAllUserForMail_Result>("uspa_GetAllUserForMail", clientAddedParameter, empAddedParameter, adminAddedParameter, warehouseAddedParameter, partnerAddedParameter);
        }
    
        public virtual ObjectResult<uspa_GetAllWareHouseUser_Result> uspa_GetAllWareHouseUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetAllWareHouseUser_Result>("uspa_GetAllWareHouseUser");
        }
    
        public virtual ObjectResult<uspa_GetCardIdFromOrderId_Result> uspa_GetCardIdFromOrderId(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetCardIdFromOrderId_Result>("uspa_GetCardIdFromOrderId", orderIdParameter);
        }
    
        public virtual int uspa_GetClientSubscriptionForPaymetScheduler(string paymentMethod, Nullable<System.DateTime> paymentDate)
        {
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_GetClientSubscriptionForPaymetScheduler", paymentMethodParameter, paymentDateParameter);
        }
    
        public virtual int uspa_GetClientUnitBySubscriptionId(string stripeSubscriptionId)
        {
            var stripeSubscriptionIdParameter = stripeSubscriptionId != null ?
                new ObjectParameter("StripeSubscriptionId", stripeSubscriptionId) :
                new ObjectParameter("StripeSubscriptionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_GetClientUnitBySubscriptionId", stripeSubscriptionIdParameter);
        }
    
        public virtual int uspa_GetCustomerFromStripeId(string stripeCustomerId)
        {
            var stripeCustomerIdParameter = stripeCustomerId != null ?
                new ObjectParameter("StripeCustomerId", stripeCustomerId) :
                new ObjectParameter("StripeCustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_GetCustomerFromStripeId", stripeCustomerIdParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "uspa_GetEmployeeForEmergencyService")]
        public virtual IQueryable<uspa_GetEmployeeForEmergencyService_Result> uspa_GetEmployeeForEmergencyService(Nullable<long> requestedServiceId, Nullable<long> serviceId, string purposeOfVisit, Nullable<int> addressId, Nullable<int> planTypeId, Nullable<System.DateTime> requestedServiceDate, string requestedServiceTime, Nullable<int> totalServiceTimeInMinutes, Nullable<int> preferredEmployeeId)
        {
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var requestedServiceDateParameter = requestedServiceDate.HasValue ?
                new ObjectParameter("RequestedServiceDate", requestedServiceDate) :
                new ObjectParameter("RequestedServiceDate", typeof(System.DateTime));
    
            var requestedServiceTimeParameter = requestedServiceTime != null ?
                new ObjectParameter("RequestedServiceTime", requestedServiceTime) :
                new ObjectParameter("RequestedServiceTime", typeof(string));
    
            var totalServiceTimeInMinutesParameter = totalServiceTimeInMinutes.HasValue ?
                new ObjectParameter("TotalServiceTimeInMinutes", totalServiceTimeInMinutes) :
                new ObjectParameter("TotalServiceTimeInMinutes", typeof(int));
    
            var preferredEmployeeIdParameter = preferredEmployeeId.HasValue ?
                new ObjectParameter("PreferredEmployeeId", preferredEmployeeId) :
                new ObjectParameter("PreferredEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<uspa_GetEmployeeForEmergencyService_Result>("[Aircall_DBEntities1].[uspa_GetEmployeeForEmergencyService](@RequestedServiceId, @ServiceId, @PurposeOfVisit, @AddressId, @PlanTypeId, @RequestedServiceDate, @RequestedServiceTime, @TotalServiceTimeInMinutes, @PreferredEmployeeId)", requestedServiceIdParameter, serviceIdParameter, purposeOfVisitParameter, addressIdParameter, planTypeIdParameter, requestedServiceDateParameter, requestedServiceTimeParameter, totalServiceTimeInMinutesParameter, preferredEmployeeIdParameter);
        }
    
        [DbFunction("Aircall_DBEntities1", "uspa_GetEmployeeForService")]
        public virtual IQueryable<uspa_GetEmployeeForService_Result> uspa_GetEmployeeForService(Nullable<long> serviceId, string purposeOfVisit, Nullable<int> addressId, Nullable<int> planTypeId, Nullable<System.DateTime> requestedServiceDate, string requestedServiceTime, Nullable<int> totalServiceTimeInMinutes, Nullable<int> preferredEmployeeId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var requestedServiceDateParameter = requestedServiceDate.HasValue ?
                new ObjectParameter("RequestedServiceDate", requestedServiceDate) :
                new ObjectParameter("RequestedServiceDate", typeof(System.DateTime));
    
            var requestedServiceTimeParameter = requestedServiceTime != null ?
                new ObjectParameter("RequestedServiceTime", requestedServiceTime) :
                new ObjectParameter("RequestedServiceTime", typeof(string));
    
            var totalServiceTimeInMinutesParameter = totalServiceTimeInMinutes.HasValue ?
                new ObjectParameter("TotalServiceTimeInMinutes", totalServiceTimeInMinutes) :
                new ObjectParameter("TotalServiceTimeInMinutes", typeof(int));
    
            var preferredEmployeeIdParameter = preferredEmployeeId.HasValue ?
                new ObjectParameter("PreferredEmployeeId", preferredEmployeeId) :
                new ObjectParameter("PreferredEmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<uspa_GetEmployeeForService_Result>("[Aircall_DBEntities1].[uspa_GetEmployeeForService](@ServiceId, @PurposeOfVisit, @AddressId, @PlanTypeId, @RequestedServiceDate, @RequestedServiceTime, @TotalServiceTimeInMinutes, @PreferredEmployeeId)", serviceIdParameter, purposeOfVisitParameter, addressIdParameter, planTypeIdParameter, requestedServiceDateParameter, requestedServiceTimeParameter, totalServiceTimeInMinutesParameter, preferredEmployeeIdParameter);
        }
    
        public virtual ObjectResult<uspa_GetLowStockDetails_Result> uspa_GetLowStockDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetLowStockDetails_Result>("uspa_GetLowStockDetails");
        }
    
        public virtual ObjectResult<uspa_GetMaterialListByServiceAndUnitId_Result> uspa_GetMaterialListByServiceAndUnitId(Nullable<long> serviceId, Nullable<int> unitId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetMaterialListByServiceAndUnitId_Result>("uspa_GetMaterialListByServiceAndUnitId", serviceIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<uspa_GetMIssingInventoryReport_Result> uspa_GetMIssingInventoryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string partName, string empName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetMIssingInventoryReport_Result>("uspa_GetMIssingInventoryReport", fromDateParameter, toDateParameter, partNameParameter, empNameParameter);
        }
    
        public virtual ObjectResult<uspa_GetMIssingInventoryReportChart_Result> uspa_GetMIssingInventoryReportChart(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string partName, string empName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_GetMIssingInventoryReportChart_Result>("uspa_GetMIssingInventoryReportChart", fromDateParameter, toDateParameter, partNameParameter, empNameParameter);
        }
    
        public virtual int uspa_GetServiceUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_GetServiceUnits");
        }
    
        public virtual ObjectResult<uspa_getUnitsForDashboard_App_Result> uspa_getUnitsForDashboard_App(Nullable<int> clientId, Nullable<int> addressID)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_getUnitsForDashboard_App_Result>("uspa_getUnitsForDashboard_App", clientIdParameter, addressIDParameter);
        }
    
        public virtual ObjectResult<uspa_MobileScreens_SelectAll_Result> uspa_MobileScreens_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_MobileScreens_SelectAll_Result>("uspa_MobileScreens_SelectAll");
        }
    
        public virtual ObjectResult<uspa_MobileScreens_SelectByID_Result> uspa_MobileScreens_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_MobileScreens_SelectByID_Result>("uspa_MobileScreens_SelectByID", idParameter);
        }
    
        public virtual int uspa_MobileScreens_Update(Nullable<int> id, string pageTitle, string description, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_MobileScreens_Update", idParameter, pageTitleParameter, descriptionParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_News_DeleteByID(Nullable<int> id, Nullable<int> deletedBy, Nullable<int> deletedByType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_News_DeleteByID", idParameter, deletedByParameter, deletedByTypeParameter);
        }
    
        public virtual ObjectResult<uspa_News_GetAll_Result> uspa_News_GetAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_News_GetAll_Result>("uspa_News_GetAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_News_GetByID_Result> uspa_News_GetByID(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_News_GetByID_Result>("uspa_News_GetByID", idParameter);
        }
    
        public virtual ObjectResult<uspa_News_GetByUrl_Result> uspa_News_GetByUrl(string url)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_News_GetByUrl_Result>("uspa_News_GetByUrl", urlParameter);
        }
    
        public virtual int uspa_News_Insert(string newsTitle, string newsUrl, string newsHeading, string shortDescription, string description, string metaTitle, string metaKeywords, string metaDescription, string additionalMeta, Nullable<System.DateTime> publishDate, Nullable<bool> isActive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var newsTitleParameter = newsTitle != null ?
                new ObjectParameter("NewsTitle", newsTitle) :
                new ObjectParameter("NewsTitle", typeof(string));
    
            var newsUrlParameter = newsUrl != null ?
                new ObjectParameter("NewsUrl", newsUrl) :
                new ObjectParameter("NewsUrl", typeof(string));
    
            var newsHeadingParameter = newsHeading != null ?
                new ObjectParameter("NewsHeading", newsHeading) :
                new ObjectParameter("NewsHeading", typeof(string));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaKeywordsParameter = metaKeywords != null ?
                new ObjectParameter("MetaKeywords", metaKeywords) :
                new ObjectParameter("MetaKeywords", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var additionalMetaParameter = additionalMeta != null ?
                new ObjectParameter("AdditionalMeta", additionalMeta) :
                new ObjectParameter("AdditionalMeta", typeof(string));
    
            var publishDateParameter = publishDate.HasValue ?
                new ObjectParameter("PublishDate", publishDate) :
                new ObjectParameter("PublishDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_News_Insert", newsTitleParameter, newsUrlParameter, newsHeadingParameter, shortDescriptionParameter, descriptionParameter, metaTitleParameter, metaKeywordsParameter, metaDescriptionParameter, additionalMetaParameter, publishDateParameter, isActiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_News_SetStatus(Nullable<long> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_News_SetStatus", idParameter, isActiveParameter);
        }
    
        public virtual int uspa_News_Update(Nullable<int> id, string newsTitle, string newsUrl, string newsHeading, string shortDescription, string description, string metaTitle, string metaKeywords, string metaDescription, string additionalMeta, Nullable<System.DateTime> publishDate, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var newsTitleParameter = newsTitle != null ?
                new ObjectParameter("NewsTitle", newsTitle) :
                new ObjectParameter("NewsTitle", typeof(string));
    
            var newsUrlParameter = newsUrl != null ?
                new ObjectParameter("NewsUrl", newsUrl) :
                new ObjectParameter("NewsUrl", typeof(string));
    
            var newsHeadingParameter = newsHeading != null ?
                new ObjectParameter("NewsHeading", newsHeading) :
                new ObjectParameter("NewsHeading", typeof(string));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaKeywordsParameter = metaKeywords != null ?
                new ObjectParameter("MetaKeywords", metaKeywords) :
                new ObjectParameter("MetaKeywords", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            var additionalMetaParameter = additionalMeta != null ?
                new ObjectParameter("AdditionalMeta", additionalMeta) :
                new ObjectParameter("AdditionalMeta", typeof(string));
    
            var publishDateParameter = publishDate.HasValue ?
                new ObjectParameter("PublishDate", publishDate) :
                new ObjectParameter("PublishDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_News_Update", idParameter, newsTitleParameter, newsUrlParameter, newsHeadingParameter, shortDescriptionParameter, descriptionParameter, metaTitleParameter, metaKeywordsParameter, metaDescriptionParameter, additionalMetaParameter, publishDateParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_NotificationMaster_GetByName_Result> uspa_NotificationMaster_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_NotificationMaster_GetByName_Result>("uspa_NotificationMaster_GetByName", nameParameter);
        }
    
        public virtual ObjectResult<uspa_NotificationMaster_SelectAll_Result> uspa_NotificationMaster_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_NotificationMaster_SelectAll_Result>("uspa_NotificationMaster_SelectAll");
        }
    
        public virtual ObjectResult<uspa_NotificationMaster_SelectByID_Result> uspa_NotificationMaster_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_NotificationMaster_SelectByID_Result>("uspa_NotificationMaster_SelectByID", idParameter);
        }
    
        public virtual int uspa_NotificationMaster_Update(Nullable<int> id, string message, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_NotificationMaster_Update", idParameter, messageParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_OrderItems_Insert(Nullable<int> orderId, Nullable<int> partId, Nullable<int> quantity)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_OrderItems_Insert", orderIdParameter, partIdParameter, quantityParameter);
        }
    
        public virtual int uspa_Orders_AddClientUnitOrder(string orderType, Nullable<int> clientId, Nullable<decimal> orderAmount, string chargeBy, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, string customerPaymentProfileId, Nullable<int> addressId)
        {
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var chargeByParameter = chargeBy != null ?
                new ObjectParameter("ChargeBy", chargeBy) :
                new ObjectParameter("ChargeBy", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var customerPaymentProfileIdParameter = customerPaymentProfileId != null ?
                new ObjectParameter("CustomerPaymentProfileId", customerPaymentProfileId) :
                new ObjectParameter("CustomerPaymentProfileId", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_AddClientUnitOrder", orderTypeParameter, clientIdParameter, orderAmountParameter, chargeByParameter, addedByParameter, addedByTypeParameter, addedDateParameter, customerPaymentProfileIdParameter, addressIdParameter);
        }
    
        public virtual int uspa_Orders_AddClientUnitOrderForSchedular(string orderType, Nullable<int> clientId, Nullable<decimal> orderAmount, string chargeBy, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, string stripeCardId, Nullable<int> addressId)
        {
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var chargeByParameter = chargeBy != null ?
                new ObjectParameter("ChargeBy", chargeBy) :
                new ObjectParameter("ChargeBy", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var stripeCardIdParameter = stripeCardId != null ?
                new ObjectParameter("StripeCardId", stripeCardId) :
                new ObjectParameter("StripeCardId", typeof(string));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_AddClientUnitOrderForSchedular", orderTypeParameter, clientIdParameter, orderAmountParameter, chargeByParameter, addedByParameter, addedByTypeParameter, addedDateParameter, stripeCardIdParameter, addressIdParameter);
        }
    
        public virtual int uspa_Orders_Delete(Nullable<int> id, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_Delete", idParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual int uspa_Orders_DeleteByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_DeleteByID", idParameter);
        }
    
        public virtual int uspa_Orders_Insert(string orderNumber, string orderType, Nullable<int> clientId, string description, Nullable<decimal> orderAmount, string chargeBy, string chequeNo, Nullable<System.DateTime> chequeDate, string accountingNotes, string chqueImageFront, string chequeImageBack, string nameOnCard, string cardType, string cardNumber, Nullable<short> expirationMonth, Nullable<int> expirationYear, string cCEmail, Nullable<bool> isEmailToClient, string customerRecommendation, string clientSignature, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var chargeByParameter = chargeBy != null ?
                new ObjectParameter("ChargeBy", chargeBy) :
                new ObjectParameter("ChargeBy", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var accountingNotesParameter = accountingNotes != null ?
                new ObjectParameter("AccountingNotes", accountingNotes) :
                new ObjectParameter("AccountingNotes", typeof(string));
    
            var chqueImageFrontParameter = chqueImageFront != null ?
                new ObjectParameter("ChqueImageFront", chqueImageFront) :
                new ObjectParameter("ChqueImageFront", typeof(string));
    
            var chequeImageBackParameter = chequeImageBack != null ?
                new ObjectParameter("ChequeImageBack", chequeImageBack) :
                new ObjectParameter("ChequeImageBack", typeof(string));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expirationMonthParameter = expirationMonth.HasValue ?
                new ObjectParameter("ExpirationMonth", expirationMonth) :
                new ObjectParameter("ExpirationMonth", typeof(short));
    
            var expirationYearParameter = expirationYear.HasValue ?
                new ObjectParameter("ExpirationYear", expirationYear) :
                new ObjectParameter("ExpirationYear", typeof(int));
    
            var cCEmailParameter = cCEmail != null ?
                new ObjectParameter("CCEmail", cCEmail) :
                new ObjectParameter("CCEmail", typeof(string));
    
            var isEmailToClientParameter = isEmailToClient.HasValue ?
                new ObjectParameter("IsEmailToClient", isEmailToClient) :
                new ObjectParameter("IsEmailToClient", typeof(bool));
    
            var customerRecommendationParameter = customerRecommendation != null ?
                new ObjectParameter("CustomerRecommendation", customerRecommendation) :
                new ObjectParameter("CustomerRecommendation", typeof(string));
    
            var clientSignatureParameter = clientSignature != null ?
                new ObjectParameter("ClientSignature", clientSignature) :
                new ObjectParameter("ClientSignature", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_Insert", orderNumberParameter, orderTypeParameter, clientIdParameter, descriptionParameter, orderAmountParameter, chargeByParameter, chequeNoParameter, chequeDateParameter, accountingNotesParameter, chqueImageFrontParameter, chequeImageBackParameter, nameOnCardParameter, cardTypeParameter, cardNumberParameter, expirationMonthParameter, expirationYearParameter, cCEmailParameter, isEmailToClientParameter, customerRecommendationParameter, clientSignatureParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Orders_SelectAll_Result> uspa_Orders_SelectAll(string clientName, string empName, string startDate, string endDate)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Orders_SelectAll_Result>("uspa_Orders_SelectAll", clientNameParameter, empNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspa_Orders_SelectByClientID_Result> uspa_Orders_SelectByClientID(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Orders_SelectByClientID_Result>("uspa_Orders_SelectByClientID", clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_Orders_SelectByID_Result> uspa_Orders_SelectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Orders_SelectByID_Result>("uspa_Orders_SelectByID", idParameter);
        }
    
        public virtual int uspa_Orders_Update(Nullable<int> id, string orderNumber, string orderType, Nullable<int> clientId, string description, Nullable<decimal> orderAmount, string chargeBy, string chequeNo, string bankName, string routingNo, Nullable<System.DateTime> chequeDate, string nameOnCard, string cardType, string cardNumber, Nullable<short> expirationMonth, Nullable<int> expirationYear, string cCEmail, Nullable<bool> isEmailToClient, string customerRecommendation, string clientSignature, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<int> deletedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var chargeByParameter = chargeBy != null ?
                new ObjectParameter("ChargeBy", chargeBy) :
                new ObjectParameter("ChargeBy", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var routingNoParameter = routingNo != null ?
                new ObjectParameter("RoutingNo", routingNo) :
                new ObjectParameter("RoutingNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expirationMonthParameter = expirationMonth.HasValue ?
                new ObjectParameter("ExpirationMonth", expirationMonth) :
                new ObjectParameter("ExpirationMonth", typeof(short));
    
            var expirationYearParameter = expirationYear.HasValue ?
                new ObjectParameter("ExpirationYear", expirationYear) :
                new ObjectParameter("ExpirationYear", typeof(int));
    
            var cCEmailParameter = cCEmail != null ?
                new ObjectParameter("CCEmail", cCEmail) :
                new ObjectParameter("CCEmail", typeof(string));
    
            var isEmailToClientParameter = isEmailToClient.HasValue ?
                new ObjectParameter("IsEmailToClient", isEmailToClient) :
                new ObjectParameter("IsEmailToClient", typeof(bool));
    
            var customerRecommendationParameter = customerRecommendation != null ?
                new ObjectParameter("CustomerRecommendation", customerRecommendation) :
                new ObjectParameter("CustomerRecommendation", typeof(string));
    
            var clientSignatureParameter = clientSignature != null ?
                new ObjectParameter("ClientSignature", clientSignature) :
                new ObjectParameter("ClientSignature", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Orders_Update", idParameter, orderNumberParameter, orderTypeParameter, clientIdParameter, descriptionParameter, orderAmountParameter, chargeByParameter, chequeNoParameter, bankNameParameter, routingNoParameter, chequeDateParameter, nameOnCardParameter, cardTypeParameter, cardNumberParameter, expirationMonthParameter, expirationYearParameter, cCEmailParameter, isEmailToClientParameter, customerRecommendationParameter, clientSignatureParameter, addedByParameter, addedByTypeParameter, addedDateParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter, isDeletedParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual int uspa_PageBlocks_Delete(Nullable<int> cMSPageId)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PageBlocks_Delete", cMSPageIdParameter);
        }
    
        public virtual int uspa_PageBlocks_Insert(Nullable<int> cMSPageId, Nullable<int> blockId)
        {
            var cMSPageIdParameter = cMSPageId.HasValue ?
                new ObjectParameter("CMSPageId", cMSPageId) :
                new ObjectParameter("CMSPageId", typeof(int));
    
            var blockIdParameter = blockId.HasValue ?
                new ObjectParameter("BlockId", blockId) :
                new ObjectParameter("BlockId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PageBlocks_Insert", cMSPageIdParameter, blockIdParameter);
        }
    
        public virtual int uspa_Partner_ChangePassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_ChangePassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_CheckLogin_Result> uspa_Partner_CheckLogin(string partnername, string password)
        {
            var partnernameParameter = partnername != null ?
                new ObjectParameter("Partnername", partnername) :
                new ObjectParameter("Partnername", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_CheckLogin_Result>("uspa_Partner_CheckLogin", partnernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> uspa_Partner_CheckResetPasswordLink(string passwordUrl)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_Partner_CheckResetPasswordLink", passwordUrlParameter);
        }
    
        public virtual int uspa_Partner_ForgotPasswordURL(string email, string passwordUrl)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_ForgotPasswordURL", emailParameter, passwordUrlParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_GetByAffiliateId_Result> uspa_Partner_GetByAffiliateId(string affiliateId)
        {
            var affiliateIdParameter = affiliateId != null ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_GetByAffiliateId_Result>("uspa_Partner_GetByAffiliateId", affiliateIdParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_GetById_Result> uspa_Partner_GetById(Nullable<int> partnerId)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_GetById_Result>("uspa_Partner_GetById", partnerIdParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_GetPartnerByEmail_Result> uspa_Partner_GetPartnerByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_GetPartnerByEmail_Result>("uspa_Partner_GetPartnerByEmail", emailParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_GetPartnerByPartnerName_Result> uspa_Partner_GetPartnerByPartnerName(string partnername, string email)
        {
            var partnernameParameter = partnername != null ?
                new ObjectParameter("Partnername", partnername) :
                new ObjectParameter("Partnername", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_GetPartnerByPartnerName_Result>("uspa_Partner_GetPartnerByPartnerName", partnernameParameter, emailParameter);
        }
    
        public virtual int uspa_Partner_Insert(Nullable<int> roleId, string firstName, string lastName, string userName, string email, string password, string companyName, string image, string address, Nullable<int> citiesId, string zipCode, Nullable<int> stateId, string phoneNumber, string assignedAffiliateId, Nullable<double> salesCommission, Nullable<bool> isActive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var assignedAffiliateIdParameter = assignedAffiliateId != null ?
                new ObjectParameter("AssignedAffiliateId", assignedAffiliateId) :
                new ObjectParameter("AssignedAffiliateId", typeof(string));
    
            var salesCommissionParameter = salesCommission.HasValue ?
                new ObjectParameter("SalesCommission", salesCommission) :
                new ObjectParameter("SalesCommission", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_Insert", roleIdParameter, firstNameParameter, lastNameParameter, userNameParameter, emailParameter, passwordParameter, companyNameParameter, imageParameter, addressParameter, citiesIdParameter, zipCodeParameter, stateIdParameter, phoneNumberParameter, assignedAffiliateIdParameter, salesCommissionParameter, isActiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_Partner_ResetPassword(string passwordUrl, string newPassword)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_ResetPassword", passwordUrlParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<uspa_Partner_SelectAll_Result> uspa_Partner_SelectAll(Nullable<bool> isActive, string partnerName, string sortField, string sortDirection)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Partner_SelectAll_Result>("uspa_Partner_SelectAll", isActiveParameter, partnerNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual int uspa_Partner_SetStatus(Nullable<int> partnerId, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_SetStatus", partnerIdParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Partner_Update(Nullable<int> id, string firstName, string lastName, string userName, string email, string password, string companyName, string image, string address, Nullable<int> citiesId, Nullable<int> stateId, string zipCode, string phoneNumber, string assignedAffiliateId, Nullable<double> salesCommission, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var assignedAffiliateIdParameter = assignedAffiliateId != null ?
                new ObjectParameter("AssignedAffiliateId", assignedAffiliateId) :
                new ObjectParameter("AssignedAffiliateId", typeof(string));
    
            var salesCommissionParameter = salesCommission.HasValue ?
                new ObjectParameter("SalesCommission", salesCommission) :
                new ObjectParameter("SalesCommission", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_Update", idParameter, firstNameParameter, lastNameParameter, userNameParameter, emailParameter, passwordParameter, companyNameParameter, imageParameter, addressParameter, citiesIdParameter, stateIdParameter, zipCodeParameter, phoneNumberParameter, assignedAffiliateIdParameter, salesCommissionParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Partner_UpdateProfile(string firstName, string lastName, string userName, string email, string companyName, string image, string address, Nullable<int> citiesId, Nullable<int> stateId, string zipCode, string phoneNumber, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Partner_UpdateProfile", firstNameParameter, lastNameParameter, userNameParameter, emailParameter, companyNameParameter, imageParameter, addressParameter, citiesIdParameter, stateIdParameter, zipCodeParameter, phoneNumberParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_PartnerClientProfit_GetByClientId(Nullable<int> affiliateId, Nullable<int> clientId, Nullable<int> month, Nullable<int> year)
        {
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PartnerClientProfit_GetByClientId", affiliateIdParameter, clientIdParameter, monthParameter, yearParameter);
        }
    
        public virtual int uspa_PartnerPortal_GetClientList(Nullable<int> partnerId)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PartnerPortal_GetClientList", partnerIdParameter);
        }
    
        public virtual ObjectResult<uspa_PartnerTicketConversation_GetByTicketId_Result> uspa_PartnerTicketConversation_GetByTicketId(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PartnerTicketConversation_GetByTicketId_Result>("uspa_PartnerTicketConversation_GetByTicketId", ticketIdParameter);
        }
    
        public virtual int uspa_PartnerTicketConversation_Insert(Nullable<int> ticketId, string message, Nullable<int> submittedBy, Nullable<int> submittedByType, Nullable<System.DateTime> messageDate)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var submittedByTypeParameter = submittedByType.HasValue ?
                new ObjectParameter("SubmittedByType", submittedByType) :
                new ObjectParameter("SubmittedByType", typeof(int));
    
            var messageDateParameter = messageDate.HasValue ?
                new ObjectParameter("MessageDate", messageDate) :
                new ObjectParameter("MessageDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PartnerTicketConversation_Insert", ticketIdParameter, messageParameter, submittedByParameter, submittedByTypeParameter, messageDateParameter);
        }
    
        public virtual ObjectResult<uspa_PartnerTicketRequest_GetAll_Result> uspa_PartnerTicketRequest_GetAll(string partnerName, string startDate, string endDate)
        {
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PartnerTicketRequest_GetAll_Result>("uspa_PartnerTicketRequest_GetAll", partnerNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspa_PartnerTicketRequest_GetAllByPartnerId_Result> uspa_PartnerTicketRequest_GetAllByPartnerId(Nullable<int> partnerId)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PartnerTicketRequest_GetAllByPartnerId_Result>("uspa_PartnerTicketRequest_GetAllByPartnerId", partnerIdParameter);
        }
    
        public virtual ObjectResult<uspa_PartnerTicketRequest_GetById_Result> uspa_PartnerTicketRequest_GetById(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PartnerTicketRequest_GetById_Result>("uspa_PartnerTicketRequest_GetById", ticketIdParameter);
        }
    
        public virtual int uspa_PartnerTicketRequest_Insert(Nullable<int> partnerId, string ticketType, string subject, string notes, Nullable<System.DateTime> addedDate)
        {
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var ticketTypeParameter = ticketType != null ?
                new ObjectParameter("TicketType", ticketType) :
                new ObjectParameter("TicketType", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PartnerTicketRequest_Insert", partnerIdParameter, ticketTypeParameter, subjectParameter, notesParameter, addedDateParameter);
        }
    
        public virtual int uspa_PartnerTicketRequest_UpdateStatus(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PartnerTicketRequest_UpdateStatus", ticketIdParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_CheckParts_Result> uspa_Parts_CheckParts(Nullable<int> partId, string partName)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_CheckParts_Result>("uspa_Parts_CheckParts", partIdParameter, partNameParameter);
        }
    
        public virtual int uspa_Parts_DeleteByID(Nullable<int> partId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Parts_DeleteByID", partIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_GetAll_Result> uspa_Parts_GetAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_GetAll_Result>("uspa_Parts_GetAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_GetAllByPartType_Result> uspa_Parts_GetAllByPartType(string partTypeName)
        {
            var partTypeNameParameter = partTypeName != null ?
                new ObjectParameter("PartTypeName", partTypeName) :
                new ObjectParameter("PartTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_GetAllByPartType_Result>("uspa_Parts_GetAllByPartType", partTypeNameParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_GetAllByPartTypeId_Result> uspa_Parts_GetAllByPartTypeId(Nullable<int> partTypeId, string partname, string inventoryType)
        {
            var partTypeIdParameter = partTypeId.HasValue ?
                new ObjectParameter("PartTypeId", partTypeId) :
                new ObjectParameter("PartTypeId", typeof(int));
    
            var partnameParameter = partname != null ?
                new ObjectParameter("Partname", partname) :
                new ObjectParameter("Partname", typeof(string));
    
            var inventoryTypeParameter = inventoryType != null ?
                new ObjectParameter("InventoryType", inventoryType) :
                new ObjectParameter("InventoryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_GetAllByPartTypeId_Result>("uspa_Parts_GetAllByPartTypeId", partTypeIdParameter, partnameParameter, inventoryTypeParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_GetByPartName_Result> uspa_Parts_GetByPartName(string partName)
        {
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_GetByPartName_Result>("uspa_Parts_GetByPartName", partNameParameter);
        }
    
        public virtual int uspa_Parts_Insert(string inventoryType, Nullable<int> dailyPartListMasterId, string name, string size, string description, Nullable<int> inboundQuantity, Nullable<int> receivedQuantity, Nullable<int> totalAcquiredQuantity, Nullable<int> inStockQuantity, Nullable<int> reservedQuantity, Nullable<decimal> purchasedPrice, Nullable<decimal> sellingPrice, Nullable<int> minReorderQuantity, Nullable<int> reorderQuantity, Nullable<bool> status, Nullable<bool> isDefault, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var inventoryTypeParameter = inventoryType != null ?
                new ObjectParameter("InventoryType", inventoryType) :
                new ObjectParameter("InventoryType", typeof(string));
    
            var dailyPartListMasterIdParameter = dailyPartListMasterId.HasValue ?
                new ObjectParameter("DailyPartListMasterId", dailyPartListMasterId) :
                new ObjectParameter("DailyPartListMasterId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var inboundQuantityParameter = inboundQuantity.HasValue ?
                new ObjectParameter("InboundQuantity", inboundQuantity) :
                new ObjectParameter("InboundQuantity", typeof(int));
    
            var receivedQuantityParameter = receivedQuantity.HasValue ?
                new ObjectParameter("ReceivedQuantity", receivedQuantity) :
                new ObjectParameter("ReceivedQuantity", typeof(int));
    
            var totalAcquiredQuantityParameter = totalAcquiredQuantity.HasValue ?
                new ObjectParameter("TotalAcquiredQuantity", totalAcquiredQuantity) :
                new ObjectParameter("TotalAcquiredQuantity", typeof(int));
    
            var inStockQuantityParameter = inStockQuantity.HasValue ?
                new ObjectParameter("InStockQuantity", inStockQuantity) :
                new ObjectParameter("InStockQuantity", typeof(int));
    
            var reservedQuantityParameter = reservedQuantity.HasValue ?
                new ObjectParameter("ReservedQuantity", reservedQuantity) :
                new ObjectParameter("ReservedQuantity", typeof(int));
    
            var purchasedPriceParameter = purchasedPrice.HasValue ?
                new ObjectParameter("PurchasedPrice", purchasedPrice) :
                new ObjectParameter("PurchasedPrice", typeof(decimal));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(decimal));
    
            var minReorderQuantityParameter = minReorderQuantity.HasValue ?
                new ObjectParameter("MinReorderQuantity", minReorderQuantity) :
                new ObjectParameter("MinReorderQuantity", typeof(int));
    
            var reorderQuantityParameter = reorderQuantity.HasValue ?
                new ObjectParameter("ReorderQuantity", reorderQuantity) :
                new ObjectParameter("ReorderQuantity", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Parts_Insert", inventoryTypeParameter, dailyPartListMasterIdParameter, nameParameter, sizeParameter, descriptionParameter, inboundQuantityParameter, receivedQuantityParameter, totalAcquiredQuantityParameter, inStockQuantityParameter, reservedQuantityParameter, purchasedPriceParameter, sellingPriceParameter, minReorderQuantityParameter, reorderQuantityParameter, statusParameter, isDefaultParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Parts_SelectByID_Result> uspa_Parts_SelectByID(Nullable<int> partId)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Parts_SelectByID_Result>("uspa_Parts_SelectByID", partIdParameter);
        }
    
        public virtual int uspa_Parts_SetStatus(Nullable<bool> isActive, Nullable<int> partId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Parts_SetStatus", isActiveParameter, partIdParameter);
        }
    
        public virtual int uspa_Parts_Update(Nullable<int> id, string inventoryType, Nullable<int> dailyPartListMasterId, string name, string size, string description, Nullable<int> inboundQuantity, Nullable<int> receivedQuantity, Nullable<int> totalAcquiredQuantity, Nullable<int> inStockQuantity, Nullable<int> reservedQuantity, Nullable<decimal> purchasedPrice, Nullable<decimal> sellingPrice, Nullable<int> minReorderQuantity, Nullable<int> reorderQuantity, Nullable<bool> status, Nullable<bool> isDefault, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var inventoryTypeParameter = inventoryType != null ?
                new ObjectParameter("InventoryType", inventoryType) :
                new ObjectParameter("InventoryType", typeof(string));
    
            var dailyPartListMasterIdParameter = dailyPartListMasterId.HasValue ?
                new ObjectParameter("DailyPartListMasterId", dailyPartListMasterId) :
                new ObjectParameter("DailyPartListMasterId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var inboundQuantityParameter = inboundQuantity.HasValue ?
                new ObjectParameter("InboundQuantity", inboundQuantity) :
                new ObjectParameter("InboundQuantity", typeof(int));
    
            var receivedQuantityParameter = receivedQuantity.HasValue ?
                new ObjectParameter("ReceivedQuantity", receivedQuantity) :
                new ObjectParameter("ReceivedQuantity", typeof(int));
    
            var totalAcquiredQuantityParameter = totalAcquiredQuantity.HasValue ?
                new ObjectParameter("TotalAcquiredQuantity", totalAcquiredQuantity) :
                new ObjectParameter("TotalAcquiredQuantity", typeof(int));
    
            var inStockQuantityParameter = inStockQuantity.HasValue ?
                new ObjectParameter("InStockQuantity", inStockQuantity) :
                new ObjectParameter("InStockQuantity", typeof(int));
    
            var reservedQuantityParameter = reservedQuantity.HasValue ?
                new ObjectParameter("ReservedQuantity", reservedQuantity) :
                new ObjectParameter("ReservedQuantity", typeof(int));
    
            var purchasedPriceParameter = purchasedPrice.HasValue ?
                new ObjectParameter("PurchasedPrice", purchasedPrice) :
                new ObjectParameter("PurchasedPrice", typeof(decimal));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(decimal));
    
            var minReorderQuantityParameter = minReorderQuantity.HasValue ?
                new ObjectParameter("MinReorderQuantity", minReorderQuantity) :
                new ObjectParameter("MinReorderQuantity", typeof(int));
    
            var reorderQuantityParameter = reorderQuantity.HasValue ?
                new ObjectParameter("ReorderQuantity", reorderQuantity) :
                new ObjectParameter("ReorderQuantity", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Parts_Update", idParameter, inventoryTypeParameter, dailyPartListMasterIdParameter, nameParameter, sizeParameter, descriptionParameter, inboundQuantityParameter, receivedQuantityParameter, totalAcquiredQuantityParameter, inStockQuantityParameter, reservedQuantityParameter, purchasedPriceParameter, sellingPriceParameter, minReorderQuantityParameter, reorderQuantityParameter, statusParameter, isDefaultParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Parts_UpdateInStock(Nullable<int> partId, Nullable<int> quantity)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Parts_UpdateInStock", partIdParameter, quantityParameter);
        }
    
        public virtual ObjectResult<uspa_PendingServiceScheduleFromAdmin_Result> uspa_PendingServiceScheduleFromAdmin(Nullable<long> serviceId, Nullable<System.DateTime> statusChangeDate, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, string cusNote, string dispNotes, string empNote, string status, Nullable<int> scheduledBy, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate, string units)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var statusChangeDateParameter = statusChangeDate.HasValue ?
                new ObjectParameter("StatusChangeDate", statusChangeDate) :
                new ObjectParameter("StatusChangeDate", typeof(System.DateTime));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var cusNoteParameter = cusNote != null ?
                new ObjectParameter("CusNote", cusNote) :
                new ObjectParameter("CusNote", typeof(string));
    
            var dispNotesParameter = dispNotes != null ?
                new ObjectParameter("DispNotes", dispNotes) :
                new ObjectParameter("DispNotes", typeof(string));
    
            var empNoteParameter = empNote != null ?
                new ObjectParameter("EmpNote", empNote) :
                new ObjectParameter("EmpNote", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var scheduledByParameter = scheduledBy.HasValue ?
                new ObjectParameter("ScheduledBy", scheduledBy) :
                new ObjectParameter("ScheduledBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PendingServiceScheduleFromAdmin_Result>("uspa_PendingServiceScheduleFromAdmin", serviceIdParameter, statusChangeDateParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, cusNoteParameter, dispNotesParameter, empNoteParameter, statusParameter, scheduledByParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter, unitsParameter);
        }
    
        public virtual ObjectResult<uspa_PendingServiceScheduleFromAdmin_Old_Result> uspa_PendingServiceScheduleFromAdmin_Old(Nullable<long> serviceId, Nullable<System.DateTime> statusChangeDate, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, string cusNote, string dispNotes, string empNote, string status, Nullable<int> scheduledBy, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate, string units)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var statusChangeDateParameter = statusChangeDate.HasValue ?
                new ObjectParameter("StatusChangeDate", statusChangeDate) :
                new ObjectParameter("StatusChangeDate", typeof(System.DateTime));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var cusNoteParameter = cusNote != null ?
                new ObjectParameter("CusNote", cusNote) :
                new ObjectParameter("CusNote", typeof(string));
    
            var dispNotesParameter = dispNotes != null ?
                new ObjectParameter("DispNotes", dispNotes) :
                new ObjectParameter("DispNotes", typeof(string));
    
            var empNoteParameter = empNote != null ?
                new ObjectParameter("EmpNote", empNote) :
                new ObjectParameter("EmpNote", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var scheduledByParameter = scheduledBy.HasValue ?
                new ObjectParameter("ScheduledBy", scheduledBy) :
                new ObjectParameter("ScheduledBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PendingServiceScheduleFromAdmin_Old_Result>("uspa_PendingServiceScheduleFromAdmin_Old", serviceIdParameter, statusChangeDateParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, cusNoteParameter, dispNotesParameter, empNoteParameter, statusParameter, scheduledByParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter, unitsParameter);
        }
    
        public virtual int uspa_Plan_Delete(Nullable<int> planTypeId)
        {
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Plan_Delete", planTypeIdParameter);
        }
    
        public virtual ObjectResult<uspa_Plan_GetAll_Result> uspa_Plan_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Plan_GetAll_Result>("uspa_Plan_GetAll");
        }
    
        public virtual ObjectResult<uspa_Plan_GetAll_New_Result> uspa_Plan_GetAll_New()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Plan_GetAll_New_Result>("uspa_Plan_GetAll_New");
        }
    
        public virtual ObjectResult<uspa_Plan_GetAllActive_Result> uspa_Plan_GetAllActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Plan_GetAllActive_Result>("uspa_Plan_GetAllActive");
        }
    
        public virtual ObjectResult<uspa_Plan_GetByPlanTypeId_Result> uspa_Plan_GetByPlanTypeId(Nullable<int> planTypeId)
        {
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Plan_GetByPlanTypeId_Result>("uspa_Plan_GetByPlanTypeId", planTypeIdParameter);
        }
    
        public virtual int uspa_Plan_Insert(Nullable<int> planTypeId, Nullable<bool> packageType, string name, string shortDescription, string packageDisplayName, string description, Nullable<decimal> pricePerMonth, Nullable<short> durationInMonth, Nullable<short> numberOfService, Nullable<short> firstServiceWithinDays, Nullable<int> otherServiceScheduleDaysGap, Nullable<int> drivetime, Nullable<int> serviceTimeForFirstUnit, Nullable<int> serviceTimeForAdditionalUnits, Nullable<bool> showSpecialPrice, Nullable<bool> showAutoRenewal, Nullable<decimal> discountPrice, string image, Nullable<bool> status, string backGroundColorRGB, string backGroundColorHGS, string stripePlanId, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var packageTypeParameter = packageType.HasValue ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var packageDisplayNameParameter = packageDisplayName != null ?
                new ObjectParameter("PackageDisplayName", packageDisplayName) :
                new ObjectParameter("PackageDisplayName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pricePerMonthParameter = pricePerMonth.HasValue ?
                new ObjectParameter("PricePerMonth", pricePerMonth) :
                new ObjectParameter("PricePerMonth", typeof(decimal));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(short));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(short));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(short));
    
            var otherServiceScheduleDaysGapParameter = otherServiceScheduleDaysGap.HasValue ?
                new ObjectParameter("OtherServiceScheduleDaysGap", otherServiceScheduleDaysGap) :
                new ObjectParameter("OtherServiceScheduleDaysGap", typeof(int));
    
            var drivetimeParameter = drivetime.HasValue ?
                new ObjectParameter("Drivetime", drivetime) :
                new ObjectParameter("Drivetime", typeof(int));
    
            var serviceTimeForFirstUnitParameter = serviceTimeForFirstUnit.HasValue ?
                new ObjectParameter("ServiceTimeForFirstUnit", serviceTimeForFirstUnit) :
                new ObjectParameter("ServiceTimeForFirstUnit", typeof(int));
    
            var serviceTimeForAdditionalUnitsParameter = serviceTimeForAdditionalUnits.HasValue ?
                new ObjectParameter("ServiceTimeForAdditionalUnits", serviceTimeForAdditionalUnits) :
                new ObjectParameter("ServiceTimeForAdditionalUnits", typeof(int));
    
            var showSpecialPriceParameter = showSpecialPrice.HasValue ?
                new ObjectParameter("ShowSpecialPrice", showSpecialPrice) :
                new ObjectParameter("ShowSpecialPrice", typeof(bool));
    
            var showAutoRenewalParameter = showAutoRenewal.HasValue ?
                new ObjectParameter("ShowAutoRenewal", showAutoRenewal) :
                new ObjectParameter("ShowAutoRenewal", typeof(bool));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var backGroundColorRGBParameter = backGroundColorRGB != null ?
                new ObjectParameter("BackGroundColorRGB", backGroundColorRGB) :
                new ObjectParameter("BackGroundColorRGB", typeof(string));
    
            var backGroundColorHGSParameter = backGroundColorHGS != null ?
                new ObjectParameter("BackGroundColorHGS", backGroundColorHGS) :
                new ObjectParameter("BackGroundColorHGS", typeof(string));
    
            var stripePlanIdParameter = stripePlanId != null ?
                new ObjectParameter("StripePlanId", stripePlanId) :
                new ObjectParameter("StripePlanId", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Plan_Insert", planTypeIdParameter, packageTypeParameter, nameParameter, shortDescriptionParameter, packageDisplayNameParameter, descriptionParameter, pricePerMonthParameter, durationInMonthParameter, numberOfServiceParameter, firstServiceWithinDaysParameter, otherServiceScheduleDaysGapParameter, drivetimeParameter, serviceTimeForFirstUnitParameter, serviceTimeForAdditionalUnitsParameter, showSpecialPriceParameter, showAutoRenewalParameter, discountPriceParameter, imageParameter, statusParameter, backGroundColorRGBParameter, backGroundColorHGSParameter, stripePlanIdParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_Plan_SetStatus(Nullable<bool> isActive, Nullable<int> planTypeId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Plan_SetStatus", isActiveParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_Plan_Update(Nullable<int> id, Nullable<int> planTypeId, Nullable<bool> packageType, string name, string shortDescription, string packageDisplayName, string description, Nullable<decimal> pricePerMonth, Nullable<short> durationInMonth, Nullable<short> numberOfService, Nullable<short> firstServiceWithinDays, Nullable<int> otherServiceScheduleDaysGap, Nullable<int> drivetime, Nullable<int> serviceTimeForFirstUnit, Nullable<int> serviceTimeForAdditionalUnits, Nullable<bool> showSpecialPrice, Nullable<bool> showAutoRenewal, Nullable<decimal> discountPrice, string image, Nullable<bool> status, string backGroundColorRGB, string backGroundColorHGS, string stripePlanId, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var packageTypeParameter = packageType.HasValue ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var packageDisplayNameParameter = packageDisplayName != null ?
                new ObjectParameter("PackageDisplayName", packageDisplayName) :
                new ObjectParameter("PackageDisplayName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pricePerMonthParameter = pricePerMonth.HasValue ?
                new ObjectParameter("PricePerMonth", pricePerMonth) :
                new ObjectParameter("PricePerMonth", typeof(decimal));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(short));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(short));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(short));
    
            var otherServiceScheduleDaysGapParameter = otherServiceScheduleDaysGap.HasValue ?
                new ObjectParameter("OtherServiceScheduleDaysGap", otherServiceScheduleDaysGap) :
                new ObjectParameter("OtherServiceScheduleDaysGap", typeof(int));
    
            var drivetimeParameter = drivetime.HasValue ?
                new ObjectParameter("Drivetime", drivetime) :
                new ObjectParameter("Drivetime", typeof(int));
    
            var serviceTimeForFirstUnitParameter = serviceTimeForFirstUnit.HasValue ?
                new ObjectParameter("ServiceTimeForFirstUnit", serviceTimeForFirstUnit) :
                new ObjectParameter("ServiceTimeForFirstUnit", typeof(int));
    
            var serviceTimeForAdditionalUnitsParameter = serviceTimeForAdditionalUnits.HasValue ?
                new ObjectParameter("ServiceTimeForAdditionalUnits", serviceTimeForAdditionalUnits) :
                new ObjectParameter("ServiceTimeForAdditionalUnits", typeof(int));
    
            var showSpecialPriceParameter = showSpecialPrice.HasValue ?
                new ObjectParameter("ShowSpecialPrice", showSpecialPrice) :
                new ObjectParameter("ShowSpecialPrice", typeof(bool));
    
            var showAutoRenewalParameter = showAutoRenewal.HasValue ?
                new ObjectParameter("ShowAutoRenewal", showAutoRenewal) :
                new ObjectParameter("ShowAutoRenewal", typeof(bool));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var backGroundColorRGBParameter = backGroundColorRGB != null ?
                new ObjectParameter("BackGroundColorRGB", backGroundColorRGB) :
                new ObjectParameter("BackGroundColorRGB", typeof(string));
    
            var backGroundColorHGSParameter = backGroundColorHGS != null ?
                new ObjectParameter("BackGroundColorHGS", backGroundColorHGS) :
                new ObjectParameter("BackGroundColorHGS", typeof(string));
    
            var stripePlanIdParameter = stripePlanId != null ?
                new ObjectParameter("StripePlanId", stripePlanId) :
                new ObjectParameter("StripePlanId", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Plan_Update", idParameter, planTypeIdParameter, packageTypeParameter, nameParameter, shortDescriptionParameter, packageDisplayNameParameter, descriptionParameter, pricePerMonthParameter, durationInMonthParameter, numberOfServiceParameter, firstServiceWithinDaysParameter, otherServiceScheduleDaysGapParameter, drivetimeParameter, serviceTimeForFirstUnitParameter, serviceTimeForAdditionalUnitsParameter, showSpecialPriceParameter, showAutoRenewalParameter, discountPriceParameter, imageParameter, statusParameter, backGroundColorRGBParameter, backGroundColorHGSParameter, stripePlanIdParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_PlanExpirationScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PlanExpirationScheduler");
        }
    
        public virtual ObjectResult<uspa_PlanType_GetAll_Result> uspa_PlanType_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PlanType_GetAll_Result>("uspa_PlanType_GetAll");
        }
    
        public virtual ObjectResult<uspa_PlanType_GetAllForPlan_Result> uspa_PlanType_GetAllForPlan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_PlanType_GetAllForPlan_Result>("uspa_PlanType_GetAllForPlan");
        }
    
        public virtual int uspa_PlanType_UpdateTimeSlot(Nullable<int> planTypeId, string timeSlot1, string timeSlot2)
        {
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            var timeSlot1Parameter = timeSlot1 != null ?
                new ObjectParameter("TimeSlot1", timeSlot1) :
                new ObjectParameter("TimeSlot1", typeof(string));
    
            var timeSlot2Parameter = timeSlot2 != null ?
                new ObjectParameter("TimeSlot2", timeSlot2) :
                new ObjectParameter("TimeSlot2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_PlanType_UpdateTimeSlot", planTypeIdParameter, timeSlot1Parameter, timeSlot2Parameter);
        }
    
        public virtual ObjectResult<uspa_ReminderToClientForServiceScheduler_Result> uspa_ReminderToClientForServiceScheduler(Nullable<int> notification, Nullable<bool> inMorning)
        {
            var notificationParameter = notification.HasValue ?
                new ObjectParameter("Notification", notification) :
                new ObjectParameter("Notification", typeof(int));
    
            var inMorningParameter = inMorning.HasValue ?
                new ObjectParameter("InMorning", inMorning) :
                new ObjectParameter("InMorning", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ReminderToClientForServiceScheduler_Result>("uspa_ReminderToClientForServiceScheduler", notificationParameter, inMorningParameter);
        }
    
        public virtual ObjectResult<uspa_RenewCancel_Subscription_Result> uspa_RenewCancel_Subscription(string clientName, string status, string paymentMethod, string subscriptionStatus)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var subscriptionStatusParameter = subscriptionStatus != null ?
                new ObjectParameter("SubscriptionStatus", subscriptionStatus) :
                new ObjectParameter("SubscriptionStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RenewCancel_Subscription_Result>("uspa_RenewCancel_Subscription", clientNameParameter, statusParameter, paymentMethodParameter, subscriptionStatusParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServices_GetById_Result> uspa_RequestedServices_GetById(Nullable<long> requestServiceId, Nullable<int> clientId)
        {
            var requestServiceIdParameter = requestServiceId.HasValue ?
                new ObjectParameter("RequestServiceId", requestServiceId) :
                new ObjectParameter("RequestServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServices_GetById_Result>("uspa_RequestedServices_GetById", requestServiceIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServices_GetSercicesByRequestId_Result> uspa_RequestedServices_GetSercicesByRequestId(Nullable<long> requestServiceId, Nullable<int> clientId)
        {
            var requestServiceIdParameter = requestServiceId.HasValue ?
                new ObjectParameter("RequestServiceId", requestServiceId) :
                new ObjectParameter("RequestServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServices_GetSercicesByRequestId_Result>("uspa_RequestedServices_GetSercicesByRequestId", requestServiceIdParameter, clientIdParameter);
        }
    
        public virtual int uspa_RequestedServices_Insert(Nullable<int> clientId, Nullable<int> addressId, string purposeOfVisit, string serviceRequestedTime, Nullable<System.DateTime> serviceRequestedOn, string notes, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var serviceRequestedTimeParameter = serviceRequestedTime != null ?
                new ObjectParameter("ServiceRequestedTime", serviceRequestedTime) :
                new ObjectParameter("ServiceRequestedTime", typeof(string));
    
            var serviceRequestedOnParameter = serviceRequestedOn.HasValue ?
                new ObjectParameter("ServiceRequestedOn", serviceRequestedOn) :
                new ObjectParameter("ServiceRequestedOn", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServices_Insert", clientIdParameter, addressIdParameter, purposeOfVisitParameter, serviceRequestedTimeParameter, serviceRequestedOnParameter, notesParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_RequestedServices_Update(Nullable<long> id, Nullable<int> clientId, Nullable<int> addressId, string purposeOfVisit, string serviceRequestedTime, Nullable<System.DateTime> serviceRequestedOn, string notes, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var serviceRequestedTimeParameter = serviceRequestedTime != null ?
                new ObjectParameter("ServiceRequestedTime", serviceRequestedTime) :
                new ObjectParameter("ServiceRequestedTime", typeof(string));
    
            var serviceRequestedOnParameter = serviceRequestedOn.HasValue ?
                new ObjectParameter("ServiceRequestedOn", serviceRequestedOn) :
                new ObjectParameter("ServiceRequestedOn", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServices_Update", idParameter, clientIdParameter, addressIdParameter, purposeOfVisitParameter, serviceRequestedTimeParameter, serviceRequestedOnParameter, notesParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_RequestedServices_UpdateServiceId(Nullable<long> serviceId, Nullable<long> reqServiceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var reqServiceIdParameter = reqServiceId.HasValue ?
                new ObjectParameter("ReqServiceId", reqServiceId) :
                new ObjectParameter("ReqServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServices_UpdateServiceId", serviceIdParameter, reqServiceIdParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServiceScheduleFromAdmin_Result> uspa_RequestedServiceScheduleFromAdmin(Nullable<long> requestedServiceId, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleTime, string cusNote, string dispNotes, string empNote, string units, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleTimeParameter = scheduleTime != null ?
                new ObjectParameter("ScheduleTime", scheduleTime) :
                new ObjectParameter("ScheduleTime", typeof(string));
    
            var cusNoteParameter = cusNote != null ?
                new ObjectParameter("CusNote", cusNote) :
                new ObjectParameter("CusNote", typeof(string));
    
            var dispNotesParameter = dispNotes != null ?
                new ObjectParameter("DispNotes", dispNotes) :
                new ObjectParameter("DispNotes", typeof(string));
    
            var empNoteParameter = empNote != null ?
                new ObjectParameter("EmpNote", empNote) :
                new ObjectParameter("EmpNote", typeof(string));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServiceScheduleFromAdmin_Result>("uspa_RequestedServiceScheduleFromAdmin", requestedServiceIdParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleTimeParameter, cusNoteParameter, dispNotesParameter, empNoteParameter, unitsParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServiceScheduleFromAdmin_Old_Result> uspa_RequestedServiceScheduleFromAdmin_Old(Nullable<long> serviceId, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, Nullable<int> scheduledBy, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var scheduledByParameter = scheduledBy.HasValue ?
                new ObjectParameter("ScheduledBy", scheduledBy) :
                new ObjectParameter("ScheduledBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServiceScheduleFromAdmin_Old_Result>("uspa_RequestedServiceScheduleFromAdmin_Old", serviceIdParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, scheduledByParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_RequestedServiceToServiceScheduler_Old_Result> uspa_RequestedServiceToServiceScheduler_Old(Nullable<long> serviceId, Nullable<long> requestedServiceId, Nullable<int> clientId, Nullable<int> addressId, string purposeOfVisit, Nullable<System.DateTime> requestedServiceDate, string requestedServiceTime)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var requestedServiceIdParameter = requestedServiceId.HasValue ?
                new ObjectParameter("RequestedServiceId", requestedServiceId) :
                new ObjectParameter("RequestedServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var requestedServiceDateParameter = requestedServiceDate.HasValue ?
                new ObjectParameter("RequestedServiceDate", requestedServiceDate) :
                new ObjectParameter("RequestedServiceDate", typeof(System.DateTime));
    
            var requestedServiceTimeParameter = requestedServiceTime != null ?
                new ObjectParameter("RequestedServiceTime", requestedServiceTime) :
                new ObjectParameter("RequestedServiceTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RequestedServiceToServiceScheduler_Old_Result>("uspa_RequestedServiceToServiceScheduler_Old", serviceIdParameter, requestedServiceIdParameter, clientIdParameter, addressIdParameter, purposeOfVisitParameter, requestedServiceDateParameter, requestedServiceTimeParameter);
        }
    
        public virtual int uspa_RequestedServiceUnits_DeleteByServiceId(Nullable<long> requestServiceId)
        {
            var requestServiceIdParameter = requestServiceId.HasValue ?
                new ObjectParameter("RequestServiceId", requestServiceId) :
                new ObjectParameter("RequestServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServiceUnits_DeleteByServiceId", requestServiceIdParameter);
        }
    
        public virtual int uspa_RequestedServiceUnits_GetByRequestedServiceId(Nullable<long> requestServiceId)
        {
            var requestServiceIdParameter = requestServiceId.HasValue ?
                new ObjectParameter("RequestServiceId", requestServiceId) :
                new ObjectParameter("RequestServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServiceUnits_GetByRequestedServiceId", requestServiceIdParameter);
        }
    
        public virtual int uspa_RequestedServiceUnits_Insert(Nullable<long> serviceId, Nullable<int> unitId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RequestedServiceUnits_Insert", serviceIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<uspa_RescheduledServiceSchedule_Result> uspa_RescheduledServiceSchedule(Nullable<long> serviceId, Nullable<int> clientId, Nullable<int> addressId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RescheduledServiceSchedule_Result>("uspa_RescheduledServiceSchedule", serviceIdParameter, clientIdParameter, addressIdParameter);
        }
    
        public virtual ObjectResult<uspa_RescheduleService_GetAllByServiceId_Result> uspa_RescheduleService_GetAllByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_RescheduleService_GetAllByServiceId_Result>("uspa_RescheduleService_GetAllByServiceId", serviceIdParameter);
        }
    
        public virtual int uspa_RescheduleService_Insert(Nullable<long> serviceId, Nullable<System.DateTime> rescheduleDate, string rescheduletime, string reason, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate, string status)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var rescheduleDateParameter = rescheduleDate.HasValue ?
                new ObjectParameter("RescheduleDate", rescheduleDate) :
                new ObjectParameter("RescheduleDate", typeof(System.DateTime));
    
            var rescheduletimeParameter = rescheduletime != null ?
                new ObjectParameter("Rescheduletime", rescheduletime) :
                new ObjectParameter("Rescheduletime", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_RescheduleService_Insert", serviceIdParameter, rescheduleDateParameter, rescheduletimeParameter, reasonParameter, addedByParameter, addedByTypeParameter, addedDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_Roles_GetAdminUserRoles_Result> uspa_Roles_GetAdminUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Roles_GetAdminUserRoles_Result>("uspa_Roles_GetAdminUserRoles");
        }
    
        public virtual int uspa_SalesVisitRequest_AssignEmployee(Nullable<int> id, Nullable<int> employeeId, Nullable<System.DateTime> repliedDate, Nullable<int> assignedBy, Nullable<int> assignedByType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var repliedDateParameter = repliedDate.HasValue ?
                new ObjectParameter("RepliedDate", repliedDate) :
                new ObjectParameter("RepliedDate", typeof(System.DateTime));
    
            var assignedByParameter = assignedBy.HasValue ?
                new ObjectParameter("AssignedBy", assignedBy) :
                new ObjectParameter("AssignedBy", typeof(int));
    
            var assignedByTypeParameter = assignedByType.HasValue ?
                new ObjectParameter("AssignedByType", assignedByType) :
                new ObjectParameter("AssignedByType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_SalesVisitRequest_AssignEmployee", idParameter, employeeIdParameter, repliedDateParameter, assignedByParameter, assignedByTypeParameter);
        }
    
        public virtual ObjectResult<uspa_SalesVisitRequest_GetAll_Result> uspa_SalesVisitRequest_GetAll(string clientName, string empName)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SalesVisitRequest_GetAll_Result>("uspa_SalesVisitRequest_GetAll", clientNameParameter, empNameParameter);
        }
    
        public virtual ObjectResult<uspa_SalesVisitRequest_GetById_Result> uspa_SalesVisitRequest_GetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SalesVisitRequest_GetById_Result>("uspa_SalesVisitRequest_GetById", idParameter);
        }
    
        public virtual int uspa_ScheduleAllServicesForClientUnitAndNotify(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> firstServiceWithinDays, Nullable<int> durationInMonth, Nullable<int> numberOfService, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(int));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(int));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ScheduleAllServicesForClientUnitAndNotify", clientIdParameter, addressIdParameter, firstServiceWithinDaysParameter, durationInMonthParameter, numberOfServiceParameter, planTypeIdParameter);
        }
    
        public virtual ObjectResult<uspa_ScheduleAllServicesForClientUnitAndNotify_Old_Result> uspa_ScheduleAllServicesForClientUnitAndNotify_Old(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> firstServiceWithinDays, Nullable<int> durationInMonth, Nullable<int> numberOfService, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(int));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(int));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ScheduleAllServicesForClientUnitAndNotify_Old_Result>("uspa_ScheduleAllServicesForClientUnitAndNotify_Old", clientIdParameter, addressIdParameter, firstServiceWithinDaysParameter, durationInMonthParameter, numberOfServiceParameter, planTypeIdParameter);
        }
    
        public virtual int uspa_ScheduleAllServicesForClientUnitWithMergeAndNotify(Nullable<int> clientId, Nullable<int> addressId, Nullable<int> numberOfService, Nullable<int> durationInMonth, Nullable<int> firstServiceWithinDays, Nullable<int> planTypeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var numberOfServiceParameter = numberOfService.HasValue ?
                new ObjectParameter("NumberOfService", numberOfService) :
                new ObjectParameter("NumberOfService", typeof(int));
    
            var durationInMonthParameter = durationInMonth.HasValue ?
                new ObjectParameter("DurationInMonth", durationInMonth) :
                new ObjectParameter("DurationInMonth", typeof(int));
    
            var firstServiceWithinDaysParameter = firstServiceWithinDays.HasValue ?
                new ObjectParameter("FirstServiceWithinDays", firstServiceWithinDays) :
                new ObjectParameter("FirstServiceWithinDays", typeof(int));
    
            var planTypeIdParameter = planTypeId.HasValue ?
                new ObjectParameter("PlanTypeId", planTypeId) :
                new ObjectParameter("PlanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ScheduleAllServicesForClientUnitWithMergeAndNotify", clientIdParameter, addressIdParameter, numberOfServiceParameter, durationInMonthParameter, firstServiceWithinDaysParameter, planTypeIdParameter);
        }
    
        public virtual ObjectResult<uspa_SchedulePendingServices_Result> uspa_SchedulePendingServices(Nullable<long> serviceId, Nullable<int> clientId, Nullable<int> addressId, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SchedulePendingServices_Result>("uspa_SchedulePendingServices", serviceIdParameter, clientIdParameter, addressIdParameter, expectedStartDateParameter, expectedEndDateParameter);
        }
    
        public virtual ObjectResult<uspa_SchedulePendingServices_Old_Result> uspa_SchedulePendingServices_Old(Nullable<long> serviceId, Nullable<int> clientId, Nullable<int> addressId, Nullable<System.DateTime> expectedStartDate, Nullable<System.DateTime> expectedEndDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var expectedStartDateParameter = expectedStartDate.HasValue ?
                new ObjectParameter("ExpectedStartDate", expectedStartDate) :
                new ObjectParameter("ExpectedStartDate", typeof(System.DateTime));
    
            var expectedEndDateParameter = expectedEndDate.HasValue ?
                new ObjectParameter("ExpectedEndDate", expectedEndDate) :
                new ObjectParameter("ExpectedEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SchedulePendingServices_Old_Result>("uspa_SchedulePendingServices_Old", serviceIdParameter, clientIdParameter, addressIdParameter, expectedStartDateParameter, expectedEndDateParameter);
        }
    
        public virtual int uspa_ScheduleServicesForClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ScheduleServicesForClient");
        }
    
        public virtual ObjectResult<uspa_Search_Subscription_Result> uspa_Search_Subscription(string clientName, string status, string paymentMethod)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Search_Subscription_Result>("uspa_Search_Subscription", clientNameParameter, statusParameter, paymentMethodParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceAttemptCount_GetByServiceId_Result> uspa_ServiceAttemptCount_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceAttemptCount_GetByServiceId_Result>("uspa_ServiceAttemptCount_GetByServiceId", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceDate_GetAll_Result> uspa_ServiceDate_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceDate_GetAll_Result>("uspa_ServiceDate_GetAll");
        }
    
        public virtual ObjectResult<uspa_ServiceDate_GetById_Result> uspa_ServiceDate_GetById(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceDate_GetById_Result>("uspa_ServiceDate_GetById", serviceIdParameter);
        }
    
        public virtual int uspa_ServiceDate_Update(Nullable<long> serviceId, Nullable<System.DateTime> expStartDate, Nullable<System.DateTime> expEndDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var expStartDateParameter = expStartDate.HasValue ?
                new ObjectParameter("ExpStartDate", expStartDate) :
                new ObjectParameter("ExpStartDate", typeof(System.DateTime));
    
            var expEndDateParameter = expEndDate.HasValue ?
                new ObjectParameter("ExpEndDate", expEndDate) :
                new ObjectParameter("ExpEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceDate_Update", serviceIdParameter, expStartDateParameter, expEndDateParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceNoShow_GetByServiceId_Result> uspa_ServiceNoShow_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceNoShow_GetByServiceId_Result>("uspa_ServiceNoShow_GetByServiceId", serviceIdParameter);
        }
    
        public virtual int uspa_ServiceNoShow_Insert(Nullable<long> serviceId, Nullable<decimal> noShowAmount, Nullable<bool> isPaymentReceived, Nullable<bool> isNoShow, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var noShowAmountParameter = noShowAmount.HasValue ?
                new ObjectParameter("NoShowAmount", noShowAmount) :
                new ObjectParameter("NoShowAmount", typeof(decimal));
    
            var isPaymentReceivedParameter = isPaymentReceived.HasValue ?
                new ObjectParameter("IsPaymentReceived", isPaymentReceived) :
                new ObjectParameter("IsPaymentReceived", typeof(bool));
    
            var isNoShowParameter = isNoShow.HasValue ?
                new ObjectParameter("IsNoShow", isNoShow) :
                new ObjectParameter("IsNoShow", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceNoShow_Insert", serviceIdParameter, noShowAmountParameter, isPaymentReceivedParameter, isNoShowParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ServicePartList_GetByServiceId_Result> uspa_ServicePartList_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServicePartList_GetByServiceId_Result>("uspa_ServicePartList_GetByServiceId", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServicePartList_GetByServiceIdForEmpPartList_Result> uspa_ServicePartList_GetByServiceIdForEmpPartList(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServicePartList_GetByServiceIdForEmpPartList_Result>("uspa_ServicePartList_GetByServiceIdForEmpPartList", serviceIdParameter);
        }
    
        public virtual int uspa_ServicePartList_UpdateIsUsedById(Nullable<int> id, Nullable<bool> isUsed)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServicePartList_UpdateIsUsedById", idParameter, isUsedParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceRatingReview_GetByServiceId_Result> uspa_ServiceRatingReview_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceRatingReview_GetByServiceId_Result>("uspa_ServiceRatingReview_GetByServiceId", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReport_GetAll_Result> uspa_ServiceReport_GetAll(string serviceReportNo, string clientName, string empName, string startDate, string endDate, string sortField, string sortDirection)
        {
            var serviceReportNoParameter = serviceReportNo != null ?
                new ObjectParameter("ServiceReportNo", serviceReportNo) :
                new ObjectParameter("ServiceReportNo", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReport_GetAll_Result>("uspa_ServiceReport_GetAll", serviceReportNoParameter, clientNameParameter, empNameParameter, startDateParameter, endDateParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReport_GetById_Result> uspa_ServiceReport_GetById(Nullable<long> reportId)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReport_GetById_Result>("uspa_ServiceReport_GetById", reportIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReport_GetByServiceId_Result> uspa_ServiceReport_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReport_GetByServiceId_Result>("uspa_ServiceReport_GetByServiceId", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReport_GetServiceReportsByUnitId_Result> uspa_ServiceReport_GetServiceReportsByUnitId(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReport_GetServiceReportsByUnitId_Result>("uspa_ServiceReport_GetServiceReportsByUnitId", unitIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReport_GetUnitsByServiceId_Result> uspa_ServiceReport_GetUnitsByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReport_GetUnitsByServiceId_Result>("uspa_ServiceReport_GetUnitsByServiceId", serviceIdParameter);
        }
    
        public virtual int uspa_ServiceReport_Update(Nullable<long> id, string billingType, string workStartedTime, string workCompletedTime, Nullable<bool> isWorkDone, string workPerformed, string recommendationsforcustomer, string employeeNotes, string cCEmail, Nullable<bool> isEmailToClient, string clientSignature, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var workStartedTimeParameter = workStartedTime != null ?
                new ObjectParameter("WorkStartedTime", workStartedTime) :
                new ObjectParameter("WorkStartedTime", typeof(string));
    
            var workCompletedTimeParameter = workCompletedTime != null ?
                new ObjectParameter("WorkCompletedTime", workCompletedTime) :
                new ObjectParameter("WorkCompletedTime", typeof(string));
    
            var isWorkDoneParameter = isWorkDone.HasValue ?
                new ObjectParameter("IsWorkDone", isWorkDone) :
                new ObjectParameter("IsWorkDone", typeof(bool));
    
            var workPerformedParameter = workPerformed != null ?
                new ObjectParameter("WorkPerformed", workPerformed) :
                new ObjectParameter("WorkPerformed", typeof(string));
    
            var recommendationsforcustomerParameter = recommendationsforcustomer != null ?
                new ObjectParameter("Recommendationsforcustomer", recommendationsforcustomer) :
                new ObjectParameter("Recommendationsforcustomer", typeof(string));
    
            var employeeNotesParameter = employeeNotes != null ?
                new ObjectParameter("EmployeeNotes", employeeNotes) :
                new ObjectParameter("EmployeeNotes", typeof(string));
    
            var cCEmailParameter = cCEmail != null ?
                new ObjectParameter("CCEmail", cCEmail) :
                new ObjectParameter("CCEmail", typeof(string));
    
            var isEmailToClientParameter = isEmailToClient.HasValue ?
                new ObjectParameter("IsEmailToClient", isEmailToClient) :
                new ObjectParameter("IsEmailToClient", typeof(bool));
    
            var clientSignatureParameter = clientSignature != null ?
                new ObjectParameter("ClientSignature", clientSignature) :
                new ObjectParameter("ClientSignature", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceReport_Update", idParameter, billingTypeParameter, workStartedTimeParameter, workCompletedTimeParameter, isWorkDoneParameter, workPerformedParameter, recommendationsforcustomerParameter, employeeNotesParameter, cCEmailParameter, isEmailToClientParameter, clientSignatureParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReportImages_GetByServiceReportId_Result> uspa_ServiceReportImages_GetByServiceReportId(Nullable<long> reportId)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReportImages_GetByServiceReportId_Result>("uspa_ServiceReportImages_GetByServiceReportId", reportIdParameter);
        }
    
        public virtual int uspa_ServiceReportImages_Insert(Nullable<long> serviceReportId, string serviceImage)
        {
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            var serviceImageParameter = serviceImage != null ?
                new ObjectParameter("ServiceImage", serviceImage) :
                new ObjectParameter("ServiceImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceReportImages_Insert", serviceReportIdParameter, serviceImageParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReportUnits_GetByServiceReportId_Result> uspa_ServiceReportUnits_GetByServiceReportId(Nullable<long> serviceReportId)
        {
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReportUnits_GetByServiceReportId_Result>("uspa_ServiceReportUnits_GetByServiceReportId", serviceReportIdParameter);
        }
    
        public virtual ObjectResult<uspa_ServiceReportUnits_GetCompletedUnitsByReportId_Result> uspa_ServiceReportUnits_GetCompletedUnitsByReportId(Nullable<long> serviceReportId)
        {
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceReportUnits_GetCompletedUnitsByReportId_Result>("uspa_ServiceReportUnits_GetCompletedUnitsByReportId", serviceReportIdParameter);
        }
    
        public virtual int uspa_ServiceReportUnits_SetIsCompleted(Nullable<int> unitId, Nullable<bool> isCompleted, Nullable<long> serviceReportId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var serviceReportIdParameter = serviceReportId.HasValue ?
                new ObjectParameter("ServiceReportId", serviceReportId) :
                new ObjectParameter("ServiceReportId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceReportUnits_SetIsCompleted", unitIdParameter, isCompletedParameter, serviceReportIdParameter);
        }
    
        public virtual int uspa_Services_ApproveServiceByUrl(string url, string status)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_ApproveServiceByUrl", urlParameter, statusParameter);
        }
    
        public virtual int uspa_Services_ChangeServiceStatus(Nullable<long> serviceId, string status)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_ChangeServiceStatus", serviceIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_Services_CheckAnyServiceIsScheduleByUnitAndStatus_Result> uspa_Services_CheckAnyServiceIsScheduleByUnitAndStatus(Nullable<int> unitId, string status)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_CheckAnyServiceIsScheduleByUnitAndStatus_Result>("uspa_Services_CheckAnyServiceIsScheduleByUnitAndStatus", unitIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspa_Services_CheckApprovalEmailUrl_Result> uspa_Services_CheckApprovalEmailUrl(string url)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_CheckApprovalEmailUrl_Result>("uspa_Services_CheckApprovalEmailUrl", urlParameter);
        }
    
        public virtual ObjectResult<uspa_Services_DeleteById_Result> uspa_Services_DeleteById(Nullable<long> serviceId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_DeleteById_Result>("uspa_Services_DeleteById", serviceIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetAllCompletedService_Result> uspa_Services_GetAllCompletedService(string serviceCaseNo, string clientName, string employeeName, string startDate, string endDate, string sortField, string sortDirection)
        {
            var serviceCaseNoParameter = serviceCaseNo != null ?
                new ObjectParameter("ServiceCaseNo", serviceCaseNo) :
                new ObjectParameter("ServiceCaseNo", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetAllCompletedService_Result>("uspa_Services_GetAllCompletedService", serviceCaseNoParameter, clientNameParameter, employeeNameParameter, startDateParameter, endDateParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetAllRatingForReport_Result> uspa_Services_GetAllRatingForReport(string employeeName, string startDate, string endDate)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetAllRatingForReport_Result>("uspa_Services_GetAllRatingForReport", employeeNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetAllUnitServicedReportChart_Result> uspa_Services_GetAllUnitServicedReportChart(string manufactureName, string startDate, string endDate, Nullable<bool> isPackaged)
        {
            var manufactureNameParameter = manufactureName != null ?
                new ObjectParameter("ManufactureName", manufactureName) :
                new ObjectParameter("ManufactureName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var isPackagedParameter = isPackaged.HasValue ?
                new ObjectParameter("IsPackaged", isPackaged) :
                new ObjectParameter("IsPackaged", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetAllUnitServicedReportChart_Result>("uspa_Services_GetAllUnitServicedReportChart", manufactureNameParameter, startDateParameter, endDateParameter, isPackagedParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetCancelledAndRescheduledService_Result> uspa_Services_GetCancelledAndRescheduledService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetCancelledAndRescheduledService_Result>("uspa_Services_GetCancelledAndRescheduledService");
        }
    
        public virtual ObjectResult<uspa_Services_GetCompletedRequestedService_Result> uspa_Services_GetCompletedRequestedService(string serviceCaseNo, string clientName, string startdate, string endDate, string sortField, string sortDirection)
        {
            var serviceCaseNoParameter = serviceCaseNo != null ?
                new ObjectParameter("ServiceCaseNo", serviceCaseNo) :
                new ObjectParameter("ServiceCaseNo", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetCompletedRequestedService_Result>("uspa_Services_GetCompletedRequestedService", serviceCaseNoParameter, clientNameParameter, startdateParameter, endDateParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetCompletedServiceByServiceId_Result> uspa_Services_GetCompletedServiceByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetCompletedServiceByServiceId_Result>("uspa_Services_GetCompletedServiceByServiceId", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetNoShowServiceByStatus_Result> uspa_Services_GetNoShowServiceByStatus(string serviceCaseNo, string status, string empName, string workArea, string startDate, string endDate, string purpose, string clientName, string sortField, string sortDirection)
        {
            var serviceCaseNoParameter = serviceCaseNo != null ?
                new ObjectParameter("ServiceCaseNo", serviceCaseNo) :
                new ObjectParameter("ServiceCaseNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var workAreaParameter = workArea != null ?
                new ObjectParameter("WorkArea", workArea) :
                new ObjectParameter("WorkArea", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetNoShowServiceByStatus_Result>("uspa_Services_GetNoShowServiceByStatus", serviceCaseNoParameter, statusParameter, empNameParameter, workAreaParameter, startDateParameter, endDateParameter, purposeParameter, clientNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetPendingAndRequestedService_Result> uspa_Services_GetPendingAndRequestedService(string serviceCaseNo, string clientName, string startDate, string endDate, string sortField, string sortDirection)
        {
            var serviceCaseNoParameter = serviceCaseNo != null ?
                new ObjectParameter("ServiceCaseNo", serviceCaseNo) :
                new ObjectParameter("ServiceCaseNo", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetPendingAndRequestedService_Result>("uspa_Services_GetPendingAndRequestedService", serviceCaseNoParameter, clientNameParameter, startDateParameter, endDateParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetPendingServiceForScheduler_Result> uspa_Services_GetPendingServiceForScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetPendingServiceForScheduler_Result>("uspa_Services_GetPendingServiceForScheduler");
        }
    
        public virtual ObjectResult<uspa_Services_GetServiceByStatus_Result> uspa_Services_GetServiceByStatus(string serviceCaseNo, string status, string empName, string workArea, string startDate, string endDate, string purpose, string clientName, string sortField, string sortDirection)
        {
            var serviceCaseNoParameter = serviceCaseNo != null ?
                new ObjectParameter("ServiceCaseNo", serviceCaseNo) :
                new ObjectParameter("ServiceCaseNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var workAreaParameter = workArea != null ?
                new ObjectParameter("WorkArea", workArea) :
                new ObjectParameter("WorkArea", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetServiceByStatus_Result>("uspa_Services_GetServiceByStatus", serviceCaseNoParameter, statusParameter, empNameParameter, workAreaParameter, startDateParameter, endDateParameter, purposeParameter, clientNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetServiceForEmployeePartList_Result> uspa_Services_GetServiceForEmployeePartList(string serviceCaseNumber, string empName, string startDate, string endDate)
        {
            var serviceCaseNumberParameter = serviceCaseNumber != null ?
                new ObjectParameter("ServiceCaseNumber", serviceCaseNumber) :
                new ObjectParameter("ServiceCaseNumber", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetServiceForEmployeePartList_Result>("uspa_Services_GetServiceForEmployeePartList", serviceCaseNumberParameter, empNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspa_Services_GetWaitingAndCancelService_Result> uspa_Services_GetWaitingAndCancelService(string serviceCaseNumber, string status, string empName, string workArea, string startDate, string endDate, string clientName, string sortField, string sortDirection)
        {
            var serviceCaseNumberParameter = serviceCaseNumber != null ?
                new ObjectParameter("ServiceCaseNumber", serviceCaseNumber) :
                new ObjectParameter("ServiceCaseNumber", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var workAreaParameter = workArea != null ?
                new ObjectParameter("WorkArea", workArea) :
                new ObjectParameter("WorkArea", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_GetWaitingAndCancelService_Result>("uspa_Services_GetWaitingAndCancelService", serviceCaseNumberParameter, statusParameter, empNameParameter, workAreaParameter, startDateParameter, endDateParameter, clientNameParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual int uspa_Services_InsertPendingService(Nullable<int> clientId, Nullable<int> addressID, string purposeOfVisit, string status, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_InsertPendingService", clientIdParameter, addressIDParameter, purposeOfVisitParameter, statusParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_Services_InsertWaitingApprovalService(Nullable<long> reqServiceId, Nullable<int> clientId, Nullable<int> addressID, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, string cusNote, string dispNotes, string empNote, string status, Nullable<int> scheduledBy, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var reqServiceIdParameter = reqServiceId.HasValue ?
                new ObjectParameter("ReqServiceId", reqServiceId) :
                new ObjectParameter("ReqServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var cusNoteParameter = cusNote != null ?
                new ObjectParameter("CusNote", cusNote) :
                new ObjectParameter("CusNote", typeof(string));
    
            var dispNotesParameter = dispNotes != null ?
                new ObjectParameter("DispNotes", dispNotes) :
                new ObjectParameter("DispNotes", typeof(string));
    
            var empNoteParameter = empNote != null ?
                new ObjectParameter("EmpNote", empNote) :
                new ObjectParameter("EmpNote", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var scheduledByParameter = scheduledBy.HasValue ?
                new ObjectParameter("ScheduledBy", scheduledBy) :
                new ObjectParameter("ScheduledBy", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_InsertWaitingApprovalService", reqServiceIdParameter, clientIdParameter, addressIDParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, cusNoteParameter, dispNotesParameter, empNoteParameter, statusParameter, scheduledByParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Services_ScheduleService_Result> uspa_Services_ScheduleService(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_ScheduleService_Result>("uspa_Services_ScheduleService", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_Services_SelectByID_Result> uspa_Services_SelectByID(Nullable<long> serviceId, Nullable<int> clientId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_SelectByID_Result>("uspa_Services_SelectByID", serviceIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<uspa_Services_SetApprovalEmailUrl_Result> uspa_Services_SetApprovalEmailUrl(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Services_SetApprovalEmailUrl_Result>("uspa_Services_SetApprovalEmailUrl", serviceIdParameter);
        }
    
        public virtual int uspa_Services_Update(Nullable<long> id, Nullable<int> clientId, Nullable<int> addressID, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, string customerComplaints, string dispatcherNotes, string technicianNotes, string status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var customerComplaintsParameter = customerComplaints != null ?
                new ObjectParameter("CustomerComplaints", customerComplaints) :
                new ObjectParameter("CustomerComplaints", typeof(string));
    
            var dispatcherNotesParameter = dispatcherNotes != null ?
                new ObjectParameter("DispatcherNotes", dispatcherNotes) :
                new ObjectParameter("DispatcherNotes", typeof(string));
    
            var technicianNotesParameter = technicianNotes != null ?
                new ObjectParameter("TechnicianNotes", technicianNotes) :
                new ObjectParameter("TechnicianNotes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_Update", idParameter, clientIdParameter, addressIDParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, customerComplaintsParameter, dispatcherNotesParameter, technicianNotesParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Services_UpdateWaitingApprovalService(Nullable<long> serviceId, Nullable<System.DateTime> addedDate, string purposeOfVisit, Nullable<int> workAreaId, Nullable<int> employeeId, Nullable<System.DateTime> scheduleDate, string scheduleStartTime, string scheduleEndTime, string cusNote, string dispNotes, string empNote, string status)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var workAreaIdParameter = workAreaId.HasValue ?
                new ObjectParameter("WorkAreaId", workAreaId) :
                new ObjectParameter("WorkAreaId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var scheduleStartTimeParameter = scheduleStartTime != null ?
                new ObjectParameter("ScheduleStartTime", scheduleStartTime) :
                new ObjectParameter("ScheduleStartTime", typeof(string));
    
            var scheduleEndTimeParameter = scheduleEndTime != null ?
                new ObjectParameter("ScheduleEndTime", scheduleEndTime) :
                new ObjectParameter("ScheduleEndTime", typeof(string));
    
            var cusNoteParameter = cusNote != null ?
                new ObjectParameter("CusNote", cusNote) :
                new ObjectParameter("CusNote", typeof(string));
    
            var dispNotesParameter = dispNotes != null ?
                new ObjectParameter("DispNotes", dispNotes) :
                new ObjectParameter("DispNotes", typeof(string));
    
            var empNoteParameter = empNote != null ?
                new ObjectParameter("EmpNote", empNote) :
                new ObjectParameter("EmpNote", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Services_UpdateWaitingApprovalService", serviceIdParameter, addedDateParameter, purposeOfVisitParameter, workAreaIdParameter, employeeIdParameter, scheduleDateParameter, scheduleStartTimeParameter, scheduleEndTimeParameter, cusNoteParameter, dispNotesParameter, empNoteParameter, statusParameter);
        }
    
        public virtual int uspa_ServiceScheduledToPendingScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceScheduledToPendingScheduler");
        }
    
        public virtual ObjectResult<uspa_ServiceUnits_GetByServiceId_Result> uspa_ServiceUnits_GetByServiceId(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ServiceUnits_GetByServiceId_Result>("uspa_ServiceUnits_GetByServiceId", serviceIdParameter);
        }
    
        public virtual int uspa_ServiceUnits_Insert(Nullable<long> serviceId, Nullable<int> unitId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceUnits_Insert", serviceIdParameter, unitIdParameter);
        }
    
        public virtual int uspa_ServiceWaitingApprovalToPendingScheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ServiceWaitingApprovalToPendingScheduler");
        }
    
        public virtual ObjectResult<uspa_SiteSetting_GetAll_Result> uspa_SiteSetting_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SiteSetting_GetAll_Result>("uspa_SiteSetting_GetAll");
        }
    
        public virtual ObjectResult<uspa_SiteSetting_GetById_Result> uspa_SiteSetting_GetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SiteSetting_GetById_Result>("uspa_SiteSetting_GetById", idParameter);
        }
    
        public virtual ObjectResult<uspa_SiteSetting_GetByName_Result> uspa_SiteSetting_GetByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_SiteSetting_GetByName_Result>("uspa_SiteSetting_GetByName", nameParameter);
        }
    
        public virtual int uspa_SiteSetting_UpdateById(Nullable<int> id, string value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_SiteSetting_UpdateById", idParameter, valueParameter);
        }
    
        public virtual int uspa_State_Add(string stateName, Nullable<bool> isActive, Nullable<bool> pendingInactive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pendingInactiveParameter = pendingInactive.HasValue ?
                new ObjectParameter("PendingInactive", pendingInactive) :
                new ObjectParameter("PendingInactive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_State_Add", stateNameParameter, isActiveParameter, pendingInactiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual int uspa_State_Delete(Nullable<int> stateId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_State_Delete", stateIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_State_GetAll_Result> uspa_State_GetAll(Nullable<bool> isActive, Nullable<bool> includeInactive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("IncludeInactive", includeInactive) :
                new ObjectParameter("IncludeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_State_GetAll_Result>("uspa_State_GetAll", isActiveParameter, includeInactiveParameter);
        }
    
        public virtual ObjectResult<uspa_State_GetById_Result> uspa_State_GetById(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_State_GetById_Result>("uspa_State_GetById", stateIdParameter);
        }
    
        public virtual ObjectResult<uspa_State_GetByName_Result> uspa_State_GetByName(Nullable<int> stateId, string stateName)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_State_GetByName_Result>("uspa_State_GetByName", stateIdParameter, stateNameParameter);
        }
    
        public virtual int uspa_State_SetStatus(Nullable<bool> isActive, Nullable<int> stateId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_State_SetStatus", isActiveParameter, stateIdParameter);
        }
    
        public virtual int uspa_State_Update(Nullable<int> id, string stateName, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_State_Update", idParameter, stateNameParameter, isActiveParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual int uspa_StripeErrorLog_Insert(string chargeId, string code, string declineCode, string errorType, string error, string errorSubscription, string message, string parameter, Nullable<int> userid, Nullable<long> unitId, Nullable<System.DateTime> dateAdded)
        {
            var chargeIdParameter = chargeId != null ?
                new ObjectParameter("ChargeId", chargeId) :
                new ObjectParameter("ChargeId", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var declineCodeParameter = declineCode != null ?
                new ObjectParameter("DeclineCode", declineCode) :
                new ObjectParameter("DeclineCode", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            var errorSubscriptionParameter = errorSubscription != null ?
                new ObjectParameter("ErrorSubscription", errorSubscription) :
                new ObjectParameter("ErrorSubscription", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_StripeErrorLog_Insert", chargeIdParameter, codeParameter, declineCodeParameter, errorTypeParameter, errorParameter, errorSubscriptionParameter, messageParameter, parameterParameter, useridParameter, unitIdParameter, dateAddedParameter);
        }
    
        public virtual ObjectResult<uspa_tb_CMS_Block_GetByCMSId_Result> uspa_tb_CMS_Block_GetByCMSId(Nullable<int> cMSId)
        {
            var cMSIdParameter = cMSId.HasValue ?
                new ObjectParameter("CMSId", cMSId) :
                new ObjectParameter("CMSId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_tb_CMS_Block_GetByCMSId_Result>("uspa_tb_CMS_Block_GetByCMSId", cMSIdParameter);
        }
    
        public virtual ObjectResult<uspa_tb_CMS_GetCMSPageContextByURL_Result> uspa_tb_CMS_GetCMSPageContextByURL(string uRL)
        {
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_tb_CMS_GetCMSPageContextByURL_Result>("uspa_tb_CMS_GetCMSPageContextByURL", uRLParameter);
        }
    
        public virtual ObjectResult<uspa_UnitExtraInfo_GetByUnitId_Result> uspa_UnitExtraInfo_GetByUnitId(Nullable<int> clientUnitId, Nullable<int> clientUnitPartId, string extraInfoType)
        {
            var clientUnitIdParameter = clientUnitId.HasValue ?
                new ObjectParameter("ClientUnitId", clientUnitId) :
                new ObjectParameter("ClientUnitId", typeof(int));
    
            var clientUnitPartIdParameter = clientUnitPartId.HasValue ?
                new ObjectParameter("ClientUnitPartId", clientUnitPartId) :
                new ObjectParameter("ClientUnitPartId", typeof(int));
    
            var extraInfoTypeParameter = extraInfoType != null ?
                new ObjectParameter("ExtraInfoType", extraInfoType) :
                new ObjectParameter("ExtraInfoType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_UnitExtraInfo_GetByUnitId_Result>("uspa_UnitExtraInfo_GetByUnitId", clientUnitIdParameter, clientUnitPartIdParameter, extraInfoTypeParameter);
        }
    
        public virtual int uspa_UnitExtraInfo_Insert(Nullable<int> unitId, string extraInfoType, Nullable<int> partId, Nullable<bool> locationOfPart, Nullable<long> clientUnitPartId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var extraInfoTypeParameter = extraInfoType != null ?
                new ObjectParameter("ExtraInfoType", extraInfoType) :
                new ObjectParameter("ExtraInfoType", typeof(string));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var locationOfPartParameter = locationOfPart.HasValue ?
                new ObjectParameter("LocationOfPart", locationOfPart) :
                new ObjectParameter("LocationOfPart", typeof(bool));
    
            var clientUnitPartIdParameter = clientUnitPartId.HasValue ?
                new ObjectParameter("ClientUnitPartId", clientUnitPartId) :
                new ObjectParameter("ClientUnitPartId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_UnitExtraInfo_Insert", unitIdParameter, extraInfoTypeParameter, partIdParameter, locationOfPartParameter, clientUnitPartIdParameter);
        }
    
        public virtual ObjectResult<string> uspa_UnitManuals_DeleteById(Nullable<int> unitManualId)
        {
            var unitManualIdParameter = unitManualId.HasValue ?
                new ObjectParameter("UnitManualId", unitManualId) :
                new ObjectParameter("UnitManualId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspa_UnitManuals_DeleteById", unitManualIdParameter);
        }
    
        public virtual ObjectResult<uspa_UnitManuals_GetByUnitId_Result> uspa_UnitManuals_GetByUnitId(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_UnitManuals_GetByUnitId_Result>("uspa_UnitManuals_GetByUnitId", unitIdParameter);
        }
    
        public virtual int uspa_UnitManuals_Insert(Nullable<int> unitsId, string manualFileName)
        {
            var unitsIdParameter = unitsId.HasValue ?
                new ObjectParameter("UnitsId", unitsId) :
                new ObjectParameter("UnitsId", typeof(int));
    
            var manualFileNameParameter = manualFileName != null ?
                new ObjectParameter("ManualFileName", manualFileName) :
                new ObjectParameter("ManualFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_UnitManuals_Insert", unitsIdParameter, manualFileNameParameter);
        }
    
        public virtual int uspa_Units_Delete(Nullable<int> unitId, Nullable<int> deletedBy, Nullable<int> deletedByType, Nullable<System.DateTime> deletedDate)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedByTypeParameter = deletedByType.HasValue ?
                new ObjectParameter("DeletedByType", deletedByType) :
                new ObjectParameter("DeletedByType", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Units_Delete", unitIdParameter, deletedByParameter, deletedByTypeParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Units_GetByModelNumber_Result1> uspa_Units_GetByModelNumber(string modelNumber)
        {
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Units_GetByModelNumber_Result1>("uspa_Units_GetByModelNumber", modelNumberParameter);
        }
    
        public virtual int uspa_Units_Insert(string modelNumber, string serialNumber, Nullable<System.DateTime> manufactureDate, string manufactureBrand, string unitTon, Nullable<int> refrigerant, string electricalService, string maxBreaker, Nullable<int> breaker, Nullable<int> compressor, Nullable<int> capacitor, Nullable<int> contactor, Nullable<int> filterdryer, Nullable<int> defrostboard, Nullable<int> relay, Nullable<int> tXVValve, Nullable<int> reversingValve, Nullable<int> blowerMotor, Nullable<int> condensingfanmotor, Nullable<int> inducerdraftmotor, Nullable<int> transformer, Nullable<int> controlboard, Nullable<int> limitswitch, Nullable<int> ignitor, Nullable<int> gasvalve, Nullable<int> pressureswitch, Nullable<int> flamesensor, Nullable<int> rolloutsensor, Nullable<int> doorswitch, Nullable<int> ignitioncontrolboard, Nullable<int> coil, Nullable<int> misc, Nullable<bool> status, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var manufactureBrandParameter = manufactureBrand != null ?
                new ObjectParameter("ManufactureBrand", manufactureBrand) :
                new ObjectParameter("ManufactureBrand", typeof(string));
    
            var unitTonParameter = unitTon != null ?
                new ObjectParameter("UnitTon", unitTon) :
                new ObjectParameter("UnitTon", typeof(string));
    
            var refrigerantParameter = refrigerant.HasValue ?
                new ObjectParameter("Refrigerant", refrigerant) :
                new ObjectParameter("Refrigerant", typeof(int));
    
            var electricalServiceParameter = electricalService != null ?
                new ObjectParameter("ElectricalService", electricalService) :
                new ObjectParameter("ElectricalService", typeof(string));
    
            var maxBreakerParameter = maxBreaker != null ?
                new ObjectParameter("MaxBreaker", maxBreaker) :
                new ObjectParameter("MaxBreaker", typeof(string));
    
            var breakerParameter = breaker.HasValue ?
                new ObjectParameter("Breaker", breaker) :
                new ObjectParameter("Breaker", typeof(int));
    
            var compressorParameter = compressor.HasValue ?
                new ObjectParameter("Compressor", compressor) :
                new ObjectParameter("Compressor", typeof(int));
    
            var capacitorParameter = capacitor.HasValue ?
                new ObjectParameter("Capacitor", capacitor) :
                new ObjectParameter("Capacitor", typeof(int));
    
            var contactorParameter = contactor.HasValue ?
                new ObjectParameter("Contactor", contactor) :
                new ObjectParameter("Contactor", typeof(int));
    
            var filterdryerParameter = filterdryer.HasValue ?
                new ObjectParameter("Filterdryer", filterdryer) :
                new ObjectParameter("Filterdryer", typeof(int));
    
            var defrostboardParameter = defrostboard.HasValue ?
                new ObjectParameter("Defrostboard", defrostboard) :
                new ObjectParameter("Defrostboard", typeof(int));
    
            var relayParameter = relay.HasValue ?
                new ObjectParameter("Relay", relay) :
                new ObjectParameter("Relay", typeof(int));
    
            var tXVValveParameter = tXVValve.HasValue ?
                new ObjectParameter("TXVValve", tXVValve) :
                new ObjectParameter("TXVValve", typeof(int));
    
            var reversingValveParameter = reversingValve.HasValue ?
                new ObjectParameter("ReversingValve", reversingValve) :
                new ObjectParameter("ReversingValve", typeof(int));
    
            var blowerMotorParameter = blowerMotor.HasValue ?
                new ObjectParameter("BlowerMotor", blowerMotor) :
                new ObjectParameter("BlowerMotor", typeof(int));
    
            var condensingfanmotorParameter = condensingfanmotor.HasValue ?
                new ObjectParameter("Condensingfanmotor", condensingfanmotor) :
                new ObjectParameter("Condensingfanmotor", typeof(int));
    
            var inducerdraftmotorParameter = inducerdraftmotor.HasValue ?
                new ObjectParameter("Inducerdraftmotor", inducerdraftmotor) :
                new ObjectParameter("Inducerdraftmotor", typeof(int));
    
            var transformerParameter = transformer.HasValue ?
                new ObjectParameter("Transformer", transformer) :
                new ObjectParameter("Transformer", typeof(int));
    
            var controlboardParameter = controlboard.HasValue ?
                new ObjectParameter("Controlboard", controlboard) :
                new ObjectParameter("Controlboard", typeof(int));
    
            var limitswitchParameter = limitswitch.HasValue ?
                new ObjectParameter("Limitswitch", limitswitch) :
                new ObjectParameter("Limitswitch", typeof(int));
    
            var ignitorParameter = ignitor.HasValue ?
                new ObjectParameter("Ignitor", ignitor) :
                new ObjectParameter("Ignitor", typeof(int));
    
            var gasvalveParameter = gasvalve.HasValue ?
                new ObjectParameter("Gasvalve", gasvalve) :
                new ObjectParameter("Gasvalve", typeof(int));
    
            var pressureswitchParameter = pressureswitch.HasValue ?
                new ObjectParameter("Pressureswitch", pressureswitch) :
                new ObjectParameter("Pressureswitch", typeof(int));
    
            var flamesensorParameter = flamesensor.HasValue ?
                new ObjectParameter("Flamesensor", flamesensor) :
                new ObjectParameter("Flamesensor", typeof(int));
    
            var rolloutsensorParameter = rolloutsensor.HasValue ?
                new ObjectParameter("Rolloutsensor", rolloutsensor) :
                new ObjectParameter("Rolloutsensor", typeof(int));
    
            var doorswitchParameter = doorswitch.HasValue ?
                new ObjectParameter("Doorswitch", doorswitch) :
                new ObjectParameter("Doorswitch", typeof(int));
    
            var ignitioncontrolboardParameter = ignitioncontrolboard.HasValue ?
                new ObjectParameter("Ignitioncontrolboard", ignitioncontrolboard) :
                new ObjectParameter("Ignitioncontrolboard", typeof(int));
    
            var coilParameter = coil.HasValue ?
                new ObjectParameter("Coil", coil) :
                new ObjectParameter("Coil", typeof(int));
    
            var miscParameter = misc.HasValue ?
                new ObjectParameter("Misc", misc) :
                new ObjectParameter("Misc", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Units_Insert", modelNumberParameter, serialNumberParameter, manufactureDateParameter, manufactureBrandParameter, unitTonParameter, refrigerantParameter, electricalServiceParameter, maxBreakerParameter, breakerParameter, compressorParameter, capacitorParameter, contactorParameter, filterdryerParameter, defrostboardParameter, relayParameter, tXVValveParameter, reversingValveParameter, blowerMotorParameter, condensingfanmotorParameter, inducerdraftmotorParameter, transformerParameter, controlboardParameter, limitswitchParameter, ignitorParameter, gasvalveParameter, pressureswitchParameter, flamesensorParameter, rolloutsensorParameter, doorswitchParameter, ignitioncontrolboardParameter, coilParameter, miscParameter, statusParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_Units_SelectAll_Result> uspa_Units_SelectAll(Nullable<bool> isActive, Nullable<int> addedByType, string modelNo, string serialNo, string mfgBrand)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var modelNoParameter = modelNo != null ?
                new ObjectParameter("ModelNo", modelNo) :
                new ObjectParameter("ModelNo", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var mfgBrandParameter = mfgBrand != null ?
                new ObjectParameter("MfgBrand", mfgBrand) :
                new ObjectParameter("MfgBrand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Units_SelectAll_Result>("uspa_Units_SelectAll", isActiveParameter, addedByTypeParameter, modelNoParameter, serialNoParameter, mfgBrandParameter);
        }
    
        public virtual ObjectResult<uspa_Units_SelectByID_Result> uspa_Units_SelectByID(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Units_SelectByID_Result>("uspa_Units_SelectByID", unitIdParameter);
        }
    
        public virtual int uspa_Units_SetStatus(Nullable<bool> isActive, Nullable<int> unitId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Units_SetStatus", isActiveParameter, unitIdParameter);
        }
    
        public virtual int uspa_Units_Update(Nullable<int> id, string modelNumber, string serialNumber, Nullable<System.DateTime> manufactureDate, string manufactureBrand, string unitTon, Nullable<int> refrigerant, string electricalService, string maxBreaker, Nullable<int> breaker, Nullable<int> compressor, Nullable<int> capacitor, Nullable<int> contactor, Nullable<int> filterdryer, Nullable<int> defrostboard, Nullable<int> relay, Nullable<int> tXVValve, Nullable<int> reversingValve, Nullable<int> blowerMotor, Nullable<int> condensingfanmotor, Nullable<int> inducerdraftmotor, Nullable<int> transformer, Nullable<int> controlboard, Nullable<int> limitswitch, Nullable<int> ignitor, Nullable<int> gasvalve, Nullable<int> pressureswitch, Nullable<int> flamesensor, Nullable<int> rolloutsensor, Nullable<int> doorswitch, Nullable<int> ignitioncontrolboard, Nullable<int> coil, Nullable<int> misc, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var manufactureBrandParameter = manufactureBrand != null ?
                new ObjectParameter("ManufactureBrand", manufactureBrand) :
                new ObjectParameter("ManufactureBrand", typeof(string));
    
            var unitTonParameter = unitTon != null ?
                new ObjectParameter("UnitTon", unitTon) :
                new ObjectParameter("UnitTon", typeof(string));
    
            var refrigerantParameter = refrigerant.HasValue ?
                new ObjectParameter("Refrigerant", refrigerant) :
                new ObjectParameter("Refrigerant", typeof(int));
    
            var electricalServiceParameter = electricalService != null ?
                new ObjectParameter("ElectricalService", electricalService) :
                new ObjectParameter("ElectricalService", typeof(string));
    
            var maxBreakerParameter = maxBreaker != null ?
                new ObjectParameter("MaxBreaker", maxBreaker) :
                new ObjectParameter("MaxBreaker", typeof(string));
    
            var breakerParameter = breaker.HasValue ?
                new ObjectParameter("Breaker", breaker) :
                new ObjectParameter("Breaker", typeof(int));
    
            var compressorParameter = compressor.HasValue ?
                new ObjectParameter("Compressor", compressor) :
                new ObjectParameter("Compressor", typeof(int));
    
            var capacitorParameter = capacitor.HasValue ?
                new ObjectParameter("Capacitor", capacitor) :
                new ObjectParameter("Capacitor", typeof(int));
    
            var contactorParameter = contactor.HasValue ?
                new ObjectParameter("Contactor", contactor) :
                new ObjectParameter("Contactor", typeof(int));
    
            var filterdryerParameter = filterdryer.HasValue ?
                new ObjectParameter("Filterdryer", filterdryer) :
                new ObjectParameter("Filterdryer", typeof(int));
    
            var defrostboardParameter = defrostboard.HasValue ?
                new ObjectParameter("Defrostboard", defrostboard) :
                new ObjectParameter("Defrostboard", typeof(int));
    
            var relayParameter = relay.HasValue ?
                new ObjectParameter("Relay", relay) :
                new ObjectParameter("Relay", typeof(int));
    
            var tXVValveParameter = tXVValve.HasValue ?
                new ObjectParameter("TXVValve", tXVValve) :
                new ObjectParameter("TXVValve", typeof(int));
    
            var reversingValveParameter = reversingValve.HasValue ?
                new ObjectParameter("ReversingValve", reversingValve) :
                new ObjectParameter("ReversingValve", typeof(int));
    
            var blowerMotorParameter = blowerMotor.HasValue ?
                new ObjectParameter("BlowerMotor", blowerMotor) :
                new ObjectParameter("BlowerMotor", typeof(int));
    
            var condensingfanmotorParameter = condensingfanmotor.HasValue ?
                new ObjectParameter("Condensingfanmotor", condensingfanmotor) :
                new ObjectParameter("Condensingfanmotor", typeof(int));
    
            var inducerdraftmotorParameter = inducerdraftmotor.HasValue ?
                new ObjectParameter("Inducerdraftmotor", inducerdraftmotor) :
                new ObjectParameter("Inducerdraftmotor", typeof(int));
    
            var transformerParameter = transformer.HasValue ?
                new ObjectParameter("Transformer", transformer) :
                new ObjectParameter("Transformer", typeof(int));
    
            var controlboardParameter = controlboard.HasValue ?
                new ObjectParameter("Controlboard", controlboard) :
                new ObjectParameter("Controlboard", typeof(int));
    
            var limitswitchParameter = limitswitch.HasValue ?
                new ObjectParameter("Limitswitch", limitswitch) :
                new ObjectParameter("Limitswitch", typeof(int));
    
            var ignitorParameter = ignitor.HasValue ?
                new ObjectParameter("Ignitor", ignitor) :
                new ObjectParameter("Ignitor", typeof(int));
    
            var gasvalveParameter = gasvalve.HasValue ?
                new ObjectParameter("Gasvalve", gasvalve) :
                new ObjectParameter("Gasvalve", typeof(int));
    
            var pressureswitchParameter = pressureswitch.HasValue ?
                new ObjectParameter("Pressureswitch", pressureswitch) :
                new ObjectParameter("Pressureswitch", typeof(int));
    
            var flamesensorParameter = flamesensor.HasValue ?
                new ObjectParameter("Flamesensor", flamesensor) :
                new ObjectParameter("Flamesensor", typeof(int));
    
            var rolloutsensorParameter = rolloutsensor.HasValue ?
                new ObjectParameter("Rolloutsensor", rolloutsensor) :
                new ObjectParameter("Rolloutsensor", typeof(int));
    
            var doorswitchParameter = doorswitch.HasValue ?
                new ObjectParameter("Doorswitch", doorswitch) :
                new ObjectParameter("Doorswitch", typeof(int));
    
            var ignitioncontrolboardParameter = ignitioncontrolboard.HasValue ?
                new ObjectParameter("Ignitioncontrolboard", ignitioncontrolboard) :
                new ObjectParameter("Ignitioncontrolboard", typeof(int));
    
            var coilParameter = coil.HasValue ?
                new ObjectParameter("Coil", coil) :
                new ObjectParameter("Coil", typeof(int));
    
            var miscParameter = misc.HasValue ?
                new ObjectParameter("Misc", misc) :
                new ObjectParameter("Misc", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Units_Update", idParameter, modelNumberParameter, serialNumberParameter, manufactureDateParameter, manufactureBrandParameter, unitTonParameter, refrigerantParameter, electricalServiceParameter, maxBreakerParameter, breakerParameter, compressorParameter, capacitorParameter, contactorParameter, filterdryerParameter, defrostboardParameter, relayParameter, tXVValveParameter, reversingValveParameter, blowerMotorParameter, condensingfanmotorParameter, inducerdraftmotorParameter, transformerParameter, controlboardParameter, limitswitchParameter, ignitorParameter, gasvalveParameter, pressureswitchParameter, flamesensorParameter, rolloutsensorParameter, doorswitchParameter, ignitioncontrolboardParameter, coilParameter, miscParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<uspa_UnitType_GetAll_Result> uspa_UnitType_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_UnitType_GetAll_Result>("uspa_UnitType_GetAll");
        }
    
        public virtual int uspa_UpdateBillingStatus(Nullable<bool> isPaid, Nullable<int> billingId)
        {
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var billingIdParameter = billingId.HasValue ?
                new ObjectParameter("BillingId", billingId) :
                new ObjectParameter("BillingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_UpdateBillingStatus", isPaidParameter, billingIdParameter);
        }
    
        public virtual int uspa_UserNotification_DeleteNotification(Nullable<long> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_UserNotification_DeleteNotification", serviceIdParameter);
        }
    
        public virtual ObjectResult<uspa_UserNotification_GetBadgeCount_Result> uspa_UserNotification_GetBadgeCount(Nullable<int> userId, Nullable<int> userTypeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_UserNotification_GetBadgeCount_Result>("uspa_UserNotification_GetBadgeCount", userIdParameter, userTypeIdParameter);
        }
    
        public virtual int uspa_UserNotification_Insert(Nullable<int> userId, Nullable<int> userTypeId, string message, string status, Nullable<long> commonId, string messageType, Nullable<int> empId, Nullable<System.DateTime> addedDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commonIdParameter = commonId.HasValue ?
                new ObjectParameter("CommonId", commonId) :
                new ObjectParameter("CommonId", typeof(long));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_UserNotification_Insert", userIdParameter, userTypeIdParameter, messageParameter, statusParameter, commonIdParameter, messageTypeParameter, empIdParameter, addedDateParameter);
        }
    
        public virtual int uspa_Users_Add(Nullable<int> roleId, string firstName, string lastName, string userName, string password, string email, string image, Nullable<bool> isActive, Nullable<System.DateTime> addedDate)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_Add", roleIdParameter, firstNameParameter, lastNameParameter, userNameParameter, passwordParameter, emailParameter, imageParameter, isActiveParameter, addedDateParameter);
        }
    
        public virtual int uspa_Users_ChangePassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_ChangePassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<uspa_Users_CheckLogin_Result> uspa_Users_CheckLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_CheckLogin_Result>("uspa_Users_CheckLogin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<uspa_Users_CheckResetPasswordLink_Result> uspa_Users_CheckResetPasswordLink(string passwordUrl)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_CheckResetPasswordLink_Result>("uspa_Users_CheckResetPasswordLink", passwordUrlParameter);
        }
    
        public virtual int uspa_Users_Delete(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_Delete", userIdParameter);
        }
    
        public virtual int uspa_Users_ForgotPasswordURL(string email, string passwordUrl)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_ForgotPasswordURL", emailParameter, passwordUrlParameter);
        }
    
        public virtual ObjectResult<uspa_Users_GetAll_Result> uspa_Users_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_GetAll_Result>("uspa_Users_GetAll");
        }
    
        public virtual ObjectResult<uspa_Users_GetAllByName_Result> uspa_Users_GetAllByName(string adminName)
        {
            var adminNameParameter = adminName != null ?
                new ObjectParameter("AdminName", adminName) :
                new ObjectParameter("AdminName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_GetAllByName_Result>("uspa_Users_GetAllByName", adminNameParameter);
        }
    
        public virtual ObjectResult<uspa_Users_GetById_Result> uspa_Users_GetById(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_GetById_Result>("uspa_Users_GetById", userIdParameter);
        }
    
        public virtual ObjectResult<uspa_Users_GetUserByEmail_Result> uspa_Users_GetUserByEmail(Nullable<int> userId, string email)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_GetUserByEmail_Result>("uspa_Users_GetUserByEmail", userIdParameter, emailParameter);
        }
    
        public virtual ObjectResult<uspa_Users_GetUserByUsername_Result> uspa_Users_GetUserByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_Users_GetUserByUsername_Result>("uspa_Users_GetUserByUsername", usernameParameter);
        }
    
        public virtual int uspa_Users_ResetPassword(string passwordUrl, string newPassword)
        {
            var passwordUrlParameter = passwordUrl != null ?
                new ObjectParameter("PasswordUrl", passwordUrl) :
                new ObjectParameter("PasswordUrl", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_ResetPassword", passwordUrlParameter, newPasswordParameter);
        }
    
        public virtual int uspa_Users_SetStatus(Nullable<int> userId, Nullable<bool> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_SetStatus", userIdParameter, isActiveParameter);
        }
    
        public virtual int uspa_Users_Update(Nullable<int> id, Nullable<int> roleId, string firstName, string lastName, string password, string email, string image, Nullable<bool> isActive, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_Update", idParameter, roleIdParameter, firstNameParameter, lastNameParameter, passwordParameter, emailParameter, imageParameter, isActiveParameter, updatedDateParameter);
        }
    
        public virtual int uspa_Users_UpdateProfile(string userName, string firstName, string lastName, string email, string image)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_Users_UpdateProfile", userNameParameter, firstNameParameter, lastNameParameter, emailParameter, imageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_WorkArea_GetByAreaId(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_WorkArea_GetByAreaId", areaIdParameter);
        }
    
        public virtual int uspa_WorkArea_Insert(Nullable<int> areaId, Nullable<int> zipCodeId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var zipCodeIdParameter = zipCodeId.HasValue ?
                new ObjectParameter("ZipCodeId", zipCodeId) :
                new ObjectParameter("ZipCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_WorkArea_Insert", areaIdParameter, zipCodeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspa_ZipCode_CheckValidZipCode(Nullable<int> stateId, Nullable<int> cityId, string zipCode)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspa_ZipCode_CheckValidZipCode", stateIdParameter, cityIdParameter, zipCodeParameter);
        }
    
        public virtual int uspa_ZipCode_DeleteByID(Nullable<int> zipId)
        {
            var zipIdParameter = zipId.HasValue ?
                new ObjectParameter("ZipId", zipId) :
                new ObjectParameter("ZipId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ZipCode_DeleteByID", zipIdParameter);
        }
    
        public virtual ObjectResult<uspa_ZipCode_GetByCityId_Result> uspa_ZipCode_GetByCityId(Nullable<int> cityId, Nullable<bool> includeInactive)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var includeInactiveParameter = includeInactive.HasValue ?
                new ObjectParameter("IncludeInactive", includeInactive) :
                new ObjectParameter("IncludeInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ZipCode_GetByCityId_Result>("uspa_ZipCode_GetByCityId", cityIdParameter, includeInactiveParameter);
        }
    
        public virtual ObjectResult<uspa_ZipCode_GetByZipCode_Result> uspa_ZipCode_GetByZipCode(Nullable<int> stateId, Nullable<int> cityId, string zipCode)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ZipCode_GetByZipCode_Result>("uspa_ZipCode_GetByZipCode", stateIdParameter, cityIdParameter, zipCodeParameter);
        }
    
        public virtual int uspa_ZipCode_Insert(Nullable<int> stateId, Nullable<int> citiesId, string zipCode, Nullable<bool> status, Nullable<bool> pendingInactive, Nullable<int> addedBy, Nullable<int> addedByType, Nullable<System.DateTime> addedDate)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var pendingInactiveParameter = pendingInactive.HasValue ?
                new ObjectParameter("PendingInactive", pendingInactive) :
                new ObjectParameter("PendingInactive", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedByTypeParameter = addedByType.HasValue ?
                new ObjectParameter("AddedByType", addedByType) :
                new ObjectParameter("AddedByType", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ZipCode_Insert", stateIdParameter, citiesIdParameter, zipCodeParameter, statusParameter, pendingInactiveParameter, addedByParameter, addedByTypeParameter, addedDateParameter);
        }
    
        public virtual ObjectResult<uspa_ZipCode_SelectAll_Result> uspa_ZipCode_SelectAll(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ZipCode_SelectAll_Result>("uspa_ZipCode_SelectAll", isActiveParameter);
        }
    
        public virtual ObjectResult<uspa_ZipCode_SelectAllByStateCity_Result> uspa_ZipCode_SelectAllByStateCity(Nullable<int> stateId, Nullable<int> cityId, string zipCode, string sortField, string sortDirection)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ZipCode_SelectAllByStateCity_Result>("uspa_ZipCode_SelectAllByStateCity", stateIdParameter, cityIdParameter, zipCodeParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<uspa_ZipCode_SelectByID_Result> uspa_ZipCode_SelectByID(Nullable<int> zipCodeId)
        {
            var zipCodeIdParameter = zipCodeId.HasValue ?
                new ObjectParameter("ZipCodeId", zipCodeId) :
                new ObjectParameter("ZipCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspa_ZipCode_SelectByID_Result>("uspa_ZipCode_SelectByID", zipCodeIdParameter);
        }
    
        public virtual int uspa_ZipCode_SetStatus(Nullable<bool> isActive, Nullable<int> zipId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var zipIdParameter = zipId.HasValue ?
                new ObjectParameter("ZipId", zipId) :
                new ObjectParameter("ZipId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ZipCode_SetStatus", isActiveParameter, zipIdParameter);
        }
    
        public virtual int uspa_ZipCode_Update(Nullable<int> id, Nullable<int> stateId, Nullable<int> citiesId, string zipCode, Nullable<bool> status, Nullable<int> updatedBy, Nullable<int> updatedByType, Nullable<System.DateTime> updatedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var citiesIdParameter = citiesId.HasValue ?
                new ObjectParameter("CitiesId", citiesId) :
                new ObjectParameter("CitiesId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedByTypeParameter = updatedByType.HasValue ?
                new ObjectParameter("UpdatedByType", updatedByType) :
                new ObjectParameter("UpdatedByType", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspa_ZipCode_Update", idParameter, stateIdParameter, citiesIdParameter, zipCodeParameter, statusParameter, updatedByParameter, updatedByTypeParameter, updatedDateParameter);
        }
    }
}
